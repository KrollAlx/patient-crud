["^ ","~:output",["^ ","~:js","goog.provide('cljs.analyzer.api');\n/**\n * Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n * representing the compiler configuration. See the documentation\n * for details: https://clojurescript.org/reference/compiler-options\n */\ncljs.analyzer.api.empty_state = (function cljs$analyzer$api$empty_state(var_args){\nvar G__65243 = arguments.length;\nswitch (G__65243) {\ncase 0:\nreturn cljs.analyzer.api.empty_state.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.empty_state.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.empty_state.cljs$core$IFn$_invoke$arity$0 = (function (){\nif((!((cljs.env._STAR_compiler_STAR_ == null)))){\nreturn cljs.env._STAR_compiler_STAR_;\n} else {\nreturn cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0();\n}\n}));\n\n(cljs.analyzer.api.empty_state.cljs$core$IFn$_invoke$arity$1 = (function (opts){\nreturn cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$1(opts);\n}));\n\n(cljs.analyzer.api.empty_state.cljs$lang$maxFixedArity = 1);\n\n/**\n * Return the current compiler state atom.\n */\ncljs.analyzer.api.current_state = (function cljs$analyzer$api$current_state(){\nreturn cljs.env._STAR_compiler_STAR_;\n});\n/**\n * Return the current file under analysis or compilation.\n */\ncljs.analyzer.api.current_file = (function cljs$analyzer$api$current_file(){\nreturn cljs.analyzer._STAR_cljs_file_STAR_;\n});\n/**\n * Return the current ns under analysis or compilation.\n */\ncljs.analyzer.api.current_ns = (function cljs$analyzer$api$current_ns(){\nreturn cljs.analyzer._STAR_cljs_ns_STAR_;\n});\n/**\n * Creates an empty analysis environment.\n */\ncljs.analyzer.api.empty_env = (function cljs$analyzer$api$empty_env(){\nreturn cljs.analyzer.empty_env();\n});\n/**\n * Test if the given warning-type is enabled.\n */\ncljs.analyzer.api.warning_enabled_QMARK_ = (function cljs$analyzer$api$warning_enabled_QMARK_(warning_type){\nreturn cljs.analyzer._STAR_cljs_warnings_STAR_.call(null,warning_type);\n});\n/**\n * The default warning handler.\n * \n * Outputs the warning messages to *err*.\n */\ncljs.analyzer.api.default_warning_handler = (function cljs$analyzer$api$default_warning_handler(warning_type,env,extra){\nreturn cljs.analyzer.default_warning_handler(warning_type,env,extra);\n});\n/**\n * Helper for generating the standard analyzer messages for warnings. Should be\n *   passed warn-type and warn-info. See with-warning-handlers.\n */\ncljs.analyzer.api.warning_message = (function cljs$analyzer$api$warning_message(warn_type,warn_info){\nreturn cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2(warn_type,warn_info);\n});\n/**\n * Get the enabled warning types.\n */\ncljs.analyzer.api.enabled_warnings = (function cljs$analyzer$api$enabled_warnings(){\nreturn cljs.analyzer._STAR_cljs_warnings_STAR_;\n});\n/**\n * Return the compiler options from compiler state.\n */\ncljs.analyzer.api.get_options = (function cljs$analyzer$api$get_options(var_args){\nvar G__65316 = arguments.length;\nswitch (G__65316) {\ncase 0:\nreturn cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.api.current_state());\n}));\n\n(cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1 = (function (state){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(null,\"options\",\"options\",99638489));\n}));\n\n(cljs.analyzer.api.get_options.cljs$lang$maxFixedArity = 1);\n\n/**\n * Return the currently computed Google Closure js dependency index from the\n *   compiler state.\n */\ncljs.analyzer.api.get_js_index = (function cljs$analyzer$api$get_js_index(var_args){\nvar G__65324 = arguments.length;\nswitch (G__65324) {\ncase 0:\nreturn cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.api.current_state());\n}));\n\n(cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$1 = (function (state){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(null,\"js-dependency-index\",\"js-dependency-index\",-1887042131));\n}));\n\n(cljs.analyzer.api.get_js_index.cljs$lang$maxFixedArity = 1);\n\n/**\n * ClojureScript's default analysis passes.\n */\ncljs.analyzer.api.default_passes = cljs.analyzer.default_passes;\n/**\n * Given an analysis environment resolve a var. Analogous to\n * clojure.core/resolve\n */\ncljs.analyzer.api.resolve = (function cljs$analyzer$api$resolve(env,sym){\nif(cljs.core.map_QMARK_(env)){\n} else {\nthrow (new Error(\"Assert failed: (map? env)\"));\n}\n\nif((sym instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? sym)\"));\n}\n\ntry{var _STAR_private_var_access_nowarn_STAR__orig_val__65331 = cljs.analyzer._STAR_private_var_access_nowarn_STAR_;\nvar _STAR_private_var_access_nowarn_STAR__temp_val__65332 = true;\n(cljs.analyzer._STAR_private_var_access_nowarn_STAR_ = _STAR_private_var_access_nowarn_STAR__temp_val__65332);\n\ntry{return cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$3(env,sym,cljs.analyzer.confirm_var_exists_throw());\n}finally {(cljs.analyzer._STAR_private_var_access_nowarn_STAR_ = _STAR_private_var_access_nowarn_STAR__orig_val__65331);\n}}catch (e65330){var e = e65330;\nreturn cljs.analyzer.resolve_macro_var(env,sym);\n}});\n/**\n * Return all namespaces. Analagous to clojure.core/all-ns but\n *   returns symbols identifying namespaces not Namespace instances.\n */\ncljs.analyzer.api.all_ns = (function cljs$analyzer$api$all_ns(var_args){\nvar G__65334 = arguments.length;\nswitch (G__65334) {\ncase 0:\nreturn cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1(cljs.env._STAR_compiler_STAR_);\n}));\n\n(cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1 = (function (state){\nreturn cljs.core.keys(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927)));\n}));\n\n(cljs.analyzer.api.all_ns.cljs$lang$maxFixedArity = 1);\n\n/**\n * Given a namespace return the corresponding namespace analysis map. Analagous\n *   to clojure.core/find-ns.\n */\ncljs.analyzer.api.find_ns = (function cljs$analyzer$api$find_ns(var_args){\nvar G__65344 = arguments.length;\nswitch (G__65344) {\ncase 1:\nreturn cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$1 = (function (sym){\nreturn cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,sym);\n}));\n\n(cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2 = (function (state,sym){\nif((sym instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? sym)\"));\n}\n\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),sym], null));\n}));\n\n(cljs.analyzer.api.find_ns.cljs$lang$maxFixedArity = 2);\n\n/**\n * Given a namespace return all the var analysis maps. Analagous to\n *   clojure.core/ns-interns but returns var analysis maps not vars.\n */\ncljs.analyzer.api.ns_interns = (function cljs$analyzer$api$ns_interns(var_args){\nvar G__65348 = arguments.length;\nswitch (G__65348) {\ncase 1:\nreturn cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,ns);\n}));\n\n(cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2 = (function (state,ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"macros\",\"macros\",811339431)], null)),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"defs\",\"defs\",1398449717)], null))], 0));\n}));\n\n(cljs.analyzer.api.ns_interns.cljs$lang$maxFixedArity = 2);\n\n/**\n * Given a namespace return all the public var analysis maps. Analagous to\n *   clojure.core/ns-publics but returns var analysis maps not vars.\n */\ncljs.analyzer.api.ns_publics = (function cljs$analyzer$api$ns_publics(var_args){\nvar G__65352 = arguments.length;\nswitch (G__65352) {\ncase 1:\nreturn cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,ns);\n}));\n\n(cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2 = (function (state,ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p__65360){\nvar vec__65361 = p__65360;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65361,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65361,(1),null);\nreturn new cljs.core.Keyword(null,\"private\",\"private\",-558947994).cljs$core$IFn$_invoke$arity$1(v);\n}),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"macros\",\"macros\",811339431)], null)),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"defs\",\"defs\",1398449717)], null))], 0))));\n}));\n\n(cljs.analyzer.api.ns_publics.cljs$lang$maxFixedArity = 2);\n\n/**\n * Given a namespace and a symbol return the corresponding var analysis map.\n *   Analagous to clojure.core/ns-resolve but returns var analysis map not Var.\n */\ncljs.analyzer.api.ns_resolve = (function cljs$analyzer$api$ns_resolve(var_args){\nvar G__65368 = arguments.length;\nswitch (G__65368) {\ncase 2:\nreturn cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$2 = (function (ns,sym){\nreturn cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3(cljs.env._STAR_compiler_STAR_,ns,sym);\n}));\n\n(cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3 = (function (state,ns,sym){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nif((sym instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? sym)\"));\n}\n\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"defs\",\"defs\",1398449717),sym], null));\n}));\n\n(cljs.analyzer.api.ns_resolve.cljs$lang$maxFixedArity = 3);\n\n/**\n * Removes the namespace named by the symbol.\n */\ncljs.analyzer.api.remove_ns = (function cljs$analyzer$api$remove_ns(var_args){\nvar G__65380 = arguments.length;\nswitch (G__65380) {\ncase 1:\nreturn cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,ns);\n}));\n\n(cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2 = (function (state,ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(state,cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927)], null),cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ns], 0));\n}));\n\n(cljs.analyzer.api.remove_ns.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.","~:file","cljs/analyzer/api.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",22],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",["~$find-ns","~$remove-ns","~$ns-publics","~$ns-resolve","~$ns-interns","~$all-ns","~$resolve"]],"~:name","~$cljs.analyzer.api","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.analyzer","^18","~$ana","^18","~$cljs.env","^1:","~$env","^1:","~$cljs.core","^1<","~$goog","^1="],"~:seen",["^U",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^1<","^1<"],"~:form",["~#list",["~$ns","^12","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.",["^1C",["~:refer-clojure","~:exclude",["^[","^Z","^Y","^10","^V","^X","^W"]]],["^1C",["^1?",["^18","~:as","^19"],["^1:","^1G","^1;"]]]]],"~:flags",["^ ","^1?",["^U",[]]],"~:js-deps",["^ "],"~:deps",["^1=","^1<","^18","^1:"]],"^15","^12","~:resource-id",["~:shadow.build.classpath/resource","cljs/analyzer/api.cljc"],"~:compiled-at",1666857675560,"^13",["^ ","^18","^18","^19","^18","^1:","^1:","^1;","^1:","^1<","^1<","^1=","^1="],"~:resource-name","cljs/analyzer/api.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.analyzer.api\n  \"This is intended to be a stable api for those who need programmatic access\n  to the analyzer.\"\n  (:refer-clojure :exclude [all-ns ns-interns ns-resolve resolve find-ns\n                            ns-publics remove-ns])\n  #?(:clj  (:require [cljs.analyzer :as ana]\n                     [cljs.env :as env]\n                     [cljs.util :as util]\n                     [clojure.edn :as edn]\n                     [clojure.java.io :as io])\n     :cljs (:require [cljs.analyzer :as ana]\n                     [cljs.env :as env])))\n\n;; =============================================================================\n;; Useful Utilities\n\n(defn empty-state\n  \"Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options\"\n  ([]\n   (if-not (nil? env/*compiler*)\n     env/*compiler*\n     (env/default-compiler-env)))\n  ([opts]\n   (env/default-compiler-env opts)))\n\n(defn current-state\n  \"Return the current compiler state atom.\"\n  []\n  env/*compiler*)\n\n(defn current-file\n  \"Return the current file under analysis or compilation.\"\n  []\n  ana/*cljs-file*)\n\n(defn current-ns\n  \"Return the current ns under analysis or compilation.\"\n  []\n  ana/*cljs-ns*)\n\n(defmacro with-state\n  \"Run the body with the given compilation state Atom<Map>.\"\n  [state & body]\n  `(env/with-compiler-env ~state\n     ~@body))\n\n(defn empty-env\n  \"Creates an empty analysis environment.\"\n  []\n  (ana/empty-env))\n\n(defmacro no-warn\n  \"Disable analyzer warnings for any analysis executed in body.\"\n  [& body]\n  (let [no-warnings (zipmap (keys ana/*cljs-warnings*) (repeat false))]\n    `(binding [ana/*cljs-warnings* ~no-warnings]\n       ~@body)))\n\n(defn warning-enabled?\n  \"Test if the given warning-type is enabled.\"\n  [warning-type]\n  (ana/*cljs-warnings* warning-type))\n\n(defn default-warning-handler\n  \"The default warning handler.\n\n   Outputs the warning messages to *err*.\"\n  [warning-type env extra]\n  (ana/default-warning-handler warning-type env extra))\n\n(defmacro with-warning-handlers\n  \"Helper macro for custom handling of emitted warnings. Handlers should be\n   a vector of functions. The signature of these functions is\n   [warn-type env warn-info]. warn-type is a keyword describing the warning,\n   env is the analysis environment, and warn-info is a map of extra useful\n   information for a particular warning type.\"\n  [handlers & body]\n  `(ana/with-warning-handlers ~handlers\n     ~@body))\n\n(defn warning-message\n  \"Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers.\"\n  [warn-type warn-info]\n  (ana/error-message warn-type warn-info))\n\n(defn enabled-warnings\n  \"Get the enabled warning types.\"\n  []\n  ana/*cljs-warnings*)\n\n(defn get-options\n  \"Return the compiler options from compiler state.\"\n  ([] (get-options (current-state)))\n  ([state]\n   (get @state :options)))\n\n(defn get-js-index\n  \"Return the currently computed Google Closure js dependency index from the\n  compiler state.\"\n  ([] (get-js-index (current-state)))\n  ([state]\n   (get @state :js-dependency-index)))\n\n(def\n  ^{:doc \"ClojureScript's default analysis passes.\"}\n  default-passes ana/default-passes)\n\n(defmacro with-passes\n  \"Evaluate the body with the provided sequence of compiler passes.\"\n  [passes & body]\n  `(binding [ana/*passes* ~passes]\n     ~@body))\n\n#?(:clj\n   (defn analyze\n     \"Given an environment, a map containing {:locals (mapping of names to bindings), :context\n     (one of :statement, :expr, :return), :ns (a symbol naming the\n     compilation ns)}, and form, returns an expression object (a map\n     containing at least :form, :op and :env keys). If expr has any (immediately)\n     nested exprs, must have :children entry. This must be a vector of keywords naming\n     the immediately nested fields mapped to an expr or vector of exprs. This will\n     facilitate code walking without knowing the details of the op set.\"\n     ([env form] (analyze env form nil))\n     ([env form name] (analyze env form name nil))\n     ([env form name opts]\n      (analyze (or (current-state) (empty-state opts)) env form name opts))\n     ([state env form name opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze env form name opts))))))\n\n#?(:clj\n   (defn forms-seq\n     \"Seq of Clojure/ClojureScript forms from rdr, a java.io.Reader. Optionally\n     accepts a filename argument which will be used in any emitted errors.\"\n     ([rdr] (ana/forms-seq* rdr nil))\n     ([rdr filename] (ana/forms-seq* rdr filename))))\n\n#?(:clj\n   (defn parse-ns\n     \"Helper for parsing only the essential namespace information from a\n      ClojureScript source file and returning a cljs.closure/IJavaScript compatible\n      map _not_ a namespace AST node.\n\n      By default does not load macros or perform any analysis of dependencies. If\n      opts parameter provided :analyze-deps and :load-macros keys their values will\n      be used for *analyze-deps* and *load-macros* bindings respectively. This\n      function does _not_ side-effect the ambient compilation environment unless\n      requested via opts where :restore is false.\"\n     ([src] (parse-ns src nil nil))\n     ([src opts] (parse-ns src nil opts))\n     ([src dest opts]\n      (parse-ns (or (current-state) (empty-state opts)) src dest opts))\n     ([state src dest opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/parse-ns src dest opts))))))\n\n#?(:clj\n   (defn analyze-file\n     \"Given a java.io.File, java.net.URL or a string identifying a resource on the\n      classpath attempt to analyze it.\n\n      This function side-effects the ambient compilation environment\n      `cljs.env/*compiler*` to aggregate analysis information. opts argument is\n      compiler options, if :cache-analysis true will cache analysis to\n      \\\":output-dir/some/ns/foo.cljs.cache.edn\\\". This function does not return a\n      meaningful value.\"\n     ([f] (analyze-file f nil))\n     ([f opts]\n      (analyze-file (or (current-state) (empty-state opts)) f opts))\n     ([state f opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze-file f opts))))))\n\n#?(:clj\n   (defn read-analysis-cache\n     \"Read an analysis cache.\"\n     [cache-file]\n     (case (util/ext cache-file)\n       \"edn\" (edn/read-string (slurp cache-file))\n       \"json\" (let [{:keys [reader read]} @ana/transit]\n                (with-open [is (io/input-stream cache-file)]\n                  (read (reader is :json ana/transit-read-opts)))))))\n\n;; =============================================================================\n;; Main API\n\n(defn resolve\n  \"Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve\"\n  [env sym]\n  {:pre [(map? env) (symbol? sym)]}\n  (try\n    (binding [ana/*private-var-access-nowarn* true]\n      (ana/resolve-var env sym\n        (ana/confirm-var-exists-throw)))\n    (catch #?(:clj Exception :cljs :default) e\n      (ana/resolve-macro-var env sym))))\n\n(defn all-ns\n  \"Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.\"\n  ([]\n   (all-ns env/*compiler*))\n  ([state]\n   (keys (get @state ::ana/namespaces))))\n\n(defn find-ns\n  \"Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.\"\n  ([sym]\n   (find-ns env/*compiler* sym))\n  ([state sym]\n   {:pre [(symbol? sym)]}\n   (get-in @state [::ana/namespaces sym])))\n\n(defn ns-interns\n  \"Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-interns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (merge\n     (get-in @state [::ana/namespaces ns :macros])\n     (get-in @state [::ana/namespaces ns :defs]))))\n\n(defn ns-publics\n  \"Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-publics env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (->> (merge\n          (get-in @state [::ana/namespaces ns :macros])\n          (get-in @state [::ana/namespaces ns :defs]))\n        (remove (fn [[k v]] (:private v)))\n        (into {}))))\n\n(defn ns-resolve\n  \"Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.\"\n  ([ns sym]\n   (ns-resolve env/*compiler* ns sym))\n  ([state ns sym]\n   {:pre [(symbol? ns) (symbol? sym)]}\n   (get-in @state [::ana/namespaces ns :defs sym])))\n\n(defn remove-ns\n  \"Removes the namespace named by the symbol.\"\n  ([ns]\n   (remove-ns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (swap! state update-in [::ana/namespaces] dissoc ns)))\n\n(defmacro in-cljs-user\n  \"Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body.\"\n  [env & body]\n  `(binding [cljs.analyzer/*cljs-ns* 'cljs.user]\n     (cljs.env/with-compiler-env ~env\n       ~@body)))\n","~:reader-features",["^U",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__65243","cljs.analyzer.api/empty-state","js/Error","cljs.env/*compiler*","cljs.env.default_compiler_env","opts","cljs.analyzer.api/current-state","cljs.analyzer.api/current-file","cljs.analyzer/*cljs-file*","cljs.analyzer.api/current-ns","cljs.analyzer/*cljs-ns*","cljs.analyzer.api/empty-env","cljs.analyzer/empty-env","cljs.analyzer.api/warning-enabled?","warning-type","cljs.analyzer/*cljs-warnings*","cljs.analyzer.api/default-warning-handler","env","extra","cljs.analyzer/default-warning-handler","cljs.analyzer.api/warning-message","warn-type","warn-info","cljs.analyzer/error-message","cljs.analyzer.api/enabled-warnings","G__65316","cljs.analyzer.api/get-options","cljs.analyzer.api.get_options","state","cljs.core/deref","cljs.core.get","G__65324","cljs.analyzer.api/get-js-index","cljs.analyzer.api.get_js_index","cljs.analyzer.api/default-passes","cljs.analyzer/default-passes","cljs.analyzer.api/resolve","sym","cljs.core/map?","cljs.core/Symbol","e65330","*private-var-access-nowarn*-orig-val__65331","*private-var-access-nowarn*-temp-val__65332","cljs.analyzer/*private-var-access-nowarn*","cljs.analyzer.resolve_var","cljs.analyzer/confirm-var-exists-throw","e","cljs.analyzer/resolve-macro-var","G__65334","cljs.analyzer.api/all-ns","cljs.analyzer.api.all_ns","cljs.core/keys","G__65344","cljs.analyzer.api/find-ns","cljs.analyzer.api.find_ns","cljs.core.get_in","G__65348","cljs.analyzer.api/ns-interns","ns","cljs.analyzer.api.ns_interns","cljs.core.merge","G__65352","cljs.analyzer.api/ns-publics","cljs.analyzer.api.ns_publics","cljs.core.remove","p__65360","vec__65361","cljs.core.nth","k","v","cljs.core.into","G__65368","cljs.analyzer.api/ns-resolve","cljs.analyzer.api.ns_resolve","G__65380","cljs.analyzer.api/remove-ns","cljs.analyzer.api.remove_ns","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/dissoc"]],"~:used-vars",["^U",["~$cljs.analyzer.api/empty-state","~$cljs.analyzer/resolve-var","~$cljs.analyzer.api/default-passes","~$cljs.analyzer.api/default-warning-handler","~$cljs.core/keys","~$cljs.env/default-compiler-env","~$cljs.core/deref","~$cljs.analyzer.api/current-file","~$cljs.analyzer.api/empty-env","~$cljs.analyzer.api/current-ns","~$cljs.core/dissoc","~$cljs.analyzer.api/ns-interns","~$cljs.analyzer.api/all-ns","~$cljs.env/*compiler*","~$cljs.analyzer.api/get-js-index","~$cljs.core/into","~$cljs.core/map?","~$cljs.analyzer/*cljs-warnings*","~$cljs.analyzer/error-message","~$cljs.analyzer/default-warning-handler","~$cljs.core/get-in","~$cljs.core/swap!","~$cljs.core/get","~$cljs.analyzer.api/find-ns","~$cljs.core/remove","~$cljs.analyzer.api/resolve","~$cljs.analyzer/empty-env","~$cljs.analyzer.api/warning-message","~$cljs.analyzer/default-passes","~$cljs.analyzer.api/current-state","~$cljs.core/nth","~$cljs.analyzer.api/remove-ns","~$cljs.analyzer.api/get-options","~$cljs.analyzer.api/ns-publics","~$cljs.analyzer/resolve-macro-var","~$cljs.analyzer/confirm-var-exists-throw","~$cljs.core/not","~$cljs.core/Symbol","~$cljs.analyzer.api/warning-enabled?","~$cljs.analyzer/*private-var-access-nowarn*","~$cljs.analyzer/*cljs-file*","~$cljs.analyzer.api/enabled-warnings","~$cljs.core/merge","~$cljs.analyzer/*cljs-ns*","~$cljs.core/update-in","~$cljs.analyzer.api/ns-resolve","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^1L","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^U",[]],"~:deps-syms",["^1=","~$goog.dom.HtmlElement"]]],["^1L","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","~$clojure.string","~$goog.string"]]],["^1L","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","cljs/env.cljc"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<"]]],["^1L","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1L","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3;"]]],["^1L","cljs/analyzer/impl/namespaces.cljc"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<"]]],["^1L","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3<"]]],["^1L","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","^F","^J","^@","^D","~$cljs.tools.reader","^37","~$goog.string.StringBuffer"]]],["^1L","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<"]]],["^1L","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","^J","^@","^D","^F","^38","^37","^3D"]]],["^1L","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3<"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^1L","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3<","~$goog.reflect"]]],["^1L","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3<","~$goog.fs.blob","^3=","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3?","^3@","^3A","^3B"]]],["^1L","cljs/analyzer/passes/and_or.cljc"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","~$cljs.analyzer.passes"]]],["^1L","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3A","~$goog.html.SafeUrl","^3B","^3<","^3;"]]],["^1L","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3<","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3H","~$goog.html.SafeStyle","^3K","^3>","~$goog.html.uncheckedconversions","^3A","^3;"]]],["^1L","cljs/analyzer/passes.cljc"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<"]]],["^1L","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3A","^3?","^3@","^3H","^3O","~$goog.html.SafeStyleSheet","^3K","~$goog.dom.TagName","^3>","^3B","^3<","~$goog.labs.userAgent.browser","^38","^39","^3;","~$goog.dom.tags","^3I"]]],["^1L","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^39"]]],["^1L","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","cljs/reader.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","^39","^3C","^L","^3D"]]],["^1L","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1L","cljs/tagged_literals.cljc"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","~$cljs.reader"]]],["^1L","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^38","^3<","~$goog.collections.maps","^37","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1L","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",[]]],["^1L","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^38","^39"]]],["^1L","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","^J","^36","~$cljs.tools.reader.impl.inspect"]]],["^1L","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","^37","^3D"]]],["^1L","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","~$goog.dom.safe","^3P","^3A","^3;"]]],["^1L","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","~$goog.labs.userAgent","^3;"]]],["^1L","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","^@","^37","^3D"]]],["^1L","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3<","^3N","^3H","^3O","^3Q","^3K","^3>","^3A","^3;","^3?"]]],["^1L","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","^F","^J","^@"]]],["^1L","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1="]]],["^1L","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","~$goog.math.Long","~$goog.math.Integer","^37","^39","^38","~$goog.Uri","^3D"]]],["^1L","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3A","^3B","^3I","^3<"]]],["^1L","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3A","^3O","^3B","^39","^3<","^3;"]]],["^1L","cljs/analyzer/api.cljc"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","^18","^1:"]]],["^1L","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3F"]]],["^1L","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<"]]],["^1L","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3<","^37"]]],["^1L","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^3<","^3B"]]],["^1L","cljs/analyzer.cljc"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<","~$cljs.analyzer.impl","~$cljs.analyzer.impl.namespaces","~$cljs.analyzer.passes.and-or","^1:","^3W","~$cljs.tagged-literals","^3C","^J","~$clojure.set","^36","^37"]]],["^1L","cljs/analyzer/impl.cljc"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^U",[]],"^34",["^1=","^1<"]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env/macros.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/macros.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1666857280000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.","^7","cljs/analyzer/api.cljc","^8",9,"^9",5,"^:",9,"^;",22],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q","^R"],"^S",null,"^T",["^U",["^V","^W","^X","^Y","^Z","^[","^10"]],"^11","^12","^13",["^ "],"^16",null,"^17",["^ ","^18","^18","^19","^18","^1:","^1:","^1;","^1:","^1<","^1<","^1=","^1="],"^1>",["^U",["^1?"]],"~:shadow/js-access-global",["^U",["Error"]],"^1@",null,"~:defs",["^ ","^V",["^ ","~:protocol-inline",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",221,"^9",7,"^:",221,"^;",14,"~:arglists",["^1C",["~$quote",["^1C",[["~$sym"],["~$state","^59"]]]]],"^6","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^59"],["^5:","^59"]],"^57",["^1C",[["^59"],["^5:","^59"]]],"~:arglists-meta",["^1C",[null,null]]]],"^11","^2C","^7","cljs/analyzer/api.cljc","^;",14,"^5;",["^ ","^5<",false,"^5=",2,"^5>",2,"^5?",[["^59"],["^5:","^59"]],"^57",["^1C",[["^59"],["^5:","^59"]]],"^5@",["^1C",[null,null]]],"^5?",[["^59"],["^5:","^59"]],"~:protocol-impl",null,"^5=",2,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"~:methods",[["^ ","^5=",1,"^5<",false,"~:tag","~$any"],["^ ","^5=",2,"^5<",false,"^5C",["^U",[null,"^5D"]]]],"^8",221,"^:",221,"^5>",2,"~:fn-var",true,"^57",["^1C",[["^59"],["^5:","^59"]]],"^6","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns."],"^W",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",263,"^9",7,"^:",263,"^;",16,"^57",["^1C",["^58",["^1C",[["^1D"],["^5:","^1D"]]]]],"^6","Removes the namespace named by the symbol.","^5;",["^ ","^5<",false,"^5=",2,"^5>",2,"^5?",[["^1D"],["^5:","^1D"]],"^57",["^1C",[["^1D"],["^5:","^1D"]]],"^5@",["^1C",[null,null]]]],"^11","^2K","^7","cljs/analyzer/api.cljc","^;",16,"^5;",["^ ","^5<",false,"^5=",2,"^5>",2,"^5?",[["^1D"],["^5:","^1D"]],"^57",["^1C",[["^1D"],["^5:","^1D"]]],"^5@",["^1C",[null,null]]],"^5?",[["^1D"],["^5:","^1D"]],"^5A",null,"^5=",2,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^5B",[["^ ","^5=",1,"^5<",false,"^5C","^5D"],["^ ","^5=",2,"^5<",false,"^5C",["^U",[null,"^5D"]]]],"^8",263,"^:",263,"^5>",2,"^5E",true,"^57",["^1C",[["^1D"],["^5:","^1D"]]],"^6","Removes the namespace named by the symbol."],"^X",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",241,"^9",7,"^:",241,"^;",17,"^57",["^1C",["^58",["^1C",[["^1D"],["^5:","^1D"]]]]],"^6","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","^5;",["^ ","^5<",false,"^5=",2,"^5>",2,"^5?",[["^1D"],["^5:","^1D"]],"^57",["^1C",[["^1D"],["^5:","^1D"]]],"^5@",["^1C",[null,null]]]],"^11","^2M","^7","cljs/analyzer/api.cljc","^;",17,"^5;",["^ ","^5<",false,"^5=",2,"^5>",2,"^5?",[["^1D"],["^5:","^1D"]],"^57",["^1C",[["^1D"],["^5:","^1D"]]],"^5@",["^1C",[null,null]]],"^5?",[["^1D"],["^5:","^1D"]],"^5A",null,"^5=",2,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^5B",[["^ ","^5=",1,"^5<",false,"^5C","^5D"],["^ ","^5=",2,"^5<",false,"^5C",["^U",[null,"~$clj","^5D"]]]],"^8",241,"^:",241,"^5>",2,"^5E",true,"^57",["^1C",[["^1D"],["^5:","^1D"]]],"^6","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars."],"~$get-options",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",102,"^9",7,"^:",102,"^;",18,"^57",["^1C",["^58",["^1C",[[],["^5:"]]]]],"^6","Return the compiler options from compiler state.","^5;",["^ ","^5<",false,"^5=",1,"^5>",1,"^5?",[[],["^5:"]],"^57",["^1C",[[],["^5:"]]],"^5@",["^1C",[null,null]]]],"^11","^2L","^7","cljs/analyzer/api.cljc","^;",18,"^5;",["^ ","^5<",false,"^5=",1,"^5>",1,"^5?",[[],["^5:"]],"^57",["^1C",[[],["^5:"]]],"^5@",["^1C",[null,null]]],"^5?",[[],["^5:"]],"^5A",null,"^5=",1,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^5B",[["^ ","^5=",0,"^5<",false,"^5C","^5D"],["^ ","^5=",1,"^5<",false,"^5C",["^U",["^5D","~$clj-nil"]]]],"^8",102,"^:",102,"^5>",1,"^5E",true,"^57",["^1C",[[],["^5:"]]],"^6","Return the compiler options from compiler state."],"~$warning-message",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",91,"^9",7,"^:",91,"^;",22,"^57",["^1C",["^58",["^1C",[["~$warn-type","~$warn-info"]]]]],"^6","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers."],"^11","^2G","^7","cljs/analyzer/api.cljc","^;",22,"^5?",["^1C",[["^5J","^5K"]]],"^5A",null,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^8",91,"~:ret-tag","^5D","^:",91,"^5>",2,"^5E",true,"^57",["^1C",["^58",["^1C",[["^5J","^5K"]]]]],"^6","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers."],"~$warning-enabled?",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",69,"^9",7,"^:",69,"^;",23,"^57",["^1C",["^58",["^1C",[["~$warning-type"]]]]],"^6","Test if the given warning-type is enabled."],"^11","^2R","^7","cljs/analyzer/api.cljc","^;",23,"^5?",["^1C",[["^5N"]]],"^5A",null,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^8",69,"^5L","^5D","^:",69,"^5>",1,"^5E",true,"^57",["^1C",["^58",["^1C",[["^5N"]]]]],"^6","Test if the given warning-type is enabled."],"~$current-state",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",36,"^9",7,"^:",36,"^;",20,"^57",["^1C",["^58",["^1C",[[]]]]],"^6","Return the current compiler state atom."],"^11","^2I","^7","cljs/analyzer/api.cljc","^;",20,"^5?",["^1C",[[]]],"^5A",null,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^8",36,"^5L","^5D","^:",36,"^5>",0,"^5E",true,"^57",["^1C",["^58",["^1C",[[]]]]],"^6","Return the current compiler state atom."],"^Y",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",254,"^9",7,"^:",254,"^;",17,"^57",["^1C",["^58",["^1C",[["^1D","^59"],["^5:","^1D","^59"]]]]],"^6","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","^5;",["^ ","^5<",false,"^5=",3,"^5>",3,"^5?",[["^1D","^59"],["^5:","^1D","^59"]],"^57",["^1C",[["^1D","^59"],["^5:","^1D","^59"]]],"^5@",["^1C",[null,null]]]],"^11","^2Y","^7","cljs/analyzer/api.cljc","^;",17,"^5;",["^ ","^5<",false,"^5=",3,"^5>",3,"^5?",[["^1D","^59"],["^5:","^1D","^59"]],"^57",["^1C",[["^1D","^59"],["^5:","^1D","^59"]]],"^5@",["^1C",[null,null]]],"^5?",[["^1D","^59"],["^5:","^1D","^59"]],"^5A",null,"^5=",3,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^5B",[["^ ","^5=",2,"^5<",false,"^5C","^5D"],["^ ","^5=",3,"^5<",false,"^5C",["^U",[null,"^5D"]]]],"^8",254,"^:",254,"^5>",3,"^5E",true,"^57",["^1C",[["^1D","^59"],["^5:","^1D","^59"]]],"^6","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var."],"~$enabled-warnings",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",97,"^9",7,"^:",97,"^;",23,"^57",["^1C",["^58",["^1C",[[]]]]],"^6","Get the enabled warning types."],"^11","^2U","^7","cljs/analyzer/api.cljc","^;",23,"^5?",["^1C",[[]]],"^5A",null,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^8",97,"^5L","^5D","^:",97,"^5>",0,"^5E",true,"^57",["^1C",["^58",["^1C",[[]]]]],"^6","Get the enabled warning types."],"~$empty-state",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",25,"^9",7,"^:",25,"^;",18,"^57",["^1C",["^58",["^1C",[[],["~$opts"]]]]],"^6","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options","^5;",["^ ","^5<",false,"^5=",1,"^5>",1,"^5?",[[],["^5R"]],"^57",["^1C",[[],["^5R"]]],"^5@",["^1C",[null,null]]]],"^11","^1X","^7","cljs/analyzer/api.cljc","^;",18,"^5;",["^ ","^5<",false,"^5=",1,"^5>",1,"^5?",[[],["^5R"]],"^57",["^1C",[[],["^5R"]]],"^5@",["^1C",[null,null]]],"^5?",[[],["^5R"]],"^5A",null,"^5=",1,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^5B",[["^ ","^5=",0,"^5<",false,"^5C","^5D"],["^ ","^5=",1,"^5<",false,"^5C","~$cljs.core/Atom"]],"^8",25,"^:",25,"^5>",1,"^5E",true,"^57",["^1C",[[],["^5R"]]],"^6","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options"],"~$default-passes",["^ ","^5",["^ ","^7","cljs/analyzer/api.cljc","^8",117,"^9",3,"^:",117,"^;",17,"^6","ClojureScript's default analysis passes."],"^11","^1Z","^7","cljs/analyzer/api.cljc","^;",17,"^9",1,"^8",115,"^:",117,"^5C","~$cljs.core/IVector","^6","ClojureScript's default analysis passes."],"~$empty-env",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",57,"^9",7,"^:",57,"^;",16,"^57",["^1C",["^58",["^1C",[[]]]]],"^6","Creates an empty analysis environment."],"^11","^24","^7","cljs/analyzer/api.cljc","^;",16,"^5?",["^1C",[[]]],"^5A",null,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^8",57,"^5L","^5D","^:",57,"^5>",0,"^5E",true,"^57",["^1C",["^58",["^1C",[[]]]]],"^6","Creates an empty analysis environment."],"~$default-warning-handler",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",74,"^9",7,"^:",74,"^;",30,"^57",["^1C",["^58",["^1C",[["^5N","^1;","~$extra"]]]]],"^6","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^11","^1[","^7","cljs/analyzer/api.cljc","^;",30,"^5?",["^1C",[["^5N","^1;","^5X"]]],"^5A",null,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^8",74,"^5L",["^U",[null,"^5H"]],"^:",74,"^5>",3,"^5E",true,"^57",["^1C",["^58",["^1C",[["^5N","^1;","^5X"]]]]],"^6","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^Z",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",230,"^9",7,"^:",230,"^;",17,"^57",["^1C",["^58",["^1C",[["^1D"],["^5:","^1D"]]]]],"^6","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","^5;",["^ ","^5<",false,"^5=",2,"^5>",2,"^5?",[["^1D"],["^5:","^1D"]],"^57",["^1C",[["^1D"],["^5:","^1D"]]],"^5@",["^1C",[null,null]]]],"^11","^27","^7","cljs/analyzer/api.cljc","^;",17,"^5;",["^ ","^5<",false,"^5=",2,"^5>",2,"^5?",[["^1D"],["^5:","^1D"]],"^57",["^1C",[["^1D"],["^5:","^1D"]]],"^5@",["^1C",[null,null]]],"^5?",[["^1D"],["^5:","^1D"]],"^5A",null,"^5=",2,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^5B",[["^ ","^5=",1,"^5<",false,"^5C","^5D"],["^ ","^5=",2,"^5<",false,"^5C",["^U",["^5D","^5H"]]]],"^8",230,"^:",230,"^5>",2,"^5E",true,"^57",["^1C",[["^1D"],["^5:","^1D"]]],"^6","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars."],"^[",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",213,"^9",7,"^:",213,"^;",13,"^57",["^1C",["^58",["^1C",[[],["^5:"]]]]],"^6","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","^5;",["^ ","^5<",false,"^5=",1,"^5>",1,"^5?",[[],["^5:"]],"^57",["^1C",[[],["^5:"]]],"^5@",["^1C",[null,null]]]],"^11","^28","^7","cljs/analyzer/api.cljc","^;",13,"^5;",["^ ","^5<",false,"^5=",1,"^5>",1,"^5?",[[],["^5:"]],"^57",["^1C",[[],["^5:"]]],"^5@",["^1C",[null,null]]],"^5?",[[],["^5:"]],"^5A",null,"^5=",1,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^5B",[["^ ","^5=",0,"^5<",false,"^5C","^5D"],["^ ","^5=",1,"^5<",false,"^5C",["^U",["~$cljs.core/KeySeq","^5H"]]]],"^8",213,"^:",213,"^5>",1,"^5E",true,"^57",["^1C",[[],["^5:"]]],"^6","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances."],"~$current-file",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",41,"^9",7,"^:",41,"^;",19,"^57",["^1C",["^58",["^1C",[[]]]]],"^6","Return the current file under analysis or compilation."],"^11","^23","^7","cljs/analyzer/api.cljc","^;",19,"^5?",["^1C",[[]]],"^5A",null,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^8",41,"^5L","^5D","^:",41,"^5>",0,"^5E",true,"^57",["^1C",["^58",["^1C",[[]]]]],"^6","Return the current file under analysis or compilation."],"~$current-ns",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",46,"^9",7,"^:",46,"^;",17,"^57",["^1C",["^58",["^1C",[[]]]]],"^6","Return the current ns under analysis or compilation."],"^11","^25","^7","cljs/analyzer/api.cljc","^;",17,"^5?",["^1C",[[]]],"^5A",null,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^8",46,"^5L","^5D","^:",46,"^5>",0,"^5E",true,"^57",["^1C",["^58",["^1C",[[]]]]],"^6","Return the current ns under analysis or compilation."],"^10",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",201,"^9",7,"^:",201,"^;",14,"^57",["^1C",["^58",["^1C",[["^1;","^59"]]]]],"^6","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"^11","^2E","^7","cljs/analyzer/api.cljc","^;",14,"^5?",["^1C",[["^1;","^59"]]],"^5A",null,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^8",201,"^:",201,"^5>",2,"^5E",true,"^57",["^1C",["^58",["^1C",[["^1;","^59"]]]]],"^6","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"~$get-js-index",["^ ","^56",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",108,"^9",7,"^:",108,"^;",19,"^57",["^1C",["^58",["^1C",[[],["^5:"]]]]],"^6","Return the currently computed Google Closure js dependency index from the\n  compiler state.","^5;",["^ ","^5<",false,"^5=",1,"^5>",1,"^5?",[[],["^5:"]],"^57",["^1C",[[],["^5:"]]],"^5@",["^1C",[null,null]]]],"^11","^2:","^7","cljs/analyzer/api.cljc","^;",19,"^5;",["^ ","^5<",false,"^5=",1,"^5>",1,"^5?",[[],["^5:"]],"^57",["^1C",[[],["^5:"]]],"^5@",["^1C",[null,null]]],"^5?",[[],["^5:"]],"^5A",null,"^5=",1,"^5@",["^1C",[null,null]],"^9",1,"^5<",false,"^5B",[["^ ","^5=",0,"^5<",false,"^5C","^5D"],["^ ","^5=",1,"^5<",false,"^5C",["^U",["^5D","^5H"]]]],"^8",108,"^:",108,"^5>",1,"^5E",true,"^57",["^1C",[[],["^5:"]]],"^6","Return the currently computed Google Closure js dependency index from the\n  compiler state."]],"^1A",["^ ","^1<","^1<"],"~:cljs.analyzer/constants",["^ ","^1>",["^U",["~:cljs.analyzer/namespaces","~:private","~:macros","~:js-dependency-index","^55","~:options"]],"~:order",["^66","^65","^62","^64","^55","^63"]],"^1H",["^ ","^1?",["^U",[]]],"^1I",["^ "],"^1J",["^1=","^1<","^18","^1:"]],"^15","^12","~:ns-specs",["^ "],"~:ns-spec-vars",["^U",[]],"~:compiler-options",["^30",[["^6:","~:static-fns"],true,["^6:","~:shadow-tweaks"],null,["^6:","~:source-map-inline"],null,["^6:","~:elide-asserts"],false,["^6:","~:optimize-constants"],null,["^6:","^1O"],null,["^6:","~:external-config"],null,["^6:","~:tooling-config"],null,["^6:","~:emit-constants"],null,["^6:","~:load-tests"],null,["^6:","~:form-size-threshold"],null,["^6:","~:global-goog-object&array"],null,["^6:","~:data-readers"],null,["^6:","~:infer-externs"],"~:auto",["^6:","^1Q"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6:","~:fn-invoke-direct"],null,["^6:","~:source-map"],"/dev/null"]]]