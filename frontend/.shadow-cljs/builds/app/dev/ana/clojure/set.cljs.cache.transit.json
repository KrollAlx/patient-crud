["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\n\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p1__17265_SHARP_){\nreturn (max === p1__17265_SHARP_);\n}),coll));\n});\n/**\n * Return a set that is the union of the input sets\n */\nclojure.set.union = (function clojure$set$union(var_args){\nvar G__17337 = arguments.length;\nswitch (G__17337) {\ncase 0:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__5794__auto__ = [];\nvar len__5769__auto___17455 = arguments.length;\nvar i__5770__auto___17456 = (0);\nwhile(true){\nif((i__5770__auto___17456 < len__5769__auto___17455)){\nargs_arr__5794__auto__.push((arguments[i__5770__auto___17456]));\n\nvar G__17457 = (i__5770__auto___17456 + (1));\ni__5770__auto___17456 = G__17457;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5795__auto__ = (new cljs.core.IndexedSeq(args_arr__5794__auto__.slice((2)),(0),null));\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5795__auto__);\n\n}\n});\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentHashSet.EMPTY;\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\n}\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n}));\n\n/** @this {Function} */\n(clojure.set.union.cljs$lang$applyTo = (function (seq17293){\nvar G__17294 = cljs.core.first(seq17293);\nvar seq17293__$1 = cljs.core.next(seq17293);\nvar G__17296 = cljs.core.first(seq17293__$1);\nvar seq17293__$2 = cljs.core.next(seq17293__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__17294,G__17296,seq17293__$2);\n}));\n\n(clojure.set.union.cljs$lang$maxFixedArity = (2));\n\n/**\n * Return a set that is the intersection of the input sets\n */\nclojure.set.intersection = (function clojure$set$intersection(var_args){\nvar G__17352 = arguments.length;\nswitch (G__17352) {\ncase 1:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__5794__auto__ = [];\nvar len__5769__auto___17463 = arguments.length;\nvar i__5770__auto___17464 = (0);\nwhile(true){\nif((i__5770__auto___17464 < len__5769__auto___17463)){\nargs_arr__5794__auto__.push((arguments[i__5770__auto___17464]));\n\nvar G__17466 = (i__5770__auto___17464 + (1));\ni__5770__auto___17464 = G__17466;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5795__auto__ = (new cljs.core.IndexedSeq(args_arr__5794__auto__.slice((2)),(0),null));\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5795__auto__);\n\n}\n});\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nwhile(true){\nif((cljs.core.count(s2) < cljs.core.count(s1))){\nvar G__17467 = s2;\nvar G__17468 = s1;\ns1 = G__17467;\ns2 = G__17468;\ncontinue;\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\nreturn (function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn result;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n}\n});})(s1,s2))\n,s1,s1);\n}\nbreak;\n}\n}));\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__17341_SHARP_){\nreturn (- cljs.core.count(p1__17341_SHARP_));\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n}));\n\n/** @this {Function} */\n(clojure.set.intersection.cljs$lang$applyTo = (function (seq17343){\nvar G__17345 = cljs.core.first(seq17343);\nvar seq17343__$1 = cljs.core.next(seq17343);\nvar G__17346 = cljs.core.first(seq17343__$1);\nvar seq17343__$2 = cljs.core.next(seq17343__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__17345,G__17346,seq17343__$2);\n}));\n\n(clojure.set.intersection.cljs$lang$maxFixedArity = (2));\n\n/**\n * Return a set that is the first set without elements of the remaining sets\n */\nclojure.set.difference = (function clojure$set$difference(var_args){\nvar G__17363 = arguments.length;\nswitch (G__17363) {\ncase 1:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__5794__auto__ = [];\nvar len__5769__auto___17470 = arguments.length;\nvar i__5770__auto___17471 = (0);\nwhile(true){\nif((i__5770__auto___17471 < len__5769__auto___17470)){\nargs_arr__5794__auto__.push((arguments[i__5770__auto___17471]));\n\nvar G__17472 = (i__5770__auto___17471 + (1));\ni__5770__auto___17471 = G__17472;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5795__auto__ = (new cljs.core.IndexedSeq(args_arr__5794__auto__.slice((2)),(0),null));\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5795__auto__);\n\n}\n});\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n} else {\nreturn result;\n}\n}),s1,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\n}\n}));\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\n}));\n\n/** @this {Function} */\n(clojure.set.difference.cljs$lang$applyTo = (function (seq17359){\nvar G__17360 = cljs.core.first(seq17359);\nvar seq17359__$1 = cljs.core.next(seq17359);\nvar G__17361 = cljs.core.first(seq17359__$1);\nvar seq17359__$2 = cljs.core.next(seq17359__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__17360,G__17361,seq17359__$2);\n}));\n\n(clojure.set.difference.cljs$lang$maxFixedArity = (2));\n\n/**\n * Returns a set of the elements for which pred is true\n */\nclojure.set.select = (function clojure$set$select(pred,xset){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\nreturn s;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\n}\n}),xset,xset);\n});\n/**\n * Returns a rel of the elements of xrel with only the keys in ks\n */\nclojure.set.project = (function clojure$set$project(xrel,ks){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__17385_SHARP_){\nreturn cljs.core.select_keys(p1__17385_SHARP_,ks);\n}),xrel));\n});\n/**\n * Returns the map with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__17386){\nvar vec__17387 = p__17386;\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17387,(0),null);\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17387,(1),null);\nif(cljs.core.contains_QMARK_(map,old)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\n} else {\nreturn m;\n}\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\n});\n/**\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__17390_SHARP_){\nreturn clojure.set.rename_keys(p1__17390_SHARP_,kmap);\n}),xrel));\n});\n/**\n * Returns a map of the distinct values of ks in the xrel mapped to a\n *   set of the maps in xrel with the corresponding values of ks.\n */\nclojure.set.index = (function clojure$set$index(xrel,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\nvar ik = cljs.core.select_keys(x,ks);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\n});\n/**\n * Returns the map with the vals mapped to the keys.\n */\nclojure.set.map_invert = (function clojure$set$map_invert(m){\nreturn cljs.core.persistent_BANG_(cljs.core.reduce_kv((function (m__$1,k,v){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\n}),cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY),m));\n});\n/**\n * When passed 2 rels, returns the rel corresponding to the natural\n *   join. When passed an additional keymap, joins on the corresponding\n *   keys.\n */\nclojure.set.join = (function clojure$set$join(var_args){\nvar G__17410 = arguments.length;\nswitch (G__17410) {\ncase 2:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(clojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\nvar vec__17417 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17417,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17417,(1),null);\nvar idx = clojure.set.index(r,ks);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\nvar found = (function (){var G__17420 = cljs.core.select_keys(x,ks);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__17420) : idx.call(null,G__17420));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__17403_SHARP_,p2__17404_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17403_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__17404_SHARP_,x], 0)));\n}),ret,found);\n} else {\nreturn ret;\n}\n}),cljs.core.PersistentHashSet.EMPTY,s);\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n}));\n\n(clojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\nvar vec__17421 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17421,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17421,(1),null);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17421,(2),null);\nvar idx = clojure.set.index(r,cljs.core.vals(k));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\nvar found = (function (){var G__17424 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__17424) : idx.call(null,G__17424));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__17405_SHARP_,p2__17406_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17405_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__17406_SHARP_,x], 0)));\n}),ret,found);\n} else {\nreturn ret;\n}\n}),cljs.core.PersistentHashSet.EMPTY,s);\n}));\n\n(clojure.set.join.cljs$lang$maxFixedArity = 3);\n\n/**\n * Is set1 a subset of set2?\n */\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__17425_SHARP_){\nreturn cljs.core.contains_QMARK_(set2,p1__17425_SHARP_);\n}),set1)));\n});\n/**\n * Is set1 a superset of set2?\n */\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__17428_SHARP_){\nreturn cljs.core.contains_QMARK_(set1,p1__17428_SHARP_);\n}),set2)));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^12","~$goog","^13"],"~:seen",["^V",[]],"~:uses",null,"~:require-macros",["^ ","^12","^12"],"~:form",["~#list",["~$ns","^X"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^13","^12"]],"^[","^X","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1666857651341,"^Y",["^ ","^12","^12","^13","^13"],"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m]\n  (persistent!\n    (reduce-kv (fn [m k v] (assoc! m v k))\n      (transient {})\n      m)))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^V",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.set/bubble-max-key","k","coll","max","cljs.core.apply","cljs.core/max-key","cljs.core/cons","p1__17265#","cljs.core.remove","var_args","G__17337","clojure.set/union","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq17293","G__17294","cljs.core/first","cljs.core/next","G__17296","self__5754__auto__","s1","s2","cljs.core/count","cljs.core.reduce","cljs.core/conj","sets","bubbled-sets","cljs.core.conj","cljs.core/into","cljs.core/rest","G__17352","clojure.set/intersection","seq17343","G__17345","G__17346","result","item","cljs.core/contains?","cljs.core.disj","p1__17341#","G__17363","clojure.set/difference","seq17359","G__17360","G__17361","cljs.core/disj","clojure.set/select","pred","xset","s","clojure.set/project","xrel","ks","cljs.core/set","p1__17385#","cljs.core.map","cljs.core/select-keys","clojure.set/rename-keys","map","kmap","p__17386","vec__17387","cljs.core.nth","m","old","new","cljs.core.assoc","cljs.core.get","cljs.core/dissoc","cljs.core/keys","clojure.set/rename","p1__17390#","clojure.set/index","x","ik","clojure.set/map-invert","cljs.core/persistent!","cljs.core/reduce-kv","v","cljs.core.assoc_BANG_","cljs.core/transient","G__17410","clojure.set/join","js/Error","yrel","cljs.core/seq","vec__17417","clojure.set.intersection","r","idx","ret","found","G__17420","p1__17403#","p2__17404#","cljs.core.merge","km","vec__17421","cljs.core/vals","G__17424","p1__17405#","p2__17406#","clojure.set/subset?","set1","set2","p1__17425#","cljs.core/every?","clojure.set/superset?","p1__17428#"]],"~:used-vars",["^V",["~$cljs.core/rest","~$clojure.set/intersection","~$clojure.set/project","~$clojure.set/index","~$cljs.core/keys","~$clojure.set/bubble-max-key","~$cljs.core/IndexedSeq","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/dissoc","~$cljs.core/max-key","~$cljs.core/set","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/conj","~$cljs.core/map","~$clojure.set/rename-keys","~$cljs.core/vals","~$cljs.core/get","~$cljs.core/remove","~$clojure.set/difference","~$clojure.set/superset?","~$cljs.core/persistent!","~$cljs.core/nth","~$clojure.set/subset?","~$cljs.core/next","~$cljs.core/select-keys","~$cljs.core/transient","~$cljs.core/disj","~$cljs.core/cons","~$cljs.core/assoc","~$clojure.set/union","~$cljs.core/reduce-kv","~$clojure.set/rename","~$clojure.set/map-invert","~$cljs.core/first","~$cljs.core/assoc!","~$clojure.set/join","~$cljs.core/merge","~$cljs.core/every?","~$clojure.set/select","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^1>","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^V",[]],"~:deps-syms",["^13","~$goog.dom.HtmlElement"]]],["^1>","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1>","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2T"]]],["^1>","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2U"]]],["^1>","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2U"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^1>","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2U","~$goog.reflect"]]],["^1>","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2U","~$goog.fs.blob","^2V","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2X","^2Y","^2Z","^2["]]],["^1>","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2Z","~$goog.html.SafeUrl","^2[","^2U","^2T"]]],["^1>","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2U","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^33","~$goog.html.SafeStyle","^35","^2W","~$goog.html.uncheckedconversions","^2Z","^2T"]]],["^1>","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2Z","^2X","^2Y","^33","^39","~$goog.html.SafeStyleSheet","^35","~$goog.dom.TagName","^2W","^2[","^2U","~$goog.labs.userAgent.browser","^2Q","^2R","^2T","~$goog.dom.tags","^34"]]],["^1>","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2R"]]],["^1>","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1>","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2Q","^2U","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",[]]],["^1>","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2Q","^2R"]]],["^1>","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","~$goog.dom.safe","^3:","^2Z","^2T"]]],["^1>","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","~$goog.labs.userAgent","^2T"]]],["^1>","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2U","^38","^33","^39","^3;","^35","^2W","^2Z","^2T","^2X"]]],["^1>","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13"]]],["^1>","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","~$goog.math.Long","~$goog.math.Integer","^3B","^2R","^2Q","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1>","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2Z","^2[","^34","^2U"]]],["^1>","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2Z","^39","^2[","^2R","^2U","^2T"]]],["^1>","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^31"]]],["^1>","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^12"]]],["^1>","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2U","^3B"]]],["^1>","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2L",["^ ","^2M",null,"^2N",["^V",[]],"^2O",["^13","^2U","^2["]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q","^R","^S"],"^T",null,"^U",["^V",[]],"^W","^X","^Y",["^ "],"^10",null,"^11",["^ ","^12","^12","^13","^13"],"^14",["^V",[]],"~:shadow/js-access-global",["^V",["Error"]],"^15",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^18",["~$quote",["^18",[[],["~$s1"],["^4G","~$s2"],["^4G","^4H","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^4G"],["^4G","^4H"]],"^4E",["^18",[[],["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"~:arglists-meta",["^18",[null,null,null,null]]]],"^W","^2?","^6","clojure/set.cljs","^:",12,"^4J",["^ ","^4K",true,"^4L",2,"^4M",2,"^4N",[[],["^4G"],["^4G","^4H"]],"^4E",["^18",[[],["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^4O",["^18",[null,null,null,null]]],"^4N",[[],["^4G"],["^4G","^4H"]],"~:protocol-impl",null,"^4L",2,"^4O",["^18",[null,null,null,null]],"^8",1,"^4K",true,"~:methods",[["^ ","^4L",0,"^4K",false,"~:tag","~$cljs.core/ISet"],["^ ","^4L",1,"^4K",false],["^ ","^4L",2,"^4K",false,"^4R",["^V",[null,"~$any"]]],["^ ","^4L",2,"^4K",true,"^4R",["^V",[null,"^4T"]]]],"^7",19,"^9",19,"^4M",2,"~:fn-var",true,"^4E",["^18",[[],["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^4E",["^18",["^4F",["^18",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^W","^2B","^6","clojure/set.cljs","^:",17,"^4N",["^18",[["~$m"]]],"^4P",null,"^4O",["^18",[null,null]],"^8",1,"^4K",false,"^7",97,"~:ret-tag","~$clj","^9",97,"^4M",1,"^4U",true,"^4E",["^18",["^4F",["^18",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",105,"^8",7,"^9",105,"^:",11,"^4E",["^18",["^4F",["^18",[["~$xrel","~$yrel"],["^4Z","^4[","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^4J",["^ ","^4K",false,"^4L",3,"^4M",3,"^4N",[["^4Z","^4["],["^4Z","^4[","^50"]],"^4E",["^18",[["^4Z","^4["],["^4Z","^4[","^50"]]],"^4O",["^18",[null,null]]]],"^W","^2E","^6","clojure/set.cljs","^:",11,"^4J",["^ ","^4K",false,"^4L",3,"^4M",3,"^4N",[["^4Z","^4["],["^4Z","^4[","^50"]],"^4E",["^18",[["^4Z","^4["],["^4Z","^4[","^50"]]],"^4O",["^18",[null,null]]],"^4N",[["^4Z","^4["],["^4Z","^4[","^50"]],"^4P",null,"^4L",3,"^4O",["^18",[null,null]],"^8",1,"^4K",false,"^4Q",[["^ ","^4L",2,"^4K",false,"^4R",["^V",[null,"^4T","^4S"]]],["^ ","^4L",3,"^4K",false,"^4R",["^V",[null,"^4T"]]]],"^7",105,"^9",105,"^4M",3,"^4U",true,"^4E",["^18",[["^4Z","^4["],["^4Z","^4[","^50"]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^4E",["^18",["^4F",["^18",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^W","^2H","^6","clojure/set.cljs","^:",13,"^4N",["^18",[["^52","^53"]]],"^4P",null,"^4O",["^18",[null,null]],"^8",1,"^4K",false,"^7",61,"^4W",["^V",[null,"^4T"]],"^9",61,"^4M",2,"^4U",true,"^4E",["^18",["^4F",["^18",[["^52","^53"]]]]],"^;","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^4E",["^18",["^4F",["^18",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]]]],"^;","Return a set that is the intersection of the input sets","^4J",["^ ","^4K",true,"^4L",2,"^4M",2,"^4N",[["^4G"],["^4G","^4H"]],"^4E",["^18",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^4O",["^18",[null,null,null]]]],"^W","^1K","^6","clojure/set.cljs","^:",19,"^4J",["^ ","^4K",true,"^4L",2,"^4M",2,"^4N",[["^4G"],["^4G","^4H"]],"^4E",["^18",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^4O",["^18",[null,null,null]]],"^4N",[["^4G"],["^4G","^4H"]],"^4P",null,"^4L",2,"^4O",["^18",[null,null,null]],"^8",1,"^4K",true,"^4Q",[["^ ","^4L",1,"^4K",false],["^ ","^4L",2,"^4K",false,"^4R",["^V",[null,"^4T"]]],["^ ","^4L",2,"^4K",true,"^4R",["^V",[null,"^4T"]]]],"^7",31,"^9",31,"^4M",2,"^4U",true,"^4E",["^18",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",141,"^8",7,"^9",141,"^:",16,"^4E",["^18",["^4F",["^18",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^W","^25","^6","clojure/set.cljs","^:",16,"^4N",["^18",[["^56","^57"]]],"^4P",null,"^4O",["^18",[null,null]],"^8",1,"^4K",false,"^7",141,"^4W","~$boolean","^9",141,"^4M",2,"^4U",true,"^4E",["^18",["^4F",["^18",[["^56","^57"]]]]],"^;","Is set1 a superset of set2?"],"~$index",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^4E",["^18",["^4F",["^18",[["^4Z","~$ks"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^W","^1M","^6","clojure/set.cljs","^:",12,"^4N",["^18",[["^4Z","^5:"]]],"^4P",null,"^4O",["^18",[null,null]],"^8",1,"^4K",false,"^7",87,"^4W",["^V",[null,"^4T"]],"^9",87,"^4M",2,"^4U",true,"^4E",["^18",["^4F",["^18",[["^4Z","^5:"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^4E",["^18",["^4F",["^18",[["~$k","~$coll"]]]]]],"^5<",true,"^W","^1O","^6","clojure/set.cljs","^:",22,"^4N",["^18",[["~$k","^5="]]],"^4P",null,"^4O",["^18",[null,null]],"^8",1,"^4K",false,"^7",13,"^4W","^4X","^9",13,"^4M",2,"^4U",true,"^4E",["^18",["^4F",["^18",[["~$k","^5="]]]]]],"~$subset?",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",135,"^8",7,"^9",135,"^:",14,"^4E",["^18",["^4F",["^18",[["^56","^57"]]]]],"^;","Is set1 a subset of set2?"],"^W","^28","^6","clojure/set.cljs","^:",14,"^4N",["^18",[["^56","^57"]]],"^4P",null,"^4O",["^18",[null,null]],"^8",1,"^4K",false,"^7",135,"^4W","^58","^9",135,"^4M",2,"^4U",true,"^4E",["^18",["^4F",["^18",[["^56","^57"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^4E",["^18",["^4F",["^18",[["^4Z","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^W","^2A","^6","clojure/set.cljs","^:",13,"^4N",["^18",[["^4Z","^5@"]]],"^4P",null,"^4O",["^18",[null,null]],"^8",1,"^4K",false,"^7",82,"^4W",["^V",["^4X","^4T","^4S","~$cljs.core/MetaFn","~$clj-nil"]],"^9",82,"^4M",2,"^4U",true,"^4E",["^18",["^4F",["^18",[["^4Z","^5@"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^4E",["^18",["^4F",["^18",[["~$map","^5@"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^W","^20","^6","clojure/set.cljs","^:",18,"^4N",["^18",[["^5D","^5@"]]],"^4P",null,"^4O",["^18",[null,null]],"^8",1,"^4K",false,"^7",72,"^4W",["^V",[null,"^4T"]],"^9",72,"^4M",2,"^4U",true,"^4E",["^18",["^4F",["^18",[["^5D","^5@"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^4E",["^18",["^4F",["^18",[["^4Z","^5:"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^W","^1L","^6","clojure/set.cljs","^:",14,"^4N",["^18",[["^4Z","^5:"]]],"^4P",null,"^4O",["^18",[null,null]],"^8",1,"^4K",false,"^7",67,"^4W",["^V",["^4X","^4T","^4S","^5A","^5B"]],"^9",67,"^4M",2,"^4U",true,"^4E",["^18",["^4F",["^18",[["^4Z","^5:"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^4E",["^18",["^4F",["^18",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^4J",["^ ","^4K",true,"^4L",2,"^4M",2,"^4N",[["^4G"],["^4G","^4H"]],"^4E",["^18",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^4O",["^18",[null,null,null]]]],"^W","^24","^6","clojure/set.cljs","^:",17,"^4J",["^ ","^4K",true,"^4L",2,"^4M",2,"^4N",[["^4G"],["^4G","^4H"]],"^4E",["^18",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^4O",["^18",[null,null,null]]],"^4N",[["^4G"],["^4G","^4H"]],"^4P",null,"^4L",2,"^4O",["^18",[null,null,null]],"^8",1,"^4K",true,"^4Q",[["^ ","^4L",1,"^4K",false],["^ ","^4L",2,"^4K",false,"^4R",["^V",[null,"^4T"]]],["^ ","^4L",2,"^4K",true,"^4R",["^V",[null,"^4T"]]]],"^7",46,"^9",46,"^4M",2,"^4U",true,"^4E",["^18",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^16",["^ ","^12","^12"],"^1:",["^ "],"^1;",["^ "],"^1<",["^13","^12"]],"^[","^X","~:ns-specs",["^ "],"~:ns-spec-vars",["^V",[]],"~:compiler-options",["^2K",[["^5I","~:static-fns"],true,["^5I","~:shadow-tweaks"],null,["^5I","~:source-map-inline"],null,["^5I","~:elide-asserts"],false,["^5I","~:optimize-constants"],null,["^5I","^1A"],null,["^5I","~:external-config"],null,["^5I","~:tooling-config"],null,["^5I","~:emit-constants"],null,["^5I","~:load-tests"],null,["^5I","~:form-size-threshold"],null,["^5I","~:global-goog-object&array"],null,["^5I","~:data-readers"],null,["^5I","~:infer-externs"],"~:auto",["^5I","^1C"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5I","~:fn-invoke-direct"],null,["^5I","~:source-map"],"/dev/null"]]]