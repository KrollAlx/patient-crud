["^ ","~:output",["^ ","~:js","goog.provide('day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core');\n/**\n * Queue `event` for processing (handling).\n * \n *   `event` is a vector and the first element is typically a keyword\n *   which identifies the kind of event.\n * \n *   The event will be added to a FIFO processing queue, so event\n *   handling does not happen immediately. It will happen 'very soon'\n *   bit not now. And if the queue already contains events, they\n *   will be processed first.\n * \n *   Usage:\n * \n *    #!clj\n *    (dispatch [:order \"pizza\" {:supreme 2 :meatlovers 1 :veg 1}])\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.dispatch = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$dispatch(event){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.router.dispatch(event);\n});\n/**\n * Synchronously (immediately) process `event`. It does **not** queue\n *   the event for handling later as `dispatch` does.\n * \n *   `event` is a vector and the first element is typically a keyword\n *   which identifies the kind of event.\n * \n *   It is an error to use `dispatch-sync` within an event handler because\n *   you can't immediately process an new event when one is already\n *   part way through being processed.\n * \n *   Generally, avoid using this function, and instead, use `dispatch`.\n *   Only use it in the narrow set of cases where any delay in\n *   processing is a problem:\n * \n *  1. the `:on-change` handler of a text field where we are expecting fast typing\n *  2. when initialising your app - see 'main' in examples/todomvc/src/core.cljs\n *  3. in a unit test where immediate, synchronous processing is useful\n * \n *   Usage:\n * \n *    #!clj\n *    (dispatch-sync [:sing :falsetto \"piano accordion\"])\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.dispatch_sync = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$dispatch_sync(event){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.router.dispatch_sync(event);\n});\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain:\n * \n *  - `id` is typically a namespaced keyword  (but can be anything)\n *  - `handler` is a function: (db event) -> db\n *  - `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n * \n *   Example Usage:\n * \n *    #!clj\n *    (reg-event-db\n *      :token\n *      (fn [db event]\n *        (assoc db :some-key (get event 2)))  ;; return updated db\n * \n *   Or perhaps:\n * \n *    #!clj\n *    (reg-event-db\n *      :namespaced/id           ;; <-- namespaced keywords are often used\n *      [one two three]          ;; <-- a seq of interceptors\n *      (fn [db [_ arg1 arg2]]   ;; <-- event vector is destructured\n *        (-> db\n *          (dissoc arg1)\n *          (update :key + arg2))))   ;; return updated db\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$reg_event_db(var_args){\nvar G__24432 = arguments.length;\nswitch (G__24432) {\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.events.register(id,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.inject_db,day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.fx.do_fx,day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.inject_global_interceptors,interceptors,day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.db_handler__GT_interceptor(handler)], null));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db.cljs$lang$maxFixedArity = 3);\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain:\n * \n *  - `id` is typically a namespaced keyword  (but can be anything)\n *  - `handler` is a function: (coeffects-map event-vector) -> effects-map\n *  - `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n * \n * \n *   Example Usage:\n * \n *    #!clj\n *    (reg-event-fx\n *      :event-id\n *      (fn [cofx event]\n *        {:db (assoc (:db cofx) :some-key (get event 2))}))   ;; return a map of effects\n * \n * \n *   Or perhaps:\n * \n *    #!clj\n *    (reg-event-fx\n *      :namespaced/id           ;; <-- namespaced keywords are often used\n *      [one two three]          ;; <-- a seq of interceptors\n *      (fn [{:keys [db] :as cofx} [_ arg1 arg2]] ;; destructure both arguments\n *        {:db       (assoc db :some-key arg1)          ;; return a map of effects\n *         :dispatch [:some-event arg2]}))\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$reg_event_fx(var_args){\nvar G__24435 = arguments.length;\nswitch (G__24435) {\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.events.register(id,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.inject_db,day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.fx.do_fx,day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.inject_global_interceptors,interceptors,day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.fx_handler__GT_interceptor(handler)], null));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx.cljs$lang$maxFixedArity = 3);\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain:\n * \n *  - `id` is typically a namespaced keyword  (but can be anything)\n *  - `handler` is a function: context-map -> context-map\n * \n *   You can explore what is provided in `context` [here](https://day8.github.io/re-frame/Interceptors/#what-is-context).\n * \n *   Example Usage:\n * \n *    #!clj\n *    (reg-event-ctx\n *      :event-id\n *      (fn [{:keys [coeffects] :as context}]\n *        (let [initial  {:db     (:db coeffects)\n *                        :event  (:event coeffects)\n *                        :fx     []}\n *              result   (-> initial\n *                         function1\n *                         function2\n *                         function3)\n *              effects  (selectkeys result [:db :fx])]\n *           (assoc context :effects effects))))\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_ctx = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$reg_event_ctx(var_args){\nvar G__24437 = arguments.length;\nswitch (G__24437) {\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.events.register(id,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.inject_db,day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.fx.do_fx,day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.inject_global_interceptors,interceptors,day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.ctx_handler__GT_interceptor(handler)], null));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_ctx.cljs$lang$maxFixedArity = 3);\n\n/**\n * Unregisters event handlers (presumably registered previously via the use of `reg-event-db` or `reg-event-fx`).\n * \n *   When called with no args, it will unregister all currently registered event handlers.\n * \n *   When given one arg, assumed to be the `id` of a previously registered\n *   event handler, it will unregister the associated handler. Will produce a warning to\n *   console if it finds no matching registration.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_event = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$clear_event(var_args){\nvar G__24439 = arguments.length;\nswitch (G__24439) {\ncase 0:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_event.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_event.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_event.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.events.kind);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_event.cljs$core$IFn$_invoke$arity$1 = (function (id){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.events.kind,id);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_event.cljs$lang$maxFixedArity = 1);\n\n/**\n * A call to `reg-sub` associates a `query-id` WITH two functions.\n * \n *   The two functions provide 'a mechanism' for creating a node\n *   in the Signal Graph. When a node of type `query-id` is needed,\n *   the two functions can be used to create it.\n * \n *   The three arguments are:\n * \n *   - `query-id` - typically a namespaced keyword (later used in subscribe)\n *   - optionally, an `input signals` function which returns the input data\n *  flows required by this kind of node.\n *   - a `computation function` which computes the value (output) of the\n *  node (from the input data flows)\n * \n *   Later, during app execution, a call to `(subscribe [:sub-id 3 :blue])`,\n *   will trigger the need for a new `:sub-id` Signal Graph node (matching the\n *   query `[:sub-id 3 :blue]`). And, to create that node the two functions\n *   associated with `:sub-id` will be looked up and used.\n * \n *   Just to be clear: calling `reg-sub` does not immediately create a node.\n *   It only registers 'a mechanism' (the two functions) by which nodes\n *   can be created later, when a node is bought into existence by the\n *   use of `subscribe` in a `View Function`.\n * \n *   The `computation function` is expected to take two arguments:\n * \n *  - `input-values` - the values which flow into this node (how is it wierd into the graph?)\n *  - `query-vector` - the vector given to `subscribe`\n * \n *   and it returns a computed value (which then becomes the output of the node)\n * \n *   When `computation function` is called, the 2nd `query-vector` argument will be that\n *   vector supplied to the `subscribe`. So, if the call was `(subscribe [:sub-id 3 :blue])`,\n *   then the `query-vector` supplied to the computaton function will be `[:sub-id 3 :blue]`.\n * \n *   The argument(s) supplied to `reg-sub` between `query-id` and the `computation-function`\n *   can vary in 3 ways, but whatever is there defines the `input signals` part\n *   of `the mechanism`, specifying what input values \"flow into\" the\n *   `computation function` (as the 1st argument) when it is called.\n * \n *   So, `reg-sub` can be called in one of three ways, because there are three ways\n *   to define the input signals part. But note, the 2nd method, in which a\n *   `signals function` is explicitly supplied, is the most canonical and\n *   instructive. The other two are really just sugary variations.\n * \n *   **First variation** - no input signal function given:\n * \n *    #!clj\n *    (reg-sub\n *      :query-id\n *      a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n * \n *   In the absence of an explicit `signals function`, the node's input signal defaults to `app-db`\n *   and, as a result, the value within `app-db` (a map) is\n *   is given as the 1st argument when `a-computation-fn` is called.\n * \n * \n *   **Second variation** - a signal function is explicitly supplied:\n * \n *    #!clj\n *    (reg-sub\n *      :query-id\n *      signal-fn     ;; <-- here\n *      computation-fn)\n * \n *   This is the most canonical and instructive of the three variations.\n * \n *   When a node is created from the template, the `signal function` will be called and it\n *   is expected to return the input signal(s) as either a singleton, if there is only\n *   one, or a sequence if there are many, or a map with the signals as the values.\n * \n *   The current values of the returned signals will be supplied as the 1st argument to\n *   the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns,\n *   this value will be either a singleton, sequence or map of them (paralleling\n *   the structure returned by the `signal function`).\n * \n *   This example `signal function` returns a 2-vector of input signals.\n * \n *    #!clj\n *    (fn [query-vec dynamic-vec]\n *       [(subscribe [:a-sub])\n *        (subscribe [:b-sub])])\n * \n *   The associated computation function must be written\n *   to expect a 2-vector of values for its first argument:\n * \n *    #!clj\n *    (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n *      ....)\n * \n *   If, on the other hand, the signal function was simpler and returned a singleton, like this:\n * \n *    #!clj\n *   (fn [query-vec dynamic-vec]\n *     (subscribe [:a-sub]))      ;; <-- returning a singleton\n * \n *   then the associated computation function must be written to expect a single value\n *   as the 1st argument:\n * \n *    #!clj\n *    (fn [a query-vec]       ;; 1st argument is a single value\n *       ...)\n * \n *   Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n * \n *    #!clj\n *    (reg-sub\n *      :query-id\n *      a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n * \n *   is the equivalent of using this\n *   2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n * \n *    #!clj\n *    (reg-sub\n *      :query-id\n *      (fn [_ _]  re-frame/app-db)   ;; <--- explicit signal-fn\n *      a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n * \n *   **Third variation** - syntax Sugar\n * \n *    #!clj\n *    (reg-sub\n *      :a-b-sub\n *      :<- [:a-sub]\n *      :<- [:b-sub]\n *      (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n *        {:a a :b b}))\n * \n *   This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n *   `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n * \n *   If you supply only one pair a singleton will be supplied to the computation function,\n *   as if you had supplied a `signal-fn` returning only a single value:\n * \n *    #!clj\n *    (reg-sub\n *      :a-sub\n *      :<- [:a-sub]\n *      (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n *        ...))\n * \n *   For further understanding, read the tutorials, and look at the detailed comments in\n *   /examples/todomvc/src/subs.cljs.\n * \n *   See also: `subscribe`\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$reg_sub(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___24554 = arguments.length;\nvar i__5770__auto___24555 = (0);\nwhile(true){\nif((i__5770__auto___24555 < len__5769__auto___24554)){\nargs__5775__auto__.push((arguments[i__5770__auto___24555]));\n\nvar G__24556 = (i__5770__auto___24555 + (1));\ni__5770__auto___24555 = G__24556;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub.cljs$core$IFn$_invoke$arity$variadic = (function (query_id,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.subs.reg_sub,cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_id], null),args));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub.cljs$lang$applyTo = (function (seq24442){\nvar G__24443 = cljs.core.first(seq24442);\nvar seq24442__$1 = cljs.core.next(seq24442);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24443,seq24442__$1);\n}));\n\n/**\n * Given a `query` vector, returns a Reagent `reaction` which will, over\n *   time, reactively deliver a stream of values. So, in FRP-ish terms,\n *   it returns a `Signal`.\n * \n *   To obtain the current value from the Signal, it must be dereferenced:\n * \n *    #!clj\n *    (let [signal (subscribe [:items])\n *          value  (deref signal)]     ;; could be written as @signal\n *      ...)\n * \n * which is typically written tersely as simple:\n * \n *    #!clj\n *    (let [items  @(subscribe [:items])]\n *      ...)\n * \n * \n *   `query` is a vector of at least one element. The first element is the\n *   `query-id`, typically a namespaced keyword. The rest of the vector's\n *   elements are optional, additional values which parameterise the query\n *   performed.\n * \n *   `dynv` is an optional 3rd argument, which is a vector of further input\n *   signals (atoms, reactions, etc), NOT values. This argument exists for\n *   historical reasons and is borderline deprecated these days.\n * \n *   **Example Usage**:\n * \n *    #!clj\n *    (subscribe [:items])\n *    (subscribe [:items \"blue\" :small])\n *    (subscribe [:items {:colour \"blue\"  :size :small}])\n * \n *   Note: for any given call to `subscribe` there must have been a previous call\n *   to `reg-sub`, registering the query handler (functions) associated with\n *   `query-id`.\n * \n *   **Hint**\n * \n *   When used in a view function BE SURE to `deref` the returned value.\n *   In fact, to avoid any mistakes, some prefer to define:\n * \n *    #!clj\n *    (def <sub  (comp deref day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/subscribe))\n * \n *   And then, within their views, they call  `(<sub [:items :small])` rather\n *   than using `subscribe` directly.\n * \n *   **De-duplication**\n * \n *   Two, or more, concurrent subscriptions for the same query will\n *   source reactive updates from the one executing handler.\n * \n *   See also: `reg-sub`\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$subscribe(var_args){\nvar G__24449 = arguments.length;\nswitch (G__24449) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1 = (function (query){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(query);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$2 = (function (query,dynv){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2(query,dynv);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe.cljs$lang$maxFixedArity = 2);\n\n/**\n * Unregisters subscription handlers (presumably registered previously via the use of `reg-sub`).\n * \n *   When called with no args, it will unregister all currently registered subscription handlers.\n * \n *   When given one arg, assumed to be the `id` of a previously registered\n *   subscription handler, it will unregister the associated handler. Will produce a warning to\n *   console if it finds no matching registration.\n * \n *   NOTE: Depending on the usecase, it may be necessary to call `clear-subscription-cache!` afterwards\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_sub = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$clear_sub(var_args){\nvar G__24451 = arguments.length;\nswitch (G__24451) {\ncase 0:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_sub.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_sub.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_sub.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.subs.kind);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_sub.cljs$core$IFn$_invoke$arity$1 = (function (query_id){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.subs.kind,query_id);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_sub.cljs$lang$maxFixedArity = 1);\n\n/**\n * This is a low level, advanced function.  You should probably be\n *   using `reg-sub` instead.\n * \n *   Some explanation is available in the docs at\n *   <a href=\"http://day8.github.io/re-frame/flow-mechanics/\" target=\"_blank\">http://day8.github.io/re-frame/flow-mechanics/</a>\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub_raw = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$reg_sub_raw(query_id,handler_fn){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.register_handler(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.subs.kind,query_id,handler_fn);\n});\n/**\n * Removes all subscriptions from the cache.\n * \n *   This function can be used at development time or test time. Useful when hot realoding\n *   namespaces containing subscription handlers. Also call it after a React/render exception,\n *   because React components won't have been cleaned up properly. And this, in turn, means\n *   the subscriptions within those components won't have been cleaned up correctly. So this\n *   forces the issue.\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_subscription_cache_BANG_ = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$clear_subscription_cache_BANG_(){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.subs.clear_subscription_cache_BANG_();\n});\n/**\n * Register the given effect `handler` for the given `id`:\n * \n *  - `id` is keyword, often namespaced.\n *  - `handler` is a side-effecting function which takes a single argument and whose return\n *    value is ignored.\n * \n *   To use, first, associate `:effect2` with a handler:\n * \n *    #!clj\n *    (reg-fx\n *       :effect2\n *       (fn [value]\n *          ... do something side-effect-y))\n * \n *   Then, later, if an event handler were to return this effects map:\n * \n *    #!clj\n *    {:effect2  [1 2]}\n * \n *   then the `handler` `fn` we registered previously, using `reg-fx`, will be\n *   called with an argument of `[1 2]`.\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_fx = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$reg_fx(id,handler){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.fx.reg_fx(id,handler);\n});\n/**\n * Unregisters effect handlers (presumably registered previously via the use of `reg-fx`).\n * \n *   When called with no args, it will unregister all currently registered effect handlers.\n * \n *   When given one arg, assumed to be the `id` of a previously registered\n *   effect handler, it will unregister the associated handler. Will produce a warning to\n *   console if it finds no matching registration.\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_fx = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$clear_fx(var_args){\nvar G__24453 = arguments.length;\nswitch (G__24453) {\ncase 0:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_fx.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_fx.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_fx.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.fx.kind);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_fx.cljs$core$IFn$_invoke$arity$1 = (function (id){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.fx.kind,id);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_fx.cljs$lang$maxFixedArity = 1);\n\n/**\n * Register the given coeffect `handler` for the given `id`, for later use\n *   within `inject-cofx`:\n * \n *  - `id` is keyword, often namespaced.\n *  - `handler` is a function which takes either one or two arguements, the first of which is\n *     always `coeffects` and which returns an updated `coeffects`.\n * \n *   See also: `inject-cofx`\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_cofx = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$reg_cofx(id,handler){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.reg_cofx(id,handler);\n});\n/**\n * Given an `id`, and an optional, arbitrary `value`, returns an interceptor\n *   whose `:before` adds to the `:coeffects` (map) by calling a pre-registered\n *   'coeffect handler' identified by the `id`.\n * \n *   The previous association of a `coeffect handler` with an `id` will have\n *   happened via a call to `day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-cofx` - generally on program startup.\n * \n *   Within the created interceptor, this 'looked up' `coeffect handler` will\n *   be called (within the `:before`) with two arguments:\n * \n *   - the current value of `:coeffects`\n *   - optionally, the originally supplied arbitrary `value`\n * \n *   This `coeffect handler` is expected to modify and return its first, `coeffects` argument.\n * \n *   **Example of `inject-cofx` and `reg-cofx` working together**\n * \n * \n *   First - Early in app startup, you register a `coeffect handler` for `:datetime`:\n * \n *    #!clj\n *    (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-cofx\n *      :datetime                        ;; usage  (inject-cofx :datetime)\n *      (fn coeffect-handler\n *        [coeffect]\n *        (assoc coeffect :now (js/Date.))))   ;; modify and return first arg\n * \n *   Second - Later, add an interceptor to an -fx event handler, using `inject-cofx`:\n * \n *    #!clj\n *    (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-fx            ;; when registering an event handler\n *      :event-id\n *      [ ... (inject-cofx :datetime) ... ]  ;; <-- create an injecting interceptor\n *      (fn event-handler\n *        [coeffect event]\n *          ;;... in here can access (:now coeffect) to obtain current datetime ...\n *        )))\n * \n *   **Background**\n * \n *   `coeffects` are the input resources required by an event handler\n *   to perform its job. The two most obvious ones are `db` and `event`.\n *   But sometimes an event handler might need other resources.\n * \n *   Perhaps an event handler needs a random number or a GUID or the current\n *   datetime. Perhaps it needs access to a DataScript database connection.\n * \n *   If an event handler directly accesses these resources, it stops being\n *   pure and, consequently, it becomes harder to test, etc. So we don't\n *   want that.\n * \n *   Instead, the interceptor created by this function is a way to 'inject'\n *   'necessary resources' into the `:coeffects` (map) subsequently given\n *   to the event handler at call time.\n * \n *   See also `reg-cofx`\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.inject_cofx = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$inject_cofx(var_args){\nvar G__24459 = arguments.length;\nswitch (G__24459) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.inject_cofx.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.inject_cofx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.inject_cofx.cljs$core$IFn$_invoke$arity$1 = (function (id){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.inject_cofx.cljs$core$IFn$_invoke$arity$1(id);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.inject_cofx.cljs$core$IFn$_invoke$arity$2 = (function (id,value){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.inject_cofx.cljs$core$IFn$_invoke$arity$2(id,value);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.inject_cofx.cljs$lang$maxFixedArity = 2);\n\n/**\n * Unregisters coeffect handlers (presumably registered previously via the use of `reg-cofx`).\n * \n *   When called with no args, it will unregister all currently registered coeffect handlers.\n * \n *   When given one arg, assumed to be the `id` of a previously registered\n *   coeffect handler, it will unregister the associated handler. Will produce a warning to\n *   console if it finds no matching registration.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_cofx = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$clear_cofx(var_args){\nvar G__24461 = arguments.length;\nswitch (G__24461) {\ncase 0:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_cofx.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_cofx.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_cofx.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.kind);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_cofx.cljs$core$IFn$_invoke$arity$1 = (function (id){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.kind,id);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_cofx.cljs$lang$maxFixedArity = 1);\n\n/**\n * An interceptor which logs/instruments an event handler's actions to\n *   `js/console.debug`. See examples/todomvc/src/events.cljs for use.\n * \n *   Output includes:\n * \n *  1. the event vector\n *  2. a `clojure.data/diff` of db, before vs after, which shows\n *     the changes caused by the event handler. To understand the output,\n *     you should understand:\n *     <a href=\"https://clojuredocs.org/clojure.data/diff\" target=\"_blank\">https://clojuredocs.org/clojure.data/diff</a>.\n * \n *   You'd typically include this interceptor after (to the right of) any\n *   `path` interceptor.\n * \n *   Warning:  calling `clojure.data/diff` on large, complex data structures\n *   can be slow. So, you won't want this interceptor present in production\n *   code. So, you should condition it out like this:\n * \n *    #!clj\n *    (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-db\n *      :evt-id\n *      [(when ^boolean goog.DEBUG day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/debug)]  ;; <-- conditional\n *      (fn [db v]\n *         ...))\n * \n *   To make this code fragment work, you'll also have to set `goog.DEBUG` to\n *   `false` in your production builds. For an example, look in `project.clj` of /examples/todomvc.\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.debug = day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.debug;\n/**\n * Returns an interceptor which acts somewhat like `clojure.core/update-in`, in the sense that\n *   the event handler is given a specific part of `app-db` to change, not all of `app-db`.\n * \n *   The interceptor has both a `:before` and `:after` functions. The `:before` replaces\n *   the `:db` key within coeffects with a sub-path within `app-db`. The `:after` reverses the process,\n *   and it grafts the handler's return value back into db, at the right path.\n * \n *   Examples:\n * \n *    #!clj\n *    (path :some :path)\n *    (path [:some :path])\n *    (path [:some :path] :to :here)\n *    (path [:some :path] [:to] :here)\n * \n *   Example Use:\n * \n *    #!clj\n *    (reg-event-db\n *      :event-id\n *      (path [:a :b])  ;; <-- used here, in interceptor chain\n *      (fn [b v]       ;; 1st arg is not db. Is the value from path [:a :b] within db\n *        ... new-b))   ;; returns a new value for that path (not the entire db)\n * \n *   Notes:\n * \n *  1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n *  2. if `:effects` contains no `:db` effect, can't graft a value back in.\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$path(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___24571 = arguments.length;\nvar i__5770__auto___24572 = (0);\nwhile(true){\nif((i__5770__auto___24572 < len__5769__auto___24571)){\nargs__5775__auto__.push((arguments[i__5770__auto___24572]));\n\nvar G__24573 = (i__5770__auto___24572 + (1));\ni__5770__auto___24572 = G__24573;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.path,args);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path.cljs$lang$applyTo = (function (seq24463){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq24463));\n}));\n\n/**\n * Returns an Interceptor which will run the given function `f` in the `:after`\n *   position.\n * \n *   `f` is called with two arguments: `db` and `v`, and is expected to\n *   return a modified `db`.\n * \n *   Unlike the `after` interceptor which is only about side effects, `enrich`\n *   expects `f` to process and alter the given `db` coeffect in some useful way,\n *   contributing to the derived data, flowing vibe.\n * \n *   #### Example Use:\n * \n *   Imagine that todomvc needed to do duplicate detection - if any two todos had\n *   the same text, then highlight their background, and report them via a warning\n *   at the bottom of the panel.\n * \n *   Almost any user action (edit text, add new todo, remove a todo) requires a\n *   complete reassessment of duplication errors and warnings. Eg: that edit\n *   just made might have introduced a new duplicate, or removed one. Same with\n *   any todo removal. So we need to re-calculate warnings after any CRUD events\n *   associated with the todos list.\n * \n *   Unless we are careful, we might end up coding subtly different checks\n *   for each kind of CRUD operation.  The duplicates check made after\n *   'delete todo' event might be subtly different to that done after an\n *   editing operation. Nice and efficient, but fiddly. A bug generator\n *   approach.\n * \n *   So, instead, we create an `f` which recalculates ALL warnings from scratch\n *   every time there is ANY change. It will inspect all the todos, and\n *   reset ALL FLAGS every time (overwriting what was there previously)\n *   and fully recalculate the list of duplicates (displayed at the bottom?).\n * \n *   <a href=\"https://twitter.com/nathanmarz/status/879722740776939520\" target=\"_blank\">https://twitter.com/nathanmarz/status/879722740776939520</a>\n * \n *   By applying `f` in an `:enrich` interceptor, after every CRUD event,\n *   we keep the handlers simple and yet we ensure this important step\n *   (of getting warnings right) is not missed on any change.\n * \n *   We can test `f` easily - it is a pure function - independently of\n *   any CRUD operation.\n * \n *   This brings huge simplicity at the expense of some re-computation\n *   each time. This may be a very satisfactory trade-off in many cases.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.enrich = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$enrich(f){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.enrich(f);\n});\n/**\n * > New in v1.2.0\n * \n * An interceptor which decreases the amount of destructuring necessary in an\n * event handler where the event is structured as a 2-vector of\n * [event-id payload-map].\n * \n * It promotes the `payload-map` part to be the event ultimately given to the\n * event handler. Should you want the full original event, it can be found in\n * `coeffects` under the key `:original-event`.\n * \n * If a dispatch looked like this:\n * \n *    #!clj\n *     (dispatch [:event-id {:x 1 :y 2 :z 3}])\n * \n * Your event handlers can look like this:\n * \n *    #!clj\n *     (reg-event-fx\n *       :event-id\n *       [... unwrap ...]                    ;; <-- added to the interceptors\n *       (fn [{:keys [db]} {:keys [x y z]}]  ;; <-- instead of [_ {:keys [x y z]}]\n *         ...)\n * \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.unwrap = day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.unwrap;\n/**\n * An interceptor which removes the first element of the event vector,\n *   before it is supplied to the event handler, allowing you to write more\n * aesthetically pleasing event handlers. No leading underscore on the event-v!\n * \n *   Should you want the full original event, it can be found in `coeffects` under\n *   the key `:original-event`.\n * \n *   Your event handlers will look like this:\n * \n *    #!clj\n *    (reg-event-db\n *      :event-id\n *      [... trim-v ...]    ;; <-- added to the interceptors\n *      (fn [db [x y z]]    ;; <-- instead of [_ x y z]\n *        ...)\n *  \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.trim_v = day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.trim_v;\n/**\n * Returns an interceptor which runs the given function `f` in the `:after`\n *   position, presumably for side effects.\n * \n *   `f` is called with two arguments: the `:effects` value for `:db`\n *   (or the `:coeffect` value of `:db` if no `:db` effect is returned) and the event.\n *   Its return value is ignored, so `f` can only side-effect.\n * \n *   An example of use can be seen in the re-frame github repo in `/examples/todomvc/events.cljs`:\n * \n *   - `f` runs schema validation (reporting any errors found).\n *   - `f` writes to localstorage.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.after = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$after(f){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.after(f);\n});\n/**\n * Returns an interceptor which will observe N paths within `db`, and if any of them\n *   test not `identical?` to their previous value  (as a result of a event handler\n *   being run), then it will run `f` to compute a new value, which is then assoc-ed\n *   into the given `out-path` within `db`.\n * \n *   Example Usage:\n * \n *    #!clj\n *    (defn my-f\n *      [a-val b-val]\n *      ... some computation on a and b in here)\n * \n *    ;; use it\n *    (def my-interceptor (on-changes my-f [:c] [:a] [:b]))\n * \n *    (reg-event-db\n *      :event-id\n *      [... my-interceptor ...]  ;; <-- ultimately used here\n *      (fn [db v]\n *         ...))\n * \n * \n *   If you put this Interceptor on handlers which might change paths `:a` or `:b`,\n *   it will:\n * \n *  - call `f` each time the value at path `[:a]` or `[:b]` changes\n *  - call `f` with the values extracted from `[:a]` `[:b]`\n *  - assoc the return value from `f` into the path  `[:c]`\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.on_changes = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$on_changes(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___24577 = arguments.length;\nvar i__5770__auto___24578 = (0);\nwhile(true){\nif((i__5770__auto___24578 < len__5769__auto___24577)){\nargs__5775__auto__.push((arguments[i__5770__auto___24578]));\n\nvar G__24579 = (i__5770__auto___24578 + (1));\ni__5770__auto___24578 = G__24579;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.std_interceptors.on_changes,cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f,out_path], null),in_paths));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.on_changes.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.on_changes.cljs$lang$applyTo = (function (seq24465){\nvar G__24466 = cljs.core.first(seq24465);\nvar seq24465__$1 = cljs.core.next(seq24465);\nvar G__24467 = cljs.core.first(seq24465__$1);\nvar seq24465__$2 = cljs.core.next(seq24465__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24466,G__24467,seq24465__$2);\n}));\n\n/**\n * Registers the given `interceptor` as a global interceptor. Global interceptors are\n * included in the processing chain of every event.\n * \n * When you register an event handler, you have the option of supplying an\n * interceptor chain. Any global interceptors you register are effectively\n * prepending to this chain.\n * \n * Global interceptors are run in the order that they are registered.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_global_interceptor = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$reg_global_interceptor(interceptor){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.settings.reg_global_interceptor(interceptor);\n});\n/**\n * Unregisters global interceptors (presumably registered previously via the use of `reg-global-interceptor`).\n * \n *   When called with no args, it will unregister all currently registered global interceptors.\n * \n *   When given one arg, assumed to be the `id` of a previously registered\n *   global interceptors, it will unregister the associated interceptor. Will produce a warning to\n *   console if it finds no matching registration.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_global_interceptor = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$clear_global_interceptor(var_args){\nvar G__24477 = arguments.length;\nswitch (G__24477) {\ncase 0:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_global_interceptor.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_global_interceptor.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_global_interceptor.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.settings.clear_global_interceptors.cljs$core$IFn$_invoke$arity$0();\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_global_interceptor.cljs$core$IFn$_invoke$arity$1 = (function (id){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.settings.clear_global_interceptors.cljs$core$IFn$_invoke$arity$1(id);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.clear_global_interceptor.cljs$lang$maxFixedArity = 1);\n\n/**\n * A utility function for creating interceptors.\n * \n *   Accepts three optional, named arguments:\n * \n *   - `:id` - an id for the interceptor (decorative only)\n *   - `:before` - the interceptor's before function\n *   - `:after`  - the interceptor's after function\n * \n *   Example use:\n * \n *    #!clj\n *    (def my-interceptor\n *      (->interceptor\n *       :id     :my-interceptor\n *       :before (fn [context]\n *                 ... modifies and returns `context`)\n *       :after  (fn [context]\n *                 ... modifies and returns `context`)))\n * \n *   Notes:\n * \n *  - `:before` functions modify and return their `context` argument. Sometimes they\n *    only side effect, in which case, they'll perform the side effect and return\n *    `context` unchanged.\n *  - `:before` functions often modify the `:coeffects` map within `context` and,\n *    if they do, then they should use the utility functions `get-coeffect` and\n *    `assoc-coeffect`.\n *  - `:after` functions modify and return their `context` argument. Sometimes they\n *    only side effect, in which case, they'll perform the side effect and return\n *    `context` unchanged.\n *  - `:after` functions often modify the `:effects` map within `context` and,\n *    if they do, then they should use the utility functions `get-effect`\n *    and `assoc-effect`\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.__GT_interceptor = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$__GT_interceptor(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___24582 = arguments.length;\nvar i__5770__auto___24583 = (0);\nwhile(true){\nif((i__5770__auto___24583 < len__5769__auto___24582)){\nargs__5775__auto__.push((arguments[i__5770__auto___24583]));\n\nvar G__24584 = (i__5770__auto___24583 + (1));\ni__5770__auto___24583 = G__24584;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__24486){\nvar map__24487 = p__24486;\nvar map__24487__$1 = cljs.core.__destructure_map(map__24487);\nvar m = map__24487__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24487__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24487__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24487__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.utils.apply_kw.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.__GT_interceptor,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([m], 0));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.__GT_interceptor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.__GT_interceptor.cljs$lang$applyTo = (function (seq24480){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq24480));\n}));\n\n/**\n * A utility function, typically used when writing an interceptor's `:before` function.\n * \n * When called with one argument, it returns the `:coeffects` map from with that `context`.\n * \n * When called with two or three arguments, behaves like `clojure.core/get` and\n * returns the value mapped to `key` in the `:coeffects` map within `context`, `not-found` or\n * `nil` if `key` is not present.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_coeffect = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$get_coeffect(var_args){\nvar G__24491 = arguments.length;\nswitch (G__24491) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,key);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3(context,key,not_found);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_coeffect.cljs$lang$maxFixedArity = 3);\n\n/**\n * A utility function, typically used when writing an interceptor's `:before` function.\n * \n * Adds or updates a key/value pair in the `:coeffects` map within `context`. \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.assoc_coeffect = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$assoc_coeffect(context,key,value){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.assoc_coeffect(context,key,value);\n});\n/**\n * A utility function, used when writing interceptors, typically within an `:after` function.\n * \n * When called with one argument, returns the `:effects` map from the `context`.\n * \n * When called with two or three arguments, behaves like `clojure.core/get` and\n * returns the value mapped to `key` in the effects map, `not-found` or\n * `nil` if `key` is not present.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_effect = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$get_effect(var_args){\nvar G__24503 = arguments.length;\nswitch (G__24503) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,key);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,key,not_found);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.get_effect.cljs$lang$maxFixedArity = 3);\n\n/**\n * A utility function, typically used when writing an interceptor's `:after` function.\n * \n * Adds or updates a key/value pair in the `:effects` map within `context`. \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.assoc_effect = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$assoc_effect(context,key,value){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.assoc_effect(context,key,value);\n});\n/**\n * A utility function, used when writing an interceptor's `:before` function.\n * \n *   Adds the given collection of `interceptors` to those already in `context's`\n *   execution `:queue`. It returns the updated `context`.\n * \n *   So, it provides a way for one Interceptor to add more interceptors to the\n *   currently executing interceptor chain.\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.enqueue = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$enqueue(context,interceptors){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.enqueue(context,interceptors);\n});\n/**\n * re-frame outputs warnings and errors via the API function `console`\n * which, by default, delegates to `js/console`'s default implementation for\n *   `log`, `error`, `warn`, `debug`, `group` and `groupEnd`. But, using this function,\n * you can override that behaviour with your own functions.\n * \n *   The argument `new-loggers` should be a map containing a subset of they keys\n *   for the standard `loggers`, namely  `:log` `:error` `:warn` `:debug` `:group`\n *   or `:groupEnd`.\n * \n *   Example Usage:\n * \n *    #!clj\n *    (defn my-logger      ;; my alternative logging function\n *      [& args]\n *      (post-it-somewhere (apply str args)))\n * \n *    ;; now install my alternative loggers\n *    (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/set-loggers!  {:warn my-logger :log my-logger})\n * \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.set_loggers_BANG_ = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$set_loggers_BANG_(new_loggers){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.set_loggers_BANG_(new_loggers);\n});\n/**\n * A utility logging function which is used internally within re-frame to produce\n *   warnings and other output. It can also be used by libraries which\n *   extend re-frame, such as effect handlers.\n * \n *   By default, it will output the given `args` to `js/console` at the given log `level`.\n *   However, an application using re-frame can redirect `console` output via `set-loggers!`.\n * \n *   `level` can be one of `:log`, `:error`, `:warn`, `:debug`, `:group` or `:groupEnd`.\n * \n *   Example usage:\n * \n *    #!clj\n *    (console :error \"Sure enough it happened:\" a-var \"and\" another)\n *    (console :warn \"Possible breach of containment wall at:\" dt)\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.console = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$console(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___24594 = arguments.length;\nvar i__5770__auto___24595 = (0);\nwhile(true){\nif((i__5770__auto___24595 < len__5769__auto___24594)){\nargs__5775__auto__.push((arguments[i__5770__auto___24595]));\n\nvar G__24596 = (i__5770__auto___24595 + (1));\ni__5770__auto___24595 = G__24596;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console,cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [level], null),args));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.console.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.console.cljs$lang$applyTo = (function (seq24515){\nvar G__24516 = cljs.core.first(seq24515);\nvar seq24515__$1 = cljs.core.next(seq24515);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24516,seq24515__$1);\n}));\n\n/**\n * This is a utility function, typically used in testing.\n * \n *   It checkpoints the current state of re-frame and returns a function which, when\n *   later called, will restore re-frame to the checkpointed state.\n * \n *   The checkpoint includes `app-db`, all registered handlers and all subscriptions.\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.make_restore_fn = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$make_restore_fn(){\nvar handlers = cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.kind__GT_id__GT_handler);\nvar app_db = cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.db.app_db);\nvar subs_cache = cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.subs.query__GT_reaction);\nreturn (function (){\nvar original_subs_24597 = cljs.core.set(cljs.core.vals(subs_cache));\nvar current_subs_24598 = cljs.core.set(cljs.core.vals(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.subs.query__GT_reaction)));\nvar seq__24521_24599 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(current_subs_24598,original_subs_24597));\nvar chunk__24522_24600 = null;\nvar count__24523_24601 = (0);\nvar i__24524_24602 = (0);\nwhile(true){\nif((i__24524_24602 < count__24523_24601)){\nvar sub_24603 = chunk__24522_24600.cljs$core$IIndexed$_nth$arity$2(null,i__24524_24602);\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interop.dispose_BANG_(sub_24603);\n\n\nvar G__24604 = seq__24521_24599;\nvar G__24605 = chunk__24522_24600;\nvar G__24606 = count__24523_24601;\nvar G__24607 = (i__24524_24602 + (1));\nseq__24521_24599 = G__24604;\nchunk__24522_24600 = G__24605;\ncount__24523_24601 = G__24606;\ni__24524_24602 = G__24607;\ncontinue;\n} else {\nvar temp__5804__auto___24608 = cljs.core.seq(seq__24521_24599);\nif(temp__5804__auto___24608){\nvar seq__24521_24609__$1 = temp__5804__auto___24608;\nif(cljs.core.chunked_seq_QMARK_(seq__24521_24609__$1)){\nvar c__5568__auto___24610 = cljs.core.chunk_first(seq__24521_24609__$1);\nvar G__24611 = cljs.core.chunk_rest(seq__24521_24609__$1);\nvar G__24612 = c__5568__auto___24610;\nvar G__24613 = cljs.core.count(c__5568__auto___24610);\nvar G__24614 = (0);\nseq__24521_24599 = G__24611;\nchunk__24522_24600 = G__24612;\ncount__24523_24601 = G__24613;\ni__24524_24602 = G__24614;\ncontinue;\n} else {\nvar sub_24615 = cljs.core.first(seq__24521_24609__$1);\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interop.dispose_BANG_(sub_24615);\n\n\nvar G__24616 = cljs.core.next(seq__24521_24609__$1);\nvar G__24617 = null;\nvar G__24618 = (0);\nvar G__24619 = (0);\nseq__24521_24599 = G__24616;\nchunk__24522_24600 = G__24617;\ncount__24523_24601 = G__24618;\ni__24524_24602 = G__24619;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\ncljs.core.reset_BANG_(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.kind__GT_id__GT_handler,handlers);\n\ncljs.core.reset_BANG_(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.db.app_db,app_db);\n\nreturn null;\n});\n});\n/**\n * Removes all events currently queued for processing\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.purge_event_queue = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$purge_event_queue(){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.router.event_queue.day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$router$IEventQueue$purge$arity$1(null);\n});\n/**\n * Registers the given function `f` to be called after each event is processed.\n * \n * `f` will be called with two arguments:\n * \n *  - `event`: a vector. The event just processed.\n *  - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n * \n * This facility is useful in advanced cases like:\n * \n *   - you are implementing a complex bootstrap pipeline\n *   - you want to create your own handling infrastructure, with perhaps multiple\n *     handlers for the one event, etc.  Hook in here.\n *   - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n * \n *   `id` is typically a keyword. If it supplied when an `f` is added, it can be\n *   subsequently be used to identify it for removal. See `remove-post-event-callback`.\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.add_post_event_callback = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$add_post_event_callback(var_args){\nvar G__24531 = arguments.length;\nswitch (G__24531) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2(f,f);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2 = (function (id,f){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.router.event_queue.day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$router$IEventQueue$add_post_event_callback$arity$3(null,id,f);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.add_post_event_callback.cljs$lang$maxFixedArity = 2);\n\n/**\n * Unregisters a post event callback function, identified by `id`.\n * \n *   Such a function must have been previously registered via `add-post-event-callback`\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.remove_post_event_callback = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$remove_post_event_callback(id){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.router.event_queue.day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$router$IEventQueue$remove_post_event_callback$arity$2(null,id);\n});\n/**\n * Deprecated. Use `reg-event-db` instead.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.register_handler = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$register_handler(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___24621 = arguments.length;\nvar i__5770__auto___24622 = (0);\nwhile(true){\nif((i__5770__auto___24622 < len__5769__auto___24621)){\nargs__5775__auto__.push((arguments[i__5770__auto___24622]));\n\nvar G__24623 = (i__5770__auto___24622 + (1));\ni__5770__auto___24622 = G__24623;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args)),\")\"], 0));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db,args);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.register_handler.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.register_handler.cljs$lang$applyTo = (function (seq24533){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq24533));\n}));\n\n/**\n * Deprecated. Use `reg-sub-raw` instead.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.register_sub = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$core$register_sub(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___24626 = arguments.length;\nvar i__5770__auto___24627 = (0);\nwhile(true){\nif((i__5770__auto___24627 < len__5769__auto___24626)){\nargs__5775__auto__.push((arguments[i__5770__auto___24627]));\n\nvar G__24628 = (i__5770__auto___24627 + (1));\ni__5770__auto___24627 = G__24628;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"register-sub\\\" is used to register the event \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args)),\" but it is a deprecated part of the API. Please use \\\"reg-sub-raw\\\" instead.\"], 0));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub_raw,args);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.register_sub.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.register_sub.cljs$lang$applyTo = (function (seq24540){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq24540));\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",65],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$subs","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs","~$set","~$clojure.set","~$cofx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx","~$fx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx","~$loggers","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events","^1:","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db","^1;","~$cljs.core","^1<","~$interceptor","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings","^1?","~$goog","^1@","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors","^1A","~$router","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router","~$db","^1;","~$registrar","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar","^19","^19","^15","^15","^13","^13","~$events","^1:","~$settings","^1?","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.utils","^1I","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop","^1J","~$interop","^1J","^1F","^1F","^1>","^1>","~$utils","^1I","~$std-interceptors","^1A","^1C","^1C","^11","^11","^17","^17"],"~:seen",["^T",["~:require"]],"~:uses",["^ ","~$db-handler->interceptor","^1A","~$fx-handler->interceptor","^1A","~$ctx-handler->interceptor","^1A"],"~:require-macros",["^ ","^1<","^1<"],"~:form",["~#list",["~$ns","^V",["^1V",["^1O",["^1:","~:as","^1G"],["^11","^1X","^10"],["^1J","^1X","^1K"],["^1;","^1X","^1D"],["^17","^1X","^16"],["^15","^1X","^14"],["^1C","^1X","^1B"],["^1?","^1X","^1H"],["^19","^1X","^18"],["^1F","^1X","^1E"],["^1>","^1X","^1="],["^1A","^1X","^1M","~:refer",["^1Q","^1R","^1S"]],["^1I","^1X","^1L"],["^13","^1X","^12"]]]]],"~:flags",["^ ","^1O",["^T",[]]],"~:js-deps",["^ "],"~:deps",["^1@","^1<","^1:","^11","^1J","^1;","^17","^15","^1C","^1?","^19","^1F","^1>","^1A","^1I","^13"]],"^Y","^V","~:resource-id",["~:shadow.build.classpath/resource","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc"],"~:compiled-at",1666857658707,"^W",["^ ","^10","^11","^12","^13","^14","^15","^16","^17","^18","^19","^1:","^1:","^1;","^1;","^1<","^1<","^1=","^1>","^1?","^1?","^1@","^1@","^1A","^1A","^1B","^1C","^1D","^1;","^1E","^1F","^19","^19","^15","^15","^13","^13","^1G","^1:","^1H","^1?","^1I","^1I","^1J","^1J","^1K","^1J","^1F","^1F","^1>","^1>","^1L","^1I","^1M","^1A","^1C","^1C","^11","^11","^17","^17"],"~:resource-name","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","~:warnings",[],"~:source","(ns day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events           :as events]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs             :as subs]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop          :as interop]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db               :as db]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx               :as fx]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx             :as cofx]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router           :as router]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings         :as settings]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers          :as loggers]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar        :as registrar]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor      :as interceptor]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                            fx-handler->interceptor\n                                                            ctx-handler->interceptor]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.utils            :as utils]\n    [clojure.set               :as set]))\n\n\n;; -- dispatch ----------------------------------------------------------------\n\n(defn dispatch\n  \"Queue `event` for processing (handling).\n\n  `event` is a vector and the first element is typically a keyword\n  which identifies the kind of event.\n\n  The event will be added to a FIFO processing queue, so event\n  handling does not happen immediately. It will happen 'very soon'\n  bit not now. And if the queue already contains events, they\n  will be processed first.\n\n  Usage:\n\n      #!clj\n      (dispatch [:order \\\"pizza\\\" {:supreme 2 :meatlovers 1 :veg 1}])\n  \"\n  {:api-docs/heading \"Dispatching Events\"}\n  [event]\n  (router/dispatch event))\n\n(defn dispatch-sync\n  \"Synchronously (immediately) process `event`. It does **not** queue\n  the event for handling later as `dispatch` does.\n\n  `event` is a vector and the first element is typically a keyword\n  which identifies the kind of event.\n\n  It is an error to use `dispatch-sync` within an event handler because\n  you can't immediately process an new event when one is already\n  part way through being processed.\n\n  Generally, avoid using this function, and instead, use `dispatch`.\n  Only use it in the narrow set of cases where any delay in\n  processing is a problem:\n\n    1. the `:on-change` handler of a text field where we are expecting fast typing\n    2. when initialising your app - see 'main' in examples/todomvc/src/core.cljs\n    3. in a unit test where immediate, synchronous processing is useful\n\n  Usage:\n\n      #!clj\n      (dispatch-sync [:sing :falsetto \\\"piano accordion\\\"])\n  \"\n  {:api-docs/heading \"Dispatching Events\"}\n  [event]\n  (router/dispatch-sync event))\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain:\n\n    - `id` is typically a namespaced keyword  (but can be anything)\n    - `handler` is a function: (db event) -> db\n    - `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n\n  Example Usage:\n\n      #!clj\n      (reg-event-db\n        :token\n        (fn [db event]\n          (assoc db :some-key (get event 2)))  ;; return updated db\n\n  Or perhaps:\n\n      #!clj\n      (reg-event-db\n        :namespaced/id           ;; <-- namespaced keywords are often used\n        [one two three]          ;; <-- a seq of interceptors\n        (fn [db [_ arg1 arg2]]   ;; <-- event vector is destructured\n          (-> db\n            (dissoc arg1)\n            (update :key + arg2))))   ;; return updated db\n  \"\n  {:api-docs/heading \"Event Handlers\"}\n  ([id handler]\n   (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx std-interceptors/inject-global-interceptors interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain:\n\n    - `id` is typically a namespaced keyword  (but can be anything)\n    - `handler` is a function: (coeffects-map event-vector) -> effects-map\n    - `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n\n\n  Example Usage:\n\n      #!clj\n      (reg-event-fx\n        :event-id\n        (fn [cofx event]\n          {:db (assoc (:db cofx) :some-key (get event 2))}))   ;; return a map of effects\n\n\n  Or perhaps:\n\n      #!clj\n      (reg-event-fx\n        :namespaced/id           ;; <-- namespaced keywords are often used\n        [one two three]          ;; <-- a seq of interceptors\n        (fn [{:keys [db] :as cofx} [_ arg1 arg2]] ;; destructure both arguments\n          {:db       (assoc db :some-key arg1)          ;; return a map of effects\n           :dispatch [:some-event arg2]}))\n  \"\n  {:api-docs/heading \"Event Handlers\"}\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx std-interceptors/inject-global-interceptors interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain:\n\n    - `id` is typically a namespaced keyword  (but can be anything)\n    - `handler` is a function: context-map -> context-map\n\n  You can explore what is provided in `context` [here](https://day8.github.io/re-frame/Interceptors/#what-is-context).\n\n  Example Usage:\n\n      #!clj\n      (reg-event-ctx\n        :event-id\n        (fn [{:keys [coeffects] :as context}]\n          (let [initial  {:db     (:db coeffects)\n                          :event  (:event coeffects)\n                          :fx     []}\n                result   (-> initial\n                           function1\n                           function2\n                           function3)\n                effects  (selectkeys result [:db :fx])]\n             (assoc context :effects effects))))\n  \"\n  {:api-docs/heading \"Event Handlers\"}\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx std-interceptors/inject-global-interceptors interceptors (ctx-handler->interceptor handler)])))\n\n(defn clear-event\n  \"Unregisters event handlers (presumably registered previously via the use of `reg-event-db` or `reg-event-fx`).\n\n  When called with no args, it will unregister all currently registered event handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  event handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration.\"\n  {:api-docs/heading \"Event Handlers\"}\n  ([]\n   (registrar/clear-handlers events/kind))\n  ([id]\n   (registrar/clear-handlers events/kind id)))\n\n\n;; -- subscriptions -----------------------------------------------------------\n\n(defn reg-sub\n  \"A call to `reg-sub` associates a `query-id` WITH two functions.\n\n  The two functions provide 'a mechanism' for creating a node\n  in the Signal Graph. When a node of type `query-id` is needed,\n  the two functions can be used to create it.\n\n  The three arguments are:\n\n  - `query-id` - typically a namespaced keyword (later used in subscribe)\n  - optionally, an `input signals` function which returns the input data\n    flows required by this kind of node.\n  - a `computation function` which computes the value (output) of the\n    node (from the input data flows)\n\n  Later, during app execution, a call to `(subscribe [:sub-id 3 :blue])`,\n  will trigger the need for a new `:sub-id` Signal Graph node (matching the\n  query `[:sub-id 3 :blue]`). And, to create that node the two functions\n  associated with `:sub-id` will be looked up and used.\n\n  Just to be clear: calling `reg-sub` does not immediately create a node.\n  It only registers 'a mechanism' (the two functions) by which nodes\n  can be created later, when a node is bought into existence by the\n  use of `subscribe` in a `View Function`.\n\n  The `computation function` is expected to take two arguments:\n\n    - `input-values` - the values which flow into this node (how is it wierd into the graph?)\n    - `query-vector` - the vector given to `subscribe`\n\n  and it returns a computed value (which then becomes the output of the node)\n\n  When `computation function` is called, the 2nd `query-vector` argument will be that\n  vector supplied to the `subscribe`. So, if the call was `(subscribe [:sub-id 3 :blue])`,\n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 :blue]`.\n\n  The argument(s) supplied to `reg-sub` between `query-id` and the `computation-function`\n  can vary in 3 ways, but whatever is there defines the `input signals` part\n  of `the mechanism`, specifying what input values \\\"flow into\\\" the\n  `computation function` (as the 1st argument) when it is called.\n\n  So, `reg-sub` can be called in one of three ways, because there are three ways\n  to define the input signals part. But note, the 2nd method, in which a\n  `signals function` is explicitly supplied, is the most canonical and\n  instructive. The other two are really just sugary variations.\n\n  **First variation** - no input signal function given:\n\n      #!clj\n      (reg-sub\n        :query-id\n        a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n\n     In the absence of an explicit `signals function`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.\n\n\n  **Second variation** - a signal function is explicitly supplied:\n\n      #!clj\n      (reg-sub\n        :query-id\n        signal-fn     ;; <-- here\n        computation-fn)\n\n  This is the most canonical and instructive of the three variations.\n\n  When a node is created from the template, the `signal function` will be called and it\n  is expected to return the input signal(s) as either a singleton, if there is only\n  one, or a sequence if there are many, or a map with the signals as the values.\n\n  The current values of the returned signals will be supplied as the 1st argument to\n  the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns,\n  this value will be either a singleton, sequence or map of them (paralleling\n  the structure returned by the `signal function`).\n\n  This example `signal function` returns a 2-vector of input signals.\n\n      #!clj\n      (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n\n  The associated computation function must be written\n  to expect a 2-vector of values for its first argument:\n\n      #!clj\n      (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n        ....)\n\n  If, on the other hand, the signal function was simpler and returned a singleton, like this:\n\n      #!clj\n     (fn [query-vec dynamic-vec]\n       (subscribe [:a-sub]))      ;; <-- returning a singleton\n\n  then the associated computation function must be written to expect a single value\n  as the 1st argument:\n\n      #!clj\n      (fn [a query-vec]       ;; 1st argument is a single value\n         ...)\n\n  Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n\n      #!clj\n      (reg-sub\n        :query-id\n        a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n\n  is the equivalent of using this\n  2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n\n      #!clj\n      (reg-sub\n        :query-id\n        (fn [_ _]  re-frame/app-db)   ;; <--- explicit signal-fn\n        a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n\n  **Third variation** - syntax Sugar\n\n      #!clj\n      (reg-sub\n        :a-b-sub\n        :<- [:a-sub]\n        :<- [:b-sub]\n        (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n          {:a a :b b}))\n\n  This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n  `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n  If you supply only one pair a singleton will be supplied to the computation function,\n  as if you had supplied a `signal-fn` returning only a single value:\n\n      #!clj\n      (reg-sub\n        :a-sub\n        :<- [:a-sub]\n        (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n          ...))\n\n  For further understanding, read the tutorials, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs.\n\n  See also: `subscribe`\n  \"\n  {:api-docs/heading \"Subscriptions\"}\n  [query-id & args]\n  (apply subs/reg-sub (into [query-id] args)))\n\n(defn subscribe\n  \"Given a `query` vector, returns a Reagent `reaction` which will, over\n  time, reactively deliver a stream of values. So, in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the current value from the Signal, it must be dereferenced:\n\n      #!clj\n      (let [signal (subscribe [:items])\n            value  (deref signal)]     ;; could be written as @signal\n        ...)\n\n   which is typically written tersely as simple:\n\n      #!clj\n      (let [items  @(subscribe [:items])]\n        ...)\n\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  **Example Usage**:\n\n      #!clj\n      (subscribe [:items])\n      (subscribe [:items \\\"blue\\\" :small])\n      (subscribe [:items {:colour \\\"blue\\\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (functions) associated with\n  `query-id`.\n\n  **Hint**\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n      #!clj\n      (def <sub  (comp deref day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  **De-duplication**\n\n  Two, or more, concurrent subscriptions for the same query will\n  source reactive updates from the one executing handler.\n\n  See also: `reg-sub`\n  \"\n  {:api-docs/heading \"Subscriptions\"}\n  ([query]\n   (subs/subscribe query))\n  ([query dynv]\n   (subs/subscribe query dynv)))\n\n(defn clear-sub ;; think unreg-sub\n  \"Unregisters subscription handlers (presumably registered previously via the use of `reg-sub`).\n\n  When called with no args, it will unregister all currently registered subscription handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  subscription handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration.\n\n  NOTE: Depending on the usecase, it may be necessary to call `clear-subscription-cache!` afterwards\"\n  {:api-docs/heading \"Subscriptions\"}\n  ([]\n   (registrar/clear-handlers subs/kind))\n  ([query-id]\n   (registrar/clear-handlers subs/kind query-id)))\n\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using `reg-sub` instead.\n\n  Some explanation is available in the docs at\n  <a href=\\\"http://day8.github.io/re-frame/flow-mechanics/\\\" target=\\\"_blank\\\">http://day8.github.io/re-frame/flow-mechanics/</a>\"\n  {:api-docs/heading \"Subscriptions\"}\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; XXX\n(defn clear-subscription-cache!\n  \"Removes all subscriptions from the cache.\n\n  This function can be used at development time or test time. Useful when hot realoding\n  namespaces containing subscription handlers. Also call it after a React/render exception,\n  because React components won't have been cleaned up properly. And this, in turn, means\n  the subscriptions within those components won't have been cleaned up correctly. So this\n  forces the issue.\n  \"\n  {:api-docs/heading \"Subscriptions\"}\n  []\n  (subs/clear-subscription-cache!))\n\n;; -- effects -----------------------------------------------------------------\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`:\n\n    - `id` is keyword, often namespaced.\n    - `handler` is a side-effecting function which takes a single argument and whose return\n      value is ignored.\n\n  To use, first, associate `:effect2` with a handler:\n\n      #!clj\n      (reg-fx\n         :effect2\n         (fn [value]\n            ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map:\n\n      #!clj\n      {:effect2  [1 2]}\n\n  then the `handler` `fn` we registered previously, using `reg-fx`, will be\n  called with an argument of `[1 2]`.\n  \"\n  {:api-docs/heading \"Effect Handlers\"}\n  [id handler]\n  (fx/reg-fx id handler))\n\n\n(defn clear-fx ;; think unreg-fx\n  \"Unregisters effect handlers (presumably registered previously via the use of `reg-fx`).\n\n  When called with no args, it will unregister all currently registered effect handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  effect handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration.\n  \"\n  {:api-docs/heading \"Effect Handlers\"}\n  ([]\n   (registrar/clear-handlers fx/kind))\n  ([id]\n   (registrar/clear-handlers fx/kind id)))\n\n;; -- coeffects ---------------------------------------------------------------\n\n(defn reg-cofx\n  \"Register the given coeffect `handler` for the given `id`, for later use\n  within `inject-cofx`:\n\n    - `id` is keyword, often namespaced.\n    - `handler` is a function which takes either one or two arguements, the first of which is\n       always `coeffects` and which returns an updated `coeffects`.\n\n  See also: `inject-cofx`\n  \"\n  {:api-docs/heading \"Coeffects\"}\n  [id handler]\n  (cofx/reg-cofx id handler))\n\n(defn inject-cofx\n  \"Given an `id`, and an optional, arbitrary `value`, returns an interceptor\n  whose `:before` adds to the `:coeffects` (map) by calling a pre-registered\n  'coeffect handler' identified by the `id`.\n\n  The previous association of a `coeffect handler` with an `id` will have\n  happened via a call to `day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-cofx` - generally on program startup.\n\n  Within the created interceptor, this 'looked up' `coeffect handler` will\n  be called (within the `:before`) with two arguments:\n\n  - the current value of `:coeffects`\n  - optionally, the originally supplied arbitrary `value`\n\n  This `coeffect handler` is expected to modify and return its first, `coeffects` argument.\n\n  **Example of `inject-cofx` and `reg-cofx` working together**\n\n\n  First - Early in app startup, you register a `coeffect handler` for `:datetime`:\n\n      #!clj\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-cofx\n        :datetime                        ;; usage  (inject-cofx :datetime)\n        (fn coeffect-handler\n          [coeffect]\n          (assoc coeffect :now (js/Date.))))   ;; modify and return first arg\n\n  Second - Later, add an interceptor to an -fx event handler, using `inject-cofx`:\n\n      #!clj\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-fx            ;; when registering an event handler\n        :event-id\n        [ ... (inject-cofx :datetime) ... ]  ;; <-- create an injecting interceptor\n        (fn event-handler\n          [coeffect event]\n            ;;... in here can access (:now coeffect) to obtain current datetime ...\n          )))\n\n  **Background**\n\n  `coeffects` are the input resources required by an event handler\n  to perform its job. The two most obvious ones are `db` and `event`.\n  But sometimes an event handler might need other resources.\n\n  Perhaps an event handler needs a random number or a GUID or the current\n  datetime. Perhaps it needs access to a DataScript database connection.\n\n  If an event handler directly accesses these resources, it stops being\n  pure and, consequently, it becomes harder to test, etc. So we don't\n  want that.\n\n  Instead, the interceptor created by this function is a way to 'inject'\n  'necessary resources' into the `:coeffects` (map) subsequently given\n  to the event handler at call time.\n\n  See also `reg-cofx`\n  \"\n  {:api-docs/heading \"Coeffects\"}\n  ([id]\n   (cofx/inject-cofx id))\n  ([id value]\n   (cofx/inject-cofx id value)))\n\n(defn clear-cofx ;; think unreg-cofx\n  \"Unregisters coeffect handlers (presumably registered previously via the use of `reg-cofx`).\n\n  When called with no args, it will unregister all currently registered coeffect handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  coeffect handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration.\"\n  {:api-docs/heading \"Coeffects\"}\n  ([]\n   (registrar/clear-handlers cofx/kind))\n  ([id]\n   (registrar/clear-handlers cofx/kind id)))\n\n\n;; -- interceptors ------------------------------------------------------------\n\n(def ^{:api-docs/heading \"Interceptors\"} debug\n  \"An interceptor which logs/instruments an event handler's actions to\n  `js/console.debug`. See examples/todomvc/src/events.cljs for use.\n\n  Output includes:\n\n    1. the event vector\n    2. a `clojure.data/diff` of db, before vs after, which shows\n       the changes caused by the event handler. To understand the output,\n       you should understand:\n       <a href=\\\"https://clojuredocs.org/clojure.data/diff\\\" target=\\\"_blank\\\">https://clojuredocs.org/clojure.data/diff</a>.\n\n  You'd typically include this interceptor after (to the right of) any\n  `path` interceptor.\n\n  Warning:  calling `clojure.data/diff` on large, complex data structures\n  can be slow. So, you won't want this interceptor present in production\n  code. So, you should condition it out like this:\n\n      #!clj\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-db\n        :evt-id\n        [(when ^boolean goog.DEBUG day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/debug)]  ;; <-- conditional\n        (fn [db v]\n           ...))\n\n  To make this code fragment work, you'll also have to set `goog.DEBUG` to\n  `false` in your production builds. For an example, look in `project.clj` of /examples/todomvc.\n  \"\n  std-interceptors/debug)\n\n(defn path\n  \"Returns an interceptor which acts somewhat like `clojure.core/update-in`, in the sense that\n  the event handler is given a specific part of `app-db` to change, not all of `app-db`.\n\n  The interceptor has both a `:before` and `:after` functions. The `:before` replaces\n  the `:db` key within coeffects with a sub-path within `app-db`. The `:after` reverses the process,\n  and it grafts the handler's return value back into db, at the right path.\n\n  Examples:\n\n      #!clj\n      (path :some :path)\n      (path [:some :path])\n      (path [:some :path] :to :here)\n      (path [:some :path] [:to] :here)\n\n  Example Use:\n\n      #!clj\n      (reg-event-db\n        :event-id\n        (path [:a :b])  ;; <-- used here, in interceptor chain\n        (fn [b v]       ;; 1st arg is not db. Is the value from path [:a :b] within db\n          ... new-b))   ;; returns a new value for that path (not the entire db)\n\n  Notes:\n\n    1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n    2. if `:effects` contains no `:db` effect, can't graft a value back in.\n  \"\n  {:api-docs/heading \"Interceptors\"}\n  [& args]\n  (apply std-interceptors/path args))\n\n(defn enrich\n  \"Returns an Interceptor which will run the given function `f` in the `:after`\n  position.\n\n  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` interceptor which is only about side effects, `enrich`\n  expects `f` to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  #### Example Use:\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them via a warning\n  at the bottom of the panel.\n\n  Almost any user action (edit text, add new todo, remove a todo) requires a\n  complete reassessment of duplication errors and warnings. Eg: that edit\n  just made might have introduced a new duplicate, or removed one. Same with\n  any todo removal. So we need to re-calculate warnings after any CRUD events\n  associated with the todos list.\n\n  Unless we are careful, we might end up coding subtly different checks\n  for each kind of CRUD operation.  The duplicates check made after\n  'delete todo' event might be subtly different to that done after an\n  editing operation. Nice and efficient, but fiddly. A bug generator\n  approach.\n\n  So, instead, we create an `f` which recalculates ALL warnings from scratch\n  every time there is ANY change. It will inspect all the todos, and\n  reset ALL FLAGS every time (overwriting what was there previously)\n  and fully recalculate the list of duplicates (displayed at the bottom?).\n\n  <a href=\\\"https://twitter.com/nathanmarz/status/879722740776939520\\\" target=\\\"_blank\\\">https://twitter.com/nathanmarz/status/879722740776939520</a>\n\n  By applying `f` in an `:enrich` interceptor, after every CRUD event,\n  we keep the handlers simple and yet we ensure this important step\n  (of getting warnings right) is not missed on any change.\n\n  We can test `f` easily - it is a pure function - independently of\n  any CRUD operation.\n\n  This brings huge simplicity at the expense of some re-computation\n  each time. This may be a very satisfactory trade-off in many cases.\"\n  {:api-docs/heading \"Interceptors\"}\n  [f]\n  (std-interceptors/enrich f))\n\n(def ^{:api-docs/heading \"Interceptors\"} unwrap\n  \"> New in v1.2.0\n\n   An interceptor which decreases the amount of destructuring necessary in an\n   event handler where the event is structured as a 2-vector of\n   [event-id payload-map].\n\n   It promotes the `payload-map` part to be the event ultimately given to the\n   event handler. Should you want the full original event, it can be found in\n   `coeffects` under the key `:original-event`.\n\n   If a dispatch looked like this:\n\n      #!clj\n       (dispatch [:event-id {:x 1 :y 2 :z 3}])\n\n   Your event handlers can look like this:\n\n      #!clj\n       (reg-event-fx\n         :event-id\n         [... unwrap ...]                    ;; <-- added to the interceptors\n         (fn [{:keys [db]} {:keys [x y z]}]  ;; <-- instead of [_ {:keys [x y z]}]\n           ...)\n   \"\n   std-interceptors/unwrap)\n\n(def ^{:api-docs/heading \"Interceptors\"} trim-v\n  \"An interceptor which removes the first element of the event vector,\n  before it is supplied to the event handler, allowing you to write more\n   aesthetically pleasing event handlers. No leading underscore on the event-v!\n\n  Should you want the full original event, it can be found in `coeffects` under\n  the key `:original-event`.\n\n  Your event handlers will look like this:\n\n      #!clj\n      (reg-event-db\n        :event-id\n        [... trim-v ...]    ;; <-- added to the interceptors\n        (fn [db [x y z]]    ;; <-- instead of [_ x y z]\n          ...)\n    \"\n  std-interceptors/trim-v)\n\n(defn after\n  \"Returns an interceptor which runs the given function `f` in the `:after`\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `:effects` value for `:db`\n  (or the `:coeffect` value of `:db` if no `:db` effect is returned) and the event.\n  Its return value is ignored, so `f` can only side-effect.\n\n  An example of use can be seen in the re-frame github repo in `/examples/todomvc/events.cljs`:\n\n     - `f` runs schema validation (reporting any errors found).\n     - `f` writes to localstorage.\"\n  {:api-docs/heading \"Interceptors\"}\n  [f]\n  (std-interceptors/after f))\n\n(defn on-changes\n  \"Returns an interceptor which will observe N paths within `db`, and if any of them\n  test not `identical?` to their previous value  (as a result of a event handler\n  being run), then it will run `f` to compute a new value, which is then assoc-ed\n  into the given `out-path` within `db`.\n\n  Example Usage:\n\n      #!clj\n      (defn my-f\n        [a-val b-val]\n        ... some computation on a and b in here)\n\n      ;; use it\n      (def my-interceptor (on-changes my-f [:c] [:a] [:b]))\n\n      (reg-event-db\n        :event-id\n        [... my-interceptor ...]  ;; <-- ultimately used here\n        (fn [db v]\n           ...))\n\n\n  If you put this Interceptor on handlers which might change paths `:a` or `:b`,\n  it will:\n\n    - call `f` each time the value at path `[:a]` or `[:b]` changes\n    - call `f` with the values extracted from `[:a]` `[:b]`\n    - assoc the return value from `f` into the path  `[:c]`\n  \"\n  {:api-docs/heading \"Interceptors\"}\n  [f out-path & in-paths]\n  (apply std-interceptors/on-changes (into [f out-path] in-paths)))\n\n\n(defn reg-global-interceptor\n  \"Registers the given `interceptor` as a global interceptor. Global interceptors are\n   included in the processing chain of every event.\n\n   When you register an event handler, you have the option of supplying an\n   interceptor chain. Any global interceptors you register are effectively\n   prepending to this chain.\n\n   Global interceptors are run in the order that they are registered.\"\n  {:api-docs/heading \"Global Interceptors\"}\n  [interceptor]\n  (settings/reg-global-interceptor interceptor))\n\n(defn clear-global-interceptor\n  \"Unregisters global interceptors (presumably registered previously via the use of `reg-global-interceptor`).\n\n  When called with no args, it will unregister all currently registered global interceptors.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  global interceptors, it will unregister the associated interceptor. Will produce a warning to\n  console if it finds no matching registration.\"\n  {:api-docs/heading \"Global Interceptors\"}\n  ([]\n   (settings/clear-global-interceptors))\n  ([id]\n   (settings/clear-global-interceptors id)))\n\n\n(defn ->interceptor\n  \"A utility function for creating interceptors.\n\n  Accepts three optional, named arguments:\n\n     - `:id` - an id for the interceptor (decorative only)\n     - `:before` - the interceptor's before function\n     - `:after`  - the interceptor's after function\n\n  Example use:\n\n      #!clj\n      (def my-interceptor\n        (->interceptor\n         :id     :my-interceptor\n         :before (fn [context]\n                   ... modifies and returns `context`)\n         :after  (fn [context]\n                   ... modifies and returns `context`)))\n\n  Notes:\n\n    - `:before` functions modify and return their `context` argument. Sometimes they\n      only side effect, in which case, they'll perform the side effect and return\n      `context` unchanged.\n    - `:before` functions often modify the `:coeffects` map within `context` and,\n      if they do, then they should use the utility functions `get-coeffect` and\n      `assoc-coeffect`.\n    - `:after` functions modify and return their `context` argument. Sometimes they\n      only side effect, in which case, they'll perform the side effect and return\n      `context` unchanged.\n    - `:after` functions often modify the `:effects` map within `context` and,\n      if they do, then they should use the utility functions `get-effect`\n      and `assoc-effect`\"\n  {:api-docs/heading \"Writing Interceptors\"}\n  [& {:as m :keys [id before after]}]\n  (utils/apply-kw interceptor/->interceptor m))\n\n(defn get-coeffect\n  \"A utility function, typically used when writing an interceptor's `:before` function.\n\n   When called with one argument, it returns the `:coeffects` map from with that `context`.\n\n   When called with two or three arguments, behaves like `clojure.core/get` and\n   returns the value mapped to `key` in the `:coeffects` map within `context`, `not-found` or\n   `nil` if `key` is not present.\"\n  {:api-docs/heading \"Writing Interceptors\"}\n  ([context]\n   (interceptor/get-coeffect context))\n  ([context key]\n   (interceptor/get-coeffect context key))\n  ([context key not-found]\n   (interceptor/get-coeffect context key not-found)))\n\n(defn assoc-coeffect\n  \"A utility function, typically used when writing an interceptor's `:before` function.\n\n   Adds or updates a key/value pair in the `:coeffects` map within `context`. \"\n  {:api-docs/heading \"Writing Interceptors\"}\n  [context key value]\n  (interceptor/assoc-coeffect context key value))\n\n(defn get-effect\n  \"A utility function, used when writing interceptors, typically within an `:after` function.\n\n   When called with one argument, returns the `:effects` map from the `context`.\n\n   When called with two or three arguments, behaves like `clojure.core/get` and\n   returns the value mapped to `key` in the effects map, `not-found` or\n   `nil` if `key` is not present.\"\n  {:api-docs/heading \"Writing Interceptors\"}\n  ([context]\n   (interceptor/get-effect context))\n  ([context key]\n   (interceptor/get-effect context key))\n  ([context key not-found]\n   (interceptor/get-effect context key not-found)))\n\n(defn assoc-effect\n   \"A utility function, typically used when writing an interceptor's `:after` function.\n\n   Adds or updates a key/value pair in the `:effects` map within `context`. \"\n  {:api-docs/heading \"Writing Interceptors\"}\n  [context key value]\n  (interceptor/assoc-effect context key value))\n\n(defn enqueue\n  \"A utility function, used when writing an interceptor's `:before` function.\n\n  Adds the given collection of `interceptors` to those already in `context's`\n  execution `:queue`. It returns the updated `context`.\n\n  So, it provides a way for one Interceptor to add more interceptors to the\n  currently executing interceptor chain.\n  \"\n  {:api-docs/heading \"Writing Interceptors\"}\n  [context interceptors]\n  (interceptor/enqueue context interceptors))\n\n\n;; --  logging ----------------------------------------------------------------\n\n(defn set-loggers!\n  \"re-frame outputs warnings and errors via the API function `console`\n   which, by default, delegates to `js/console`'s default implementation for\n  `log`, `error`, `warn`, `debug`, `group` and `groupEnd`. But, using this function,\n   you can override that behaviour with your own functions.\n\n  The argument `new-loggers` should be a map containing a subset of they keys\n  for the standard `loggers`, namely  `:log` `:error` `:warn` `:debug` `:group`\n  or `:groupEnd`.\n\n  Example Usage:\n\n      #!clj\n      (defn my-logger      ;; my alternative logging function\n        [& args]\n        (post-it-somewhere (apply str args)))\n\n      ;; now install my alternative loggers\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/set-loggers!  {:warn my-logger :log my-logger})\n   \"\n  {:api-docs/heading \"Logging\"}\n  [new-loggers]\n  (loggers/set-loggers! new-loggers))\n\n\n(defn console\n  \"A utility logging function which is used internally within re-frame to produce\n  warnings and other output. It can also be used by libraries which\n  extend re-frame, such as effect handlers.\n\n  By default, it will output the given `args` to `js/console` at the given log `level`.\n  However, an application using re-frame can redirect `console` output via `set-loggers!`.\n\n  `level` can be one of `:log`, `:error`, `:warn`, `:debug`, `:group` or `:groupEnd`.\n\n  Example usage:\n\n      #!clj\n      (console :error \\\"Sure enough it happened:\\\" a-var \\\"and\\\" another)\n      (console :warn \\\"Possible breach of containment wall at:\\\" dt)\n  \"\n  {:api-docs/heading \"Logging\"}\n  [level & args]\n  (apply loggers/console (into [level] args)))\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"This is a utility function, typically used in testing.\n\n  It checkpoints the current state of re-frame and returns a function which, when\n  later called, will restore re-frame to the checkpointed state.\n\n  The checkpoint includes `app-db`, all registered handlers and all subscriptions.\n  \"\n  {:api-docs/heading \"Miscellaneous\"}\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n        subs-cache @subs/query->reaction]\n    (fn []\n      ;; call `dispose!` on all current subscriptions which\n      ;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Removes all events currently queued for processing\"\n  {:api-docs/heading \"Miscellaneous\"}\n  []\n  (router/purge day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/event-queue))\n\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers the given function `f` to be called after each event is processed.\n\n   `f` will be called with two arguments:\n\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This facility is useful in advanced cases like:\n\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  `id` is typically a keyword. If it supplied when an `f` is added, it can be\n  subsequently be used to identify it for removal. See `remove-post-event-callback`.\n  \"\n  {:api-docs/heading \"Miscellaneous\"}\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  \"Unregisters a post event callback function, identified by `id`.\n\n  Such a function must have been previously registered via `add-post-event-callback`\"\n  {:api-docs/heading \"Miscellaneous\"}\n  [id]\n  (router/remove-post-event-callback day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  \"Deprecated. Use `reg-event-db` instead.\"\n  {:deprecated \"0.8.0\"\n   :api-docs/heading \"Deprecated\"}\n  [& args]\n  (console :warn  \"re-frame: \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of \" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  \"Deprecated. Use `reg-sub-raw` instead.\"\n  {:deprecated \"0.8.0\"\n   :api-docs/heading \"Deprecated\"}\n  [& args]\n  (console :warn  \"re-frame: \\\"register-sub\\\" is used to register the event \" (str (first args)) \" but it is a deprecated part of the API. Please use \\\"reg-sub-raw\\\" instead.\")\n  (apply reg-sub-raw args))\n","~:reader-features",["^T",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","event","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/dispatch","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch-sync","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/dispatch-sync","var_args","G__24432","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-db","js/Error","id","handler","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","interceptors","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/register","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/inject-db","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx/do-fx","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/inject-global-interceptors","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/db-handler->interceptor","G__24435","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-fx","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/fx-handler->interceptor","G__24437","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-ctx","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_ctx","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/ctx-handler->interceptor","G__24439","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-event","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.clear_handlers","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/kind","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-sub","seq24442","G__24443","cljs.core/first","cljs.core/next","self__5754__auto__","query-id","args","cljs.core.apply","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs/reg-sub","cljs.core.into","G__24449","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/subscribe","query","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.subs.subscribe","dynv","G__24451","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-sub","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs/kind","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-sub-raw","handler-fn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/register-handler","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-subscription-cache!","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs/clear-subscription-cache!","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-fx","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx/reg-fx","G__24453","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-fx","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx/kind","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-cofx","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/reg-cofx","G__24459","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/inject-cofx","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.inject_cofx","value","G__24461","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-cofx","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/kind","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/debug","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/debug","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/path","seq24463","self__5755__auto__","cljs.core/seq","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/path","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/enrich","f","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/enrich","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/unwrap","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/unwrap","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/trim-v","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/trim-v","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/after","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/after","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/on-changes","seq24465","G__24466","G__24467","out-path","in-paths","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/on-changes","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-global-interceptor","interceptor","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/reg-global-interceptor","G__24477","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-global-interceptor","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.settings.clear_global_interceptors","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/->interceptor","p__24486","map__24487","cljs.core/--destructure-map","cljs.core.get","seq24480","m","before","after","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.utils.apply_kw","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/->interceptor","G__24491","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/get-coeffect","context","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect","key","not-found","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/assoc-coeffect","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/assoc-coeffect","G__24503","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/get-effect","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/assoc-effect","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/assoc-effect","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/enqueue","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/enqueue","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/set-loggers!","new-loggers","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers/set-loggers!","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/console","seq24515","G__24516","level","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers/console","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/make-restore-fn","cljs.core/deref","handlers","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/kind->id->handler","app-db","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db","subs-cache","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs/query->reaction","original-subs","cljs.core/set","cljs.core/vals","current-subs","seq__24521","chunk__24522","count__24523","i__24524","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","sub","clojure.set.difference","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/dispose!","cljs.core/reset!","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/purge-event-queue","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/event-queue","G__24531","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/add-post-event-callback","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.add_post_event_callback","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/remove-post-event-callback","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/register-handler","seq24533","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.console","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/register-sub","seq24540"]],"~:used-vars",["^T",["~$cljs.core/--destructure-map","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/inject-cofx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/dispatch","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/trim-v","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/kind","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/fx-handler->interceptor","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/enqueue","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/debug","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs/reg-sub","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/after","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/add-post-event-callback","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/dispatch-sync","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/->interceptor","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/set-loggers!","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-fx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/inject-cofx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/get-coeffect","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/kind","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs/subscribe","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/assoc-effect","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/inject-global-interceptors","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/event-queue","~$cljs.core/IndexedSeq","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-global-interceptor","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/inject-db","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-cofx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-ctx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/ctx-handler->interceptor","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-cofx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/register-handler","~$cljs.core/chunk-rest","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/on-changes","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/unwrap","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/debug","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/after","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/clear-global-interceptors","~$cljs.core/set","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/add-post-event-callback","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs/query->reaction","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.utils/apply-kw","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-subscription-cache!","~$cljs.core/into","~$cljs.core/reset!","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/path","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-sub","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/console","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/remove-post-event-callback","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/reg-cofx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-fx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/assoc-coeffect","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx/do-fx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-sub-raw","~$cljs.core/vals","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/path","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/dispose!","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/subscribe","~$cljs.core/get","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs/clear-subscription-cache!","~$cljs.core/-nth","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/kind->id->handler","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/unwrap","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/on-changes","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/register","~$clojure.set/difference","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/reg-global-interceptor","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers/console","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/purge","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/enrich","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/remove-post-event-callback","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/get-effect","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-sub","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/make-restore-fn","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx/reg-fx","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-global-interceptor","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/assoc-coeffect","~$cljs.core/next","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/register-sub","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch-sync","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-db","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/enqueue","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/db-handler->interceptor","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/register-handler","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers/set-loggers!","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.subs/kind","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/->interceptor","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/purge-event-queue","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/get-effect","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/clear-handlers","~$cljs.core/first","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/get-coeffect","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/assoc-effect","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/enrich","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx/kind","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/trim-v","~$js/Error","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-event","~$cljs.core/chunked-seq?","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-fx"]]],"~:cache-keys",["~#cmap",[["^22","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^T",[]],"~:deps-syms",["^1@","~$goog.dom.HtmlElement"]]],["^22","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^22","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.asserts"]]],["^22","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^22","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.array","~$goog.object","^4W","^4V"]]],["^22","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4V"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1:","^11","^1J","^1;","^17","^15","^1C","^1?","^19","^1F","^1>","^1A","^1I","^13"]]],["^22","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/registrar.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1J","^19","^1?"]]],["^22","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4W","~$goog.reflect","^4V"]]],["^22","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.events.Event","~$goog.events.EventId"]]],["^22","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/ratom.cljs"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.util","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.debug","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.batching","^13","^50"]]],["^22","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^4Y","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^5<","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^22","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/protocols.cljs"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<"]]],["^22","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.Disposable","^4X","~$goog.events","^5;","^5B","^5C","^50","^5<","^5E","^5G"]]],["^22","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^22","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/input.cljs"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.component","^5?","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.protocols"]]],["^22","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/settings.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1J","^19"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["e966149d24edb843cd9990d50bde318950295405","d65b53de796613f3fe4ae9a8b8f966e3b64b7383","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^22","shadow/js.js"],["36a58478a3b86786e2330011d1e7158269f0332a","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/cofx.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1;","^1>","^1F","^19"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^5P","node_modules/react/cjs/react.development.js"],["e966149d24edb843cd9990d50bde318950295405","d65b53de796613f3fe4ae9a8b8f966e3b64b7383","754b7a48941975257c8955f6d5e511cb3a878737","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^5Q","~$module$node_modules$object_assign$index"]]],["^22","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X","^5:"]]],["^22","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^5G","^5B"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/db.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1J"]]],["^22","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X","~$goog.fs.blob","^51","~$goog.html.SafeScript","~$goog.html.trustedtypes","^53","^54","^55","^56"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/router.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1:","^1J","^19","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace"]]],["^22","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4[","^5H","^50","^5<","^5B","^5G"]]],["^22","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^22","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/template.cljs"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^G","~$clojure.string","^5=","^5N","^5?","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.input","^5O","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom","^5>","^50"]]],["^22","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^55","~$goog.html.SafeUrl","^56","^4X","^4V"]]],["^22","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^5W","~$goog.html.SafeStyle","^63","^52","~$goog.html.uncheckedconversions","^55","^4V"]]],["^22","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/fx.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1C","^1;","^1>","^1J","^1:","^1F","^19","^5Y"]]],["^22","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^55","^53","^54","^5W","^67","~$goog.html.SafeStyleSheet","^63","~$goog.dom.TagName","^52","^56","^4X","^57","^4[","^50","^4V","~$goog.dom.tags","^5X"]]],["^22","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^50"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/events.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1;","^1I","^1J","^1F","^19","^1>","^5Y"]]],["^22","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^19","^1J","^5Y","^13"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/std_interceptors.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1>","^19","^1?","^1;","~$clojure.data","^15","^1I","^5Y"]]],["^22","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4[","^4V","^4W"]]],["^22","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4[","^4X","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^6:","~$goog.dom.safe","^66","^68","~$goog.math.Coordinate","~$goog.math.Size","^50","~$goog.string","^55","~$goog.string.Unicode","^4Z"]]],["^22","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.debug.Error","^6>"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/loggers.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^13"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interop.cljs"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","~$goog.async.nextTick","^5J","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core","^62"]]],["^22","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4[","^4X","~$goog.collections.maps","^6B","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^22","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/core.cljs"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^G","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.template","^5N","^5=","^5?","^5O","^62","^5>"]]],["^22","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^5P","node_modules/object-assign/index.js"],["e966149d24edb843cd9990d50bde318950295405","d65b53de796613f3fe4ae9a8b8f966e3b64b7383","519ffd5a4c91b67302cc9947b794966d629860cd","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^5Q"]]],["^22","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^5I","^4X","~$goog.debug.EntryPointMonitor","^6D"]]],["^22","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",[]]],["^22","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4[","^50"]]],["^22","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^6B","~$goog.string.StringBuffer"]]],["^5P","node_modules/react/cjs/react.production.min.js"],["e966149d24edb843cd9990d50bde318950295405","d65b53de796613f3fe4ae9a8b8f966e3b64b7383","0a81b45abe33f0ad39b726512604018f94261db9","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^5Q","^5U"]]],["^22","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X"]]],["^22","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^6?","^68","^55","^4V"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/utils.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^19"]]],["^22","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^13"]]],["^22","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.labs.userAgent","^4V"]]],["^22","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4[","~$goog.debug.errorcontext"]]],["^22","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.math"]]],["^22","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^5@","~$goog.dom","^6:","^65","^57","^58"]]],["^22","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X","^66","^5W","^67","^69","^63","^52","^55","^4V","^53"]]],["^22","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^5I","^5<"]]],["^22","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/debug.cljs"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<"]]],["^22","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^5I","^5J","^50","^5;","^5<","~$goog.events.EventTarget","^5F"]]],["^22","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@"]]],["^22","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.math.Long","~$goog.math.Integer","^6B","^50","^4[","~$goog.Uri","^6N"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/subs.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1;","^1J","^19","^1I","^1F","^5Y"]]],["^22","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^55","^56","^5X","^4X"]]],["^22","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/trace.cljc"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^1J","^19","^65"]]],["^22","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/component.cljs"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^50","^G","^5=","^5?","^5O","^62","^5>"]]],["^22","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^55","^67","^56","^50","^4X","^4V"]]],["^22","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","~$goog.debug","^5;","~$goog.events.EventType","^5:","^4Z"]]],["^22","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^5:"]]],["^22","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4Z"]]],["^22","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/batching.cljs"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^5>","^5="]]],["^22","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<"]]],["^22","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X","^6B"]]],["^22","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^4X","^56"]]],["^22","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^5L"]]],["^22","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/util.cljs"],["b5acdbc79cbb677bebc2e2414632fb90de653748","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^1<","^60","~$clojure.walk","^50","^5>"]]],["^22","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^5<","^5E","^5G"]]],["^22","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4Q",["^ ","^4R",null,"^4S",["^T",[]],"^4T",["^1@","^5B"]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/day8/re-frame/re-frame-10x/1.5.0/re-frame-10x-1.5.0.jar!/day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/core.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/day8/re-frame/re-frame-10x/1.5.0/re-frame-10x-1.5.0.jar!/day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/interop.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/day8/re-frame/re-frame-10x/1.5.0/re-frame-10x-1.5.0.jar!/day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interop.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/day8/re-frame/re-frame-10x/1.5.0/re-frame-10x-1.5.0.jar!/day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/debug.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/day8/re-frame/re-frame-10x/1.5.0/re-frame-10x-1.5.0.jar!/day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/trace.cljc",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/day8/re-frame/re-frame-10x/1.5.0/re-frame-10x-1.5.0.jar!/day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/ratom.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",1,"^8",5,"^9",1,"^:",65],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q"],"^R",null,"^S",["^T",[]],"^U","^V","^W",["^ "],"^Z",null,"^[",["^ ","^10","^11","^12","^13","^14","^15","^16","^17","^18","^19","^1:","^1:","^1;","^1;","^1<","^1<","^1=","^1>","^1?","^1?","^1@","^1@","^1A","^1A","^1B","^1C","^1D","^1;","^1E","^1F","^19","^19","^15","^15","^13","^13","^1G","^1:","^1H","^1?","^1I","^1I","^1J","^1J","^1K","^1J","^1F","^1F","^1>","^1>","^1L","^1I","^1M","^1A","^1C","^1C","^11","^11","^17","^17"],"^1N",["^T",["^1O"]],"~:shadow/js-access-global",["^T",["Error"]],"^1P",["^ ","^1Q","^1A","^1R","^1A","^1S","^1A"],"~:defs",["^ ","~$console",["^ ","~:protocol-inline",null,"^5",["^ ","~:api-docs/heading","Logging","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",14,"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^1V",["~$level","~$args"]]],"~:arglists",["^1V",[["^83","~$&","^84"]]],"~:arglists-meta",["^1V",[null]]],"^8",7,"^7",956,"^9",956,"^85",["^1V",["~$quote",["^1V",[["^83","~$&","^84"]]]]],"~:doc","A utility logging function which is used internally within re-frame to produce\n  warnings and other output. It can also be used by libraries which\n  extend re-frame, such as effect handlers.\n\n  By default, it will output the given `args` to `js/console` at the given log `level`.\n  However, an application using re-frame can redirect `console` output via `set-loggers!`.\n\n  `level` can be one of `:log`, `:error`, `:warn`, `:debug`, `:group` or `:groupEnd`.\n\n  Example usage:\n\n      #!clj\n      (console :error \"Sure enough it happened:\" a-var \"and\" another)\n      (console :warn \"Possible breach of containment wall at:\" dt)\n  "],"^U","^3E","^7Y","Logging","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",14,"^7Z",["^ ","^7[",true,"^80",1,"^81",1,"^82",[["^1V",["^83","^84"]]],"^85",["^1V",[["^83","~$&","^84"]]],"^86",["^1V",[null]]],"^82",[["^1V",["^83","^84"]]],"~:protocol-impl",null,"^80",1,"^86",["^1V",[null]],"^8",1,"^7[",true,"~:methods",[["^ ","^80",1,"^7[",true,"~:tag","~$any"]],"^7",956,"~:ret-tag","^8<","^9",956,"^81",1,"~:fn-var",true,"^85",["^1V",[["^83","~$&","^84"]]],"^88","A utility logging function which is used internally within re-frame to produce\n  warnings and other output. It can also be used by libraries which\n  extend re-frame, such as effect handlers.\n\n  By default, it will output the given `args` to `js/console` at the given log `level`.\n  However, an application using re-frame can redirect `console` output via `set-loggers!`.\n\n  `level` can be one of `:log`, `:error`, `:warn`, `:debug`, `:group` or `:groupEnd`.\n\n  Example usage:\n\n      #!clj\n      (console :error \"Sure enough it happened:\" a-var \"and\" another)\n      (console :warn \"Possible breach of containment wall at:\" dt)\n  "],"~$unwrap",["^ ","^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",704,"^8",42,"^9",704,"^:",48,"^7Y","Interceptors"],"^U","^3T","^7Y","Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",48,"^8",1,"^7",704,"^9",704,"^8;","~$cljs.core/IMap","^88","> New in v1.2.0\n\n   An interceptor which decreases the amount of destructuring necessary in an\n   event handler where the event is structured as a 2-vector of\n   [event-id payload-map].\n\n   It promotes the `payload-map` part to be the event ultimately given to the\n   event handler. Should you want the full original event, it can be found in\n   `coeffects` under the key `:original-event`.\n\n   If a dispatch looked like this:\n\n      #!clj\n       (dispatch [:event-id {:x 1 :y 2 :z 3}])\n\n   Your event handlers can look like this:\n\n      #!clj\n       (reg-event-fx\n         :event-id\n         [... unwrap ...]                    ;; <-- added to the interceptors\n         (fn [{:keys [db]} {:keys [x y z]}]  ;; <-- instead of [_ {:keys [x y z]}]\n           ...)\n   "],"~$on-changes",["^ ","^7X",null,"^5",["^ ","^7Y","Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",17,"^7Z",["^ ","^7[",true,"^80",2,"^81",2,"^82",[["^1V",["~$f","~$out-path","~$in-paths"]]],"^85",["^1V",[["~$f","^8B","~$&","^8C"]]],"^86",["^1V",[null]]],"^8",7,"^7",766,"^9",766,"^85",["^1V",["^87",["^1V",[["~$f","^8B","~$&","^8C"]]]]],"^88","Returns an interceptor which will observe N paths within `db`, and if any of them\n  test not `identical?` to their previous value  (as a result of a event handler\n  being run), then it will run `f` to compute a new value, which is then assoc-ed\n  into the given `out-path` within `db`.\n\n  Example Usage:\n\n      #!clj\n      (defn my-f\n        [a-val b-val]\n        ... some computation on a and b in here)\n\n      ;; use it\n      (def my-interceptor (on-changes my-f [:c] [:a] [:b]))\n\n      (reg-event-db\n        :event-id\n        [... my-interceptor ...]  ;; <-- ultimately used here\n        (fn [db v]\n           ...))\n\n\n  If you put this Interceptor on handlers which might change paths `:a` or `:b`,\n  it will:\n\n    - call `f` each time the value at path `[:a]` or `[:b]` changes\n    - call `f` with the values extracted from `[:a]` `[:b]`\n    - assoc the return value from `f` into the path  `[:c]`\n  "],"^U","^3U","^7Y","Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",17,"^7Z",["^ ","^7[",true,"^80",2,"^81",2,"^82",[["^1V",["~$f","^8B","^8C"]]],"^85",["^1V",[["~$f","^8B","~$&","^8C"]]],"^86",["^1V",[null]]],"^82",[["^1V",["~$f","^8B","^8C"]]],"^89",null,"^80",2,"^86",["^1V",[null]],"^8",1,"^7[",true,"^8:",[["^ ","^80",2,"^7[",true,"^8;","^8<"]],"^7",766,"^8=","^8<","^9",766,"^81",2,"^8>",true,"^85",["^1V",[["~$f","^8B","~$&","^8C"]]],"^88","Returns an interceptor which will observe N paths within `db`, and if any of them\n  test not `identical?` to their previous value  (as a result of a event handler\n  being run), then it will run `f` to compute a new value, which is then assoc-ed\n  into the given `out-path` within `db`.\n\n  Example Usage:\n\n      #!clj\n      (defn my-f\n        [a-val b-val]\n        ... some computation on a and b in here)\n\n      ;; use it\n      (def my-interceptor (on-changes my-f [:c] [:a] [:b]))\n\n      (reg-event-db\n        :event-id\n        [... my-interceptor ...]  ;; <-- ultimately used here\n        (fn [db v]\n           ...))\n\n\n  If you put this Interceptor on handlers which might change paths `:a` or `:b`,\n  it will:\n\n    - call `f` each time the value at path `[:a]` or `[:b]` changes\n    - call `f` with the values extracted from `[:a]` `[:b]`\n    - assoc the return value from `f` into the path  `[:c]`\n  "],"~$enrich",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",655,"^8",7,"^9",655,"^:",13,"^85",["^1V",["^87",["^1V",[["~$f"]]]]],"^88","Returns an Interceptor which will run the given function `f` in the `:after`\n  position.\n\n  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` interceptor which is only about side effects, `enrich`\n  expects `f` to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  #### Example Use:\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them via a warning\n  at the bottom of the panel.\n\n  Almost any user action (edit text, add new todo, remove a todo) requires a\n  complete reassessment of duplication errors and warnings. Eg: that edit\n  just made might have introduced a new duplicate, or removed one. Same with\n  any todo removal. So we need to re-calculate warnings after any CRUD events\n  associated with the todos list.\n\n  Unless we are careful, we might end up coding subtly different checks\n  for each kind of CRUD operation.  The duplicates check made after\n  'delete todo' event might be subtly different to that done after an\n  editing operation. Nice and efficient, but fiddly. A bug generator\n  approach.\n\n  So, instead, we create an `f` which recalculates ALL warnings from scratch\n  every time there is ANY change. It will inspect all the todos, and\n  reset ALL FLAGS every time (overwriting what was there previously)\n  and fully recalculate the list of duplicates (displayed at the bottom?).\n\n  <a href=\"https://twitter.com/nathanmarz/status/879722740776939520\" target=\"_blank\">https://twitter.com/nathanmarz/status/879722740776939520</a>\n\n  By applying `f` in an `:enrich` interceptor, after every CRUD event,\n  we keep the handlers simple and yet we ensure this important step\n  (of getting warnings right) is not missed on any change.\n\n  We can test `f` easily - it is a pure function - independently of\n  any CRUD operation.\n\n  This brings huge simplicity at the expense of some re-computation\n  each time. This may be a very satisfactory trade-off in many cases.","^7Y","Interceptors"],"^U","^3[","^7Y","Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",13,"^82",["^1V",[["~$f"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",655,"^8=","^8@","^9",655,"^81",1,"^8>",true,"^85",["^1V",["^87",["^1V",[["~$f"]]]]],"^88","Returns an Interceptor which will run the given function `f` in the `:after`\n  position.\n\n  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` interceptor which is only about side effects, `enrich`\n  expects `f` to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  #### Example Use:\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them via a warning\n  at the bottom of the panel.\n\n  Almost any user action (edit text, add new todo, remove a todo) requires a\n  complete reassessment of duplication errors and warnings. Eg: that edit\n  just made might have introduced a new duplicate, or removed one. Same with\n  any todo removal. So we need to re-calculate warnings after any CRUD events\n  associated with the todos list.\n\n  Unless we are careful, we might end up coding subtly different checks\n  for each kind of CRUD operation.  The duplicates check made after\n  'delete todo' event might be subtly different to that done after an\n  editing operation. Nice and efficient, but fiddly. A bug generator\n  approach.\n\n  So, instead, we create an `f` which recalculates ALL warnings from scratch\n  every time there is ANY change. It will inspect all the todos, and\n  reset ALL FLAGS every time (overwriting what was there previously)\n  and fully recalculate the list of duplicates (displayed at the bottom?).\n\n  <a href=\"https://twitter.com/nathanmarz/status/879722740776939520\" target=\"_blank\">https://twitter.com/nathanmarz/status/879722740776939520</a>\n\n  By applying `f` in an `:enrich` interceptor, after every CRUD event,\n  we keep the handlers simple and yet we ensure this important step\n  (of getting warnings right) is not missed on any change.\n\n  We can test `f` easily - it is a pure function - independently of\n  any CRUD operation.\n\n  This brings huge simplicity at the expense of some re-computation\n  each time. This may be a very satisfactory trade-off in many cases."],"~$reg-sub-raw",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",423,"^8",7,"^9",423,"^:",18,"^85",["^1V",["^87",["^1V",[["~$query-id","~$handler-fn"]]]]],"^88","This is a low level, advanced function.  You should probably be\n  using `reg-sub` instead.\n\n  Some explanation is available in the docs at\n  <a href=\"http://day8.github.io/re-frame/flow-mechanics/\" target=\"_blank\">http://day8.github.io/re-frame/flow-mechanics/</a>","^7Y","Subscriptions"],"^U","^3K","^7Y","Subscriptions","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",18,"^82",["^1V",[["^8F","^8G"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",423,"^8=","^8<","^9",423,"^81",2,"^8>",true,"^85",["^1V",["^87",["^1V",[["^8F","^8G"]]]]],"^88","This is a low level, advanced function.  You should probably be\n  using `reg-sub` instead.\n\n  Some explanation is available in the docs at\n  <a href=\"http://day8.github.io/re-frame/flow-mechanics/\" target=\"_blank\">http://day8.github.io/re-frame/flow-mechanics/</a>"],"~$subscribe",["^ ","^7X",null,"^5",["^ ","^7Y","Subscriptions","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",16,"^7Z",["^ ","^7[",false,"^80",2,"^81",2,"^82",[["~$query"],["^8I","~$dynv"]],"^85",["^1V",[["^8I"],["^8I","^8J"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",343,"^9",343,"^85",["^1V",["^87",["^1V",[["^8I"],["^8I","^8J"]]]]],"^88","Given a `query` vector, returns a Reagent `reaction` which will, over\n  time, reactively deliver a stream of values. So, in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the current value from the Signal, it must be dereferenced:\n\n      #!clj\n      (let [signal (subscribe [:items])\n            value  (deref signal)]     ;; could be written as @signal\n        ...)\n\n   which is typically written tersely as simple:\n\n      #!clj\n      (let [items  @(subscribe [:items])]\n        ...)\n\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  **Example Usage**:\n\n      #!clj\n      (subscribe [:items])\n      (subscribe [:items \"blue\" :small])\n      (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (functions) associated with\n  `query-id`.\n\n  **Hint**\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n      #!clj\n      (def <sub  (comp deref day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  **De-duplication**\n\n  Two, or more, concurrent subscriptions for the same query will\n  source reactive updates from the one executing handler.\n\n  See also: `reg-sub`\n  "],"^U","^3O","^7Y","Subscriptions","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",16,"^7Z",["^ ","^7[",false,"^80",2,"^81",2,"^82",[["^8I"],["^8I","^8J"]],"^85",["^1V",[["^8I"],["^8I","^8J"]]],"^86",["^1V",[null,null]]],"^82",[["^8I"],["^8I","^8J"]],"^89",null,"^80",2,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",1,"^7[",false,"^8;",["^T",[null,"^8<"]]],["^ ","^80",2,"^7[",false,"^8;",["^T",[null,"^8<"]]]],"^7",343,"^9",343,"^81",2,"^8>",true,"^85",["^1V",[["^8I"],["^8I","^8J"]]],"^88","Given a `query` vector, returns a Reagent `reaction` which will, over\n  time, reactively deliver a stream of values. So, in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the current value from the Signal, it must be dereferenced:\n\n      #!clj\n      (let [signal (subscribe [:items])\n            value  (deref signal)]     ;; could be written as @signal\n        ...)\n\n   which is typically written tersely as simple:\n\n      #!clj\n      (let [items  @(subscribe [:items])]\n        ...)\n\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  **Example Usage**:\n\n      #!clj\n      (subscribe [:items])\n      (subscribe [:items \"blue\" :small])\n      (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (functions) associated with\n  `query-id`.\n\n  **Hint**\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n      #!clj\n      (def <sub  (comp deref day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  **De-duplication**\n\n  Two, or more, concurrent subscriptions for the same query will\n  source reactive updates from the one executing handler.\n\n  See also: `reg-sub`\n  "],"~$reg-global-interceptor",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",801,"^8",7,"^9",801,"^:",29,"^85",["^1V",["^87",["^1V",[["^1="]]]]],"^88","Registers the given `interceptor` as a global interceptor. Global interceptors are\n   included in the processing chain of every event.\n\n   When you register an event handler, you have the option of supplying an\n   interceptor chain. Any global interceptors you register are effectively\n   prepending to this chain.\n\n   Global interceptors are run in the order that they are registered.","^7Y","Global Interceptors"],"^U","^46","^7Y","Global Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",29,"^82",["^1V",[["^1="]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",801,"^8=",["^T",[null,"^8<"]],"^9",801,"^81",1,"^8>",true,"^85",["^1V",["^87",["^1V",[["^1="]]]]],"^88","Registers the given `interceptor` as a global interceptor. Global interceptors are\n   included in the processing chain of every event.\n\n   When you register an event handler, you have the option of supplying an\n   interceptor chain. Any global interceptors you register are effectively\n   prepending to this chain.\n\n   Global interceptors are run in the order that they are registered."],"~$assoc-coeffect",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",883,"^8",7,"^9",883,"^:",21,"^85",["^1V",["^87",["^1V",[["~$context","~$key","~$value"]]]]],"^88","A utility function, typically used when writing an interceptor's `:before` function.\n\n   Adds or updates a key/value pair in the `:coeffects` map within `context`. ","^7Y","Writing Interceptors"],"^U","^47","^7Y","Writing Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",21,"^82",["^1V",[["^8M","^8N","^8O"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",883,"^8=",["^T",["~$clj","^8<"]],"^9",883,"^81",3,"^8>",true,"^85",["^1V",["^87",["^1V",[["^8M","^8N","^8O"]]]]],"^88","A utility function, typically used when writing an interceptor's `:before` function.\n\n   Adds or updates a key/value pair in the `:coeffects` map within `context`. "],"~$register-sub",["^ ","^7X",null,"^5",["^ ","^7Y","Deprecated","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",19,"^7Z",["^ ","^7[",true,"^80",0,"^81",0,"^82",[["^1V",["^84"]]],"^85",["^1V",[["~$&","^84"]]],"^86",["^1V",[null]]],"^8",7,"^7",1059,"~:deprecated","0.8.0","^9",1059,"^85",["^1V",["^87",["^1V",[["~$&","^84"]]]]],"^88","Deprecated. Use `reg-sub-raw` instead."],"^U","^49","^7Y","Deprecated","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",19,"^7Z",["^ ","^7[",true,"^80",0,"^81",0,"^82",[["^1V",["^84"]]],"^85",["^1V",[["~$&","^84"]]],"^86",["^1V",[null]]],"^82",[["^1V",["^84"]]],"^89",null,"^80",0,"^86",["^1V",[null]],"^8",1,"^7[",true,"^8:",[["^ ","^80",0,"^7[",true,"^8;","^8<"]],"^7",1059,"^8R","0.8.0","^8=","^8<","^9",1059,"^81",0,"^8>",true,"^85",["^1V",[["~$&","^84"]]],"^88","Deprecated. Use `reg-sub-raw` instead."],"~$purge-event-queue",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",1006,"^8",7,"^9",1006,"^:",24,"^85",["^1V",["^87",["^1V",[[]]]]],"^88","Removes all events currently queued for processing","^7Y","Miscellaneous"],"^U","^4B","^7Y","Miscellaneous","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",24,"^82",["^1V",[[]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",1006,"^8=","^8<","^9",1006,"^81",0,"^8>",true,"^85",["^1V",["^87",["^1V",[[]]]]],"^88","Removes all events currently queued for processing"],"~$remove-post-event-callback",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",1040,"^8",7,"^9",1040,"^:",33,"^85",["^1V",["^87",["^1V",[["~$id"]]]]],"^88","Unregisters a post event callback function, identified by `id`.\n\n  Such a function must have been previously registered via `add-post-event-callback`","^7Y","Miscellaneous"],"^U","^40","^7Y","Miscellaneous","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",33,"^82",["^1V",[["^8U"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",1040,"^8=","^8<","^9",1040,"^81",1,"^8>",true,"^85",["^1V",["^87",["^1V",[["^8U"]]]]],"^88","Unregisters a post event callback function, identified by `id`.\n\n  Such a function must have been previously registered via `add-post-event-callback`"],"~$path",["^ ","^7X",null,"^5",["^ ","^7Y","Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",11,"^7Z",["^ ","^7[",true,"^80",0,"^81",0,"^82",[["^1V",["^84"]]],"^85",["^1V",[["~$&","^84"]]],"^86",["^1V",[null]]],"^8",7,"^7",621,"^9",621,"^85",["^1V",["^87",["^1V",[["~$&","^84"]]]]],"^88","Returns an interceptor which acts somewhat like `clojure.core/update-in`, in the sense that\n  the event handler is given a specific part of `app-db` to change, not all of `app-db`.\n\n  The interceptor has both a `:before` and `:after` functions. The `:before` replaces\n  the `:db` key within coeffects with a sub-path within `app-db`. The `:after` reverses the process,\n  and it grafts the handler's return value back into db, at the right path.\n\n  Examples:\n\n      #!clj\n      (path :some :path)\n      (path [:some :path])\n      (path [:some :path] :to :here)\n      (path [:some :path] [:to] :here)\n\n  Example Use:\n\n      #!clj\n      (reg-event-db\n        :event-id\n        (path [:a :b])  ;; <-- used here, in interceptor chain\n        (fn [b v]       ;; 1st arg is not db. Is the value from path [:a :b] within db\n          ... new-b))   ;; returns a new value for that path (not the entire db)\n\n  Notes:\n\n    1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n    2. if `:effects` contains no `:db` effect, can't graft a value back in.\n  "],"^U","^3M","^7Y","Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",11,"^7Z",["^ ","^7[",true,"^80",0,"^81",0,"^82",[["^1V",["^84"]]],"^85",["^1V",[["~$&","^84"]]],"^86",["^1V",[null]]],"^82",[["^1V",["^84"]]],"^89",null,"^80",0,"^86",["^1V",[null]],"^8",1,"^7[",true,"^8:",[["^ ","^80",0,"^7[",true,"^8;","^8<"]],"^7",621,"^8=","^8<","^9",621,"^81",0,"^8>",true,"^85",["^1V",[["~$&","^84"]]],"^88","Returns an interceptor which acts somewhat like `clojure.core/update-in`, in the sense that\n  the event handler is given a specific part of `app-db` to change, not all of `app-db`.\n\n  The interceptor has both a `:before` and `:after` functions. The `:before` replaces\n  the `:db` key within coeffects with a sub-path within `app-db`. The `:after` reverses the process,\n  and it grafts the handler's return value back into db, at the right path.\n\n  Examples:\n\n      #!clj\n      (path :some :path)\n      (path [:some :path])\n      (path [:some :path] :to :here)\n      (path [:some :path] [:to] :here)\n\n  Example Use:\n\n      #!clj\n      (reg-event-db\n        :event-id\n        (path [:a :b])  ;; <-- used here, in interceptor chain\n        (fn [b v]       ;; 1st arg is not db. Is the value from path [:a :b] within db\n          ... new-b))   ;; returns a new value for that path (not the entire db)\n\n  Notes:\n\n    1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n    2. if `:effects` contains no `:db` effect, can't graft a value back in.\n  "],"~$reg-sub",["^ ","^7X",null,"^5",["^ ","^7Y","Subscriptions","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",14,"^7Z",["^ ","^7[",true,"^80",1,"^81",1,"^82",[["^1V",["^8F","^84"]]],"^85",["^1V",[["^8F","~$&","^84"]]],"^86",["^1V",[null]]],"^8",7,"^7",191,"^9",191,"^85",["^1V",["^87",["^1V",[["^8F","~$&","^84"]]]]],"^88","A call to `reg-sub` associates a `query-id` WITH two functions.\n\n  The two functions provide 'a mechanism' for creating a node\n  in the Signal Graph. When a node of type `query-id` is needed,\n  the two functions can be used to create it.\n\n  The three arguments are:\n\n  - `query-id` - typically a namespaced keyword (later used in subscribe)\n  - optionally, an `input signals` function which returns the input data\n    flows required by this kind of node.\n  - a `computation function` which computes the value (output) of the\n    node (from the input data flows)\n\n  Later, during app execution, a call to `(subscribe [:sub-id 3 :blue])`,\n  will trigger the need for a new `:sub-id` Signal Graph node (matching the\n  query `[:sub-id 3 :blue]`). And, to create that node the two functions\n  associated with `:sub-id` will be looked up and used.\n\n  Just to be clear: calling `reg-sub` does not immediately create a node.\n  It only registers 'a mechanism' (the two functions) by which nodes\n  can be created later, when a node is bought into existence by the\n  use of `subscribe` in a `View Function`.\n\n  The `computation function` is expected to take two arguments:\n\n    - `input-values` - the values which flow into this node (how is it wierd into the graph?)\n    - `query-vector` - the vector given to `subscribe`\n\n  and it returns a computed value (which then becomes the output of the node)\n\n  When `computation function` is called, the 2nd `query-vector` argument will be that\n  vector supplied to the `subscribe`. So, if the call was `(subscribe [:sub-id 3 :blue])`,\n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 :blue]`.\n\n  The argument(s) supplied to `reg-sub` between `query-id` and the `computation-function`\n  can vary in 3 ways, but whatever is there defines the `input signals` part\n  of `the mechanism`, specifying what input values \"flow into\" the\n  `computation function` (as the 1st argument) when it is called.\n\n  So, `reg-sub` can be called in one of three ways, because there are three ways\n  to define the input signals part. But note, the 2nd method, in which a\n  `signals function` is explicitly supplied, is the most canonical and\n  instructive. The other two are really just sugary variations.\n\n  **First variation** - no input signal function given:\n\n      #!clj\n      (reg-sub\n        :query-id\n        a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n\n     In the absence of an explicit `signals function`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.\n\n\n  **Second variation** - a signal function is explicitly supplied:\n\n      #!clj\n      (reg-sub\n        :query-id\n        signal-fn     ;; <-- here\n        computation-fn)\n\n  This is the most canonical and instructive of the three variations.\n\n  When a node is created from the template, the `signal function` will be called and it\n  is expected to return the input signal(s) as either a singleton, if there is only\n  one, or a sequence if there are many, or a map with the signals as the values.\n\n  The current values of the returned signals will be supplied as the 1st argument to\n  the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns,\n  this value will be either a singleton, sequence or map of them (paralleling\n  the structure returned by the `signal function`).\n\n  This example `signal function` returns a 2-vector of input signals.\n\n      #!clj\n      (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n\n  The associated computation function must be written\n  to expect a 2-vector of values for its first argument:\n\n      #!clj\n      (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n        ....)\n\n  If, on the other hand, the signal function was simpler and returned a singleton, like this:\n\n      #!clj\n     (fn [query-vec dynamic-vec]\n       (subscribe [:a-sub]))      ;; <-- returning a singleton\n\n  then the associated computation function must be written to expect a single value\n  as the 1st argument:\n\n      #!clj\n      (fn [a query-vec]       ;; 1st argument is a single value\n         ...)\n\n  Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n\n      #!clj\n      (reg-sub\n        :query-id\n        a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n\n  is the equivalent of using this\n  2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n\n      #!clj\n      (reg-sub\n        :query-id\n        (fn [_ _]  re-frame/app-db)   ;; <--- explicit signal-fn\n        a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n\n  **Third variation** - syntax Sugar\n\n      #!clj\n      (reg-sub\n        :a-b-sub\n        :<- [:a-sub]\n        :<- [:b-sub]\n        (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n          {:a a :b b}))\n\n  This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n  `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n  If you supply only one pair a singleton will be supplied to the computation function,\n  as if you had supplied a `signal-fn` returning only a single value:\n\n      #!clj\n      (reg-sub\n        :a-sub\n        :<- [:a-sub]\n        (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n          ...))\n\n  For further understanding, read the tutorials, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs.\n\n  See also: `subscribe`\n  "],"^U","^42","^7Y","Subscriptions","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",14,"^7Z",["^ ","^7[",true,"^80",1,"^81",1,"^82",[["^1V",["^8F","^84"]]],"^85",["^1V",[["^8F","~$&","^84"]]],"^86",["^1V",[null]]],"^82",[["^1V",["^8F","^84"]]],"^89",null,"^80",1,"^86",["^1V",[null]],"^8",1,"^7[",true,"^8:",[["^ ","^80",1,"^7[",true,"^8;","^8<"]],"^7",191,"^8=","^8<","^9",191,"^81",1,"^8>",true,"^85",["^1V",[["^8F","~$&","^84"]]],"^88","A call to `reg-sub` associates a `query-id` WITH two functions.\n\n  The two functions provide 'a mechanism' for creating a node\n  in the Signal Graph. When a node of type `query-id` is needed,\n  the two functions can be used to create it.\n\n  The three arguments are:\n\n  - `query-id` - typically a namespaced keyword (later used in subscribe)\n  - optionally, an `input signals` function which returns the input data\n    flows required by this kind of node.\n  - a `computation function` which computes the value (output) of the\n    node (from the input data flows)\n\n  Later, during app execution, a call to `(subscribe [:sub-id 3 :blue])`,\n  will trigger the need for a new `:sub-id` Signal Graph node (matching the\n  query `[:sub-id 3 :blue]`). And, to create that node the two functions\n  associated with `:sub-id` will be looked up and used.\n\n  Just to be clear: calling `reg-sub` does not immediately create a node.\n  It only registers 'a mechanism' (the two functions) by which nodes\n  can be created later, when a node is bought into existence by the\n  use of `subscribe` in a `View Function`.\n\n  The `computation function` is expected to take two arguments:\n\n    - `input-values` - the values which flow into this node (how is it wierd into the graph?)\n    - `query-vector` - the vector given to `subscribe`\n\n  and it returns a computed value (which then becomes the output of the node)\n\n  When `computation function` is called, the 2nd `query-vector` argument will be that\n  vector supplied to the `subscribe`. So, if the call was `(subscribe [:sub-id 3 :blue])`,\n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 :blue]`.\n\n  The argument(s) supplied to `reg-sub` between `query-id` and the `computation-function`\n  can vary in 3 ways, but whatever is there defines the `input signals` part\n  of `the mechanism`, specifying what input values \"flow into\" the\n  `computation function` (as the 1st argument) when it is called.\n\n  So, `reg-sub` can be called in one of three ways, because there are three ways\n  to define the input signals part. But note, the 2nd method, in which a\n  `signals function` is explicitly supplied, is the most canonical and\n  instructive. The other two are really just sugary variations.\n\n  **First variation** - no input signal function given:\n\n      #!clj\n      (reg-sub\n        :query-id\n        a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n\n     In the absence of an explicit `signals function`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.\n\n\n  **Second variation** - a signal function is explicitly supplied:\n\n      #!clj\n      (reg-sub\n        :query-id\n        signal-fn     ;; <-- here\n        computation-fn)\n\n  This is the most canonical and instructive of the three variations.\n\n  When a node is created from the template, the `signal function` will be called and it\n  is expected to return the input signal(s) as either a singleton, if there is only\n  one, or a sequence if there are many, or a map with the signals as the values.\n\n  The current values of the returned signals will be supplied as the 1st argument to\n  the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns,\n  this value will be either a singleton, sequence or map of them (paralleling\n  the structure returned by the `signal function`).\n\n  This example `signal function` returns a 2-vector of input signals.\n\n      #!clj\n      (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n\n  The associated computation function must be written\n  to expect a 2-vector of values for its first argument:\n\n      #!clj\n      (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n        ....)\n\n  If, on the other hand, the signal function was simpler and returned a singleton, like this:\n\n      #!clj\n     (fn [query-vec dynamic-vec]\n       (subscribe [:a-sub]))      ;; <-- returning a singleton\n\n  then the associated computation function must be written to expect a single value\n  as the 1st argument:\n\n      #!clj\n      (fn [a query-vec]       ;; 1st argument is a single value\n         ...)\n\n  Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n\n      #!clj\n      (reg-sub\n        :query-id\n        a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n\n  is the equivalent of using this\n  2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n\n      #!clj\n      (reg-sub\n        :query-id\n        (fn [_ _]  re-frame/app-db)   ;; <--- explicit signal-fn\n        a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n\n  **Third variation** - syntax Sugar\n\n      #!clj\n      (reg-sub\n        :a-b-sub\n        :<- [:a-sub]\n        :<- [:b-sub]\n        (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n          {:a a :b b}))\n\n  This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n  `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n  If you supply only one pair a singleton will be supplied to the computation function,\n  as if you had supplied a `signal-fn` returning only a single value:\n\n      #!clj\n      (reg-sub\n        :a-sub\n        :<- [:a-sub]\n        (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n          ...))\n\n  For further understanding, read the tutorials, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs.\n\n  See also: `subscribe`\n  "],"~$make-restore-fn",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",978,"^8",7,"^9",978,"^:",22,"^85",["^1V",["^87",["^1V",[[]]]]],"^88","This is a utility function, typically used in testing.\n\n  It checkpoints the current state of re-frame and returns a function which, when\n  later called, will restore re-frame to the checkpointed state.\n\n  The checkpoint includes `app-db`, all registered handlers and all subscriptions.\n  ","^7Y","Miscellaneous"],"^U","^43","^7Y","Miscellaneous","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",22,"^82",["^1V",[[]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",978,"^8=","~$function","^9",978,"^81",0,"^8>",true,"^85",["^1V",["^87",["^1V",[[]]]]],"^88","This is a utility function, typically used in testing.\n\n  It checkpoints the current state of re-frame and returns a function which, when\n  later called, will restore re-frame to the checkpointed state.\n\n  The checkpoint includes `app-db`, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^7X",null,"^5",["^ ","^7Y","Effect Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",15,"^7Z",["^ ","^7[",false,"^80",1,"^81",1,"^82",[[],["^8U"]],"^85",["^1V",[[],["^8U"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",478,"^9",478,"^85",["^1V",["^87",["^1V",[[],["^8U"]]]]],"^88","Unregisters effect handlers (presumably registered previously via the use of `reg-fx`).\n\n  When called with no args, it will unregister all currently registered effect handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  effect handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration.\n  "],"^U","^4N","^7Y","Effect Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",15,"^7Z",["^ ","^7[",false,"^80",1,"^81",1,"^82",[[],["^8U"]],"^85",["^1V",[[],["^8U"]]],"^86",["^1V",[null,null]]],"^82",[[],["^8U"]],"^89",null,"^80",1,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",0,"^7[",false,"^8;",["^T",[null,"^8<"]]],["^ ","^80",1,"^7[",false,"^8;",["^T",[null,"^8<"]]]],"^7",478,"^9",478,"^81",1,"^8>",true,"^85",["^1V",[[],["^8U"]]],"^88","Unregisters effect handlers (presumably registered previously via the use of `reg-fx`).\n\n  When called with no args, it will unregister all currently registered effect handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  effect handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration.\n  "],"~$get-effect",["^ ","^7X",null,"^5",["^ ","^7Y","Writing Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",17,"^7Z",["^ ","^7[",false,"^80",3,"^81",3,"^82",[["^8M"],["^8M","^8N"],["^8M","^8N","~$not-found"]],"^85",["^1V",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]]],"^86",["^1V",[null,null,null]]],"^8",7,"^7",891,"^9",891,"^85",["^1V",["^87",["^1V",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]]]]],"^88","A utility function, used when writing interceptors, typically within an `:after` function.\n\n   When called with one argument, returns the `:effects` map from the `context`.\n\n   When called with two or three arguments, behaves like `clojure.core/get` and\n   returns the value mapped to `key` in the effects map, `not-found` or\n   `nil` if `key` is not present."],"^U","^4C","^7Y","Writing Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",17,"^7Z",["^ ","^7[",false,"^80",3,"^81",3,"^82",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]],"^85",["^1V",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]]],"^86",["^1V",[null,null,null]]],"^82",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]],"^89",null,"^80",3,"^86",["^1V",[null,null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",1,"^7[",false,"^8;","^8<"],["^ ","^80",2,"^7[",false,"^8;",["^T",[null,"^8<"]]],["^ ","^80",3,"^7[",false,"^8;",["^T",[null,"^8<"]]]],"^7",891,"^9",891,"^81",3,"^8>",true,"^85",["^1V",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]]],"^88","A utility function, used when writing interceptors, typically within an `:after` function.\n\n   When called with one argument, returns the `:effects` map from the `context`.\n\n   When called with two or three arguments, behaves like `clojure.core/get` and\n   returns the value mapped to `key` in the effects map, `not-found` or\n   `nil` if `key` is not present."],"~$reg-event-db",["^ ","^7X",null,"^5",["^ ","^7Y","Event Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",19,"^7Z",["^ ","^7[",false,"^80",3,"^81",3,"^82",[["^8U","~$handler"],["^8U","~$interceptors","^92"]],"^85",["^1V",[["^8U","^92"],["^8U","^93","^92"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",74,"^9",74,"^85",["^1V",["^87",["^1V",[["^8U","^92"],["^8U","^93","^92"]]]]],"^88","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain:\n\n    - `id` is typically a namespaced keyword  (but can be anything)\n    - `handler` is a function: (db event) -> db\n    - `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n\n  Example Usage:\n\n      #!clj\n      (reg-event-db\n        :token\n        (fn [db event]\n          (assoc db :some-key (get event 2)))  ;; return updated db\n\n  Or perhaps:\n\n      #!clj\n      (reg-event-db\n        :namespaced/id           ;; <-- namespaced keywords are often used\n        [one two three]          ;; <-- a seq of interceptors\n        (fn [db [_ arg1 arg2]]   ;; <-- event vector is destructured\n          (-> db\n            (dissoc arg1)\n            (update :key + arg2))))   ;; return updated db\n  "],"^U","^4;","^7Y","Event Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",19,"^7Z",["^ ","^7[",false,"^80",3,"^81",3,"^82",[["^8U","^92"],["^8U","^93","^92"]],"^85",["^1V",[["^8U","^92"],["^8U","^93","^92"]]],"^86",["^1V",[null,null]]],"^82",[["^8U","^92"],["^8U","^93","^92"]],"^89",null,"^80",3,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",2,"^7[",false,"^8;","^8<"],["^ ","^80",3,"^7[",false,"^8;","^8<"]],"^7",74,"^9",74,"^81",3,"^8>",true,"^85",["^1V",[["^8U","^92"],["^8U","^93","^92"]]],"^88","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain:\n\n    - `id` is typically a namespaced keyword  (but can be anything)\n    - `handler` is a function: (db event) -> db\n    - `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n\n  Example Usage:\n\n      #!clj\n      (reg-event-db\n        :token\n        (fn [db event]\n          (assoc db :some-key (get event 2)))  ;; return updated db\n\n  Or perhaps:\n\n      #!clj\n      (reg-event-db\n        :namespaced/id           ;; <-- namespaced keywords are often used\n        [one two three]          ;; <-- a seq of interceptors\n        (fn [db [_ arg1 arg2]]   ;; <-- event vector is destructured\n          (-> db\n            (dissoc arg1)\n            (update :key + arg2))))   ;; return updated db\n  "],"~$dispatch-sync",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",43,"^8",7,"^9",43,"^:",20,"^85",["^1V",["^87",["^1V",[["~$event"]]]]],"^88","Synchronously (immediately) process `event`. It does **not** queue\n  the event for handling later as `dispatch` does.\n\n  `event` is a vector and the first element is typically a keyword\n  which identifies the kind of event.\n\n  It is an error to use `dispatch-sync` within an event handler because\n  you can't immediately process an new event when one is already\n  part way through being processed.\n\n  Generally, avoid using this function, and instead, use `dispatch`.\n  Only use it in the narrow set of cases where any delay in\n  processing is a problem:\n\n    1. the `:on-change` handler of a text field where we are expecting fast typing\n    2. when initialising your app - see 'main' in examples/todomvc/src/core.cljs\n    3. in a unit test where immediate, synchronous processing is useful\n\n  Usage:\n\n      #!clj\n      (dispatch-sync [:sing :falsetto \"piano accordion\"])\n  ","^7Y","Dispatching Events"],"^U","^4:","^7Y","Dispatching Events","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",20,"^82",["^1V",[["^95"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",43,"^8=","~$clj-nil","^9",43,"^81",1,"^8>",true,"^85",["^1V",["^87",["^1V",[["^95"]]]]],"^88","Synchronously (immediately) process `event`. It does **not** queue\n  the event for handling later as `dispatch` does.\n\n  `event` is a vector and the first element is typically a keyword\n  which identifies the kind of event.\n\n  It is an error to use `dispatch-sync` within an event handler because\n  you can't immediately process an new event when one is already\n  part way through being processed.\n\n  Generally, avoid using this function, and instead, use `dispatch`.\n  Only use it in the narrow set of cases where any delay in\n  processing is a problem:\n\n    1. the `:on-change` handler of a text field where we are expecting fast typing\n    2. when initialising your app - see 'main' in examples/todomvc/src/core.cljs\n    3. in a unit test where immediate, synchronous processing is useful\n\n  Usage:\n\n      #!clj\n      (dispatch-sync [:sing :falsetto \"piano accordion\"])\n  "],"~$clear-event",["^ ","^7X",null,"^5",["^ ","^7Y","Event Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",18,"^7Z",["^ ","^7[",false,"^80",1,"^81",1,"^82",[[],["^8U"]],"^85",["^1V",[[],["^8U"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",174,"^9",174,"^85",["^1V",["^87",["^1V",[[],["^8U"]]]]],"^88","Unregisters event handlers (presumably registered previously via the use of `reg-event-db` or `reg-event-fx`).\n\n  When called with no args, it will unregister all currently registered event handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  event handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration."],"^U","^4L","^7Y","Event Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",18,"^7Z",["^ ","^7[",false,"^80",1,"^81",1,"^82",[[],["^8U"]],"^85",["^1V",[[],["^8U"]]],"^86",["^1V",[null,null]]],"^82",[[],["^8U"]],"^89",null,"^80",1,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",0,"^7[",false,"^8;",["^T",[null,"^8<"]]],["^ ","^80",1,"^7[",false,"^8;",["^T",[null,"^8<"]]]],"^7",174,"^9",174,"^81",1,"^8>",true,"^85",["^1V",[[],["^8U"]]],"^88","Unregisters event handlers (presumably registered previously via the use of `reg-event-db` or `reg-event-fx`).\n\n  When called with no args, it will unregister all currently registered event handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  event handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration."],"~$->interceptor",["^ ","^7X",null,"^5",["^ ","^7Y","Writing Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",20,"^7Z",["^ ","^7[",true,"^80",0,"^81",0,"^82",[["^1V",[["^ ","^1X","~$m","~:keys",["^8U","~$before","~$after"]]]]],"^85",["^1V",[["~$&",["^ ","^1X","~$m","^99",["^8U","^9:","^9;"]]]]],"^86",["^1V",[null]]],"^8",7,"^7",829,"^9",829,"^85",["^1V",["^87",["^1V",[["~$&",["^ ","^1X","~$m","^99",["^8U","^9:","^9;"]]]]]]],"^88","A utility function for creating interceptors.\n\n  Accepts three optional, named arguments:\n\n     - `:id` - an id for the interceptor (decorative only)\n     - `:before` - the interceptor's before function\n     - `:after`  - the interceptor's after function\n\n  Example use:\n\n      #!clj\n      (def my-interceptor\n        (->interceptor\n         :id     :my-interceptor\n         :before (fn [context]\n                   ... modifies and returns `context`)\n         :after  (fn [context]\n                   ... modifies and returns `context`)))\n\n  Notes:\n\n    - `:before` functions modify and return their `context` argument. Sometimes they\n      only side effect, in which case, they'll perform the side effect and return\n      `context` unchanged.\n    - `:before` functions often modify the `:coeffects` map within `context` and,\n      if they do, then they should use the utility functions `get-coeffect` and\n      `assoc-coeffect`.\n    - `:after` functions modify and return their `context` argument. Sometimes they\n      only side effect, in which case, they'll perform the side effect and return\n      `context` unchanged.\n    - `:after` functions often modify the `:effects` map within `context` and,\n      if they do, then they should use the utility functions `get-effect`\n      and `assoc-effect`"],"^U","^2J","^7Y","Writing Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",20,"^7Z",["^ ","^7[",true,"^80",0,"^81",0,"^82",[["^1V",[["^ ","^1X","~$m","^99",["^8U","^9:","^9;"]]]]],"^85",["^1V",[["~$&",["^ ","^1X","~$m","^99",["^8U","^9:","^9;"]]]]],"^86",["^1V",[null]]],"^82",[["^1V",[["^ ","^1X","~$m","^99",["^8U","^9:","^9;"]]]]],"^89",null,"^80",0,"^86",["^1V",[null]],"^8",1,"^7[",true,"^8:",[["^ ","^80",0,"^7[",true,"^8;","^8<"]],"^7",829,"^8=","^8<","^9",829,"^81",0,"^8>",true,"^85",["^1V",[["~$&",["^ ","^1X","~$m","^99",["^8U","^9:","^9;"]]]]],"^88","A utility function for creating interceptors.\n\n  Accepts three optional, named arguments:\n\n     - `:id` - an id for the interceptor (decorative only)\n     - `:before` - the interceptor's before function\n     - `:after`  - the interceptor's after function\n\n  Example use:\n\n      #!clj\n      (def my-interceptor\n        (->interceptor\n         :id     :my-interceptor\n         :before (fn [context]\n                   ... modifies and returns `context`)\n         :after  (fn [context]\n                   ... modifies and returns `context`)))\n\n  Notes:\n\n    - `:before` functions modify and return their `context` argument. Sometimes they\n      only side effect, in which case, they'll perform the side effect and return\n      `context` unchanged.\n    - `:before` functions often modify the `:coeffects` map within `context` and,\n      if they do, then they should use the utility functions `get-coeffect` and\n      `assoc-coeffect`.\n    - `:after` functions modify and return their `context` argument. Sometimes they\n      only side effect, in which case, they'll perform the side effect and return\n      `context` unchanged.\n    - `:after` functions often modify the `:effects` map within `context` and,\n      if they do, then they should use the utility functions `get-effect`\n      and `assoc-effect`"],"~$set-loggers!",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",931,"^8",7,"^9",931,"^:",19,"^85",["^1V",["^87",["^1V",[["~$new-loggers"]]]]],"^88","re-frame outputs warnings and errors via the API function `console`\n   which, by default, delegates to `js/console`'s default implementation for\n  `log`, `error`, `warn`, `debug`, `group` and `groupEnd`. But, using this function,\n   you can override that behaviour with your own functions.\n\n  The argument `new-loggers` should be a map containing a subset of they keys\n  for the standard `loggers`, namely  `:log` `:error` `:warn` `:debug` `:group`\n  or `:groupEnd`.\n\n  Example Usage:\n\n      #!clj\n      (defn my-logger      ;; my alternative logging function\n        [& args]\n        (post-it-somewhere (apply str args)))\n\n      ;; now install my alternative loggers\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/set-loggers!  {:warn my-logger :log my-logger})\n   ","^7Y","Logging"],"^U","^2K","^7Y","Logging","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",19,"^82",["^1V",[["^9="]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",931,"^8=",["^T",[null,"^8<"]],"^9",931,"^81",1,"^8>",true,"^85",["^1V",["^87",["^1V",[["^9="]]]]],"^88","re-frame outputs warnings and errors via the API function `console`\n   which, by default, delegates to `js/console`'s default implementation for\n  `log`, `error`, `warn`, `debug`, `group` and `groupEnd`. But, using this function,\n   you can override that behaviour with your own functions.\n\n  The argument `new-loggers` should be a map containing a subset of they keys\n  for the standard `loggers`, namely  `:log` `:error` `:warn` `:debug` `:group`\n  or `:groupEnd`.\n\n  Example Usage:\n\n      #!clj\n      (defn my-logger      ;; my alternative logging function\n        [& args]\n        (post-it-somewhere (apply str args)))\n\n      ;; now install my alternative loggers\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/set-loggers!  {:warn my-logger :log my-logger})\n   "],"~$inject-cofx",["^ ","^7X",null,"^5",["^ ","^7Y","Coeffects","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",18,"^7Z",["^ ","^7[",false,"^80",2,"^81",2,"^82",[["^8U"],["^8U","^8O"]],"^85",["^1V",[["^8U"],["^8U","^8O"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",509,"^9",509,"^85",["^1V",["^87",["^1V",[["^8U"],["^8U","^8O"]]]]],"^88","Given an `id`, and an optional, arbitrary `value`, returns an interceptor\n  whose `:before` adds to the `:coeffects` (map) by calling a pre-registered\n  'coeffect handler' identified by the `id`.\n\n  The previous association of a `coeffect handler` with an `id` will have\n  happened via a call to `day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-cofx` - generally on program startup.\n\n  Within the created interceptor, this 'looked up' `coeffect handler` will\n  be called (within the `:before`) with two arguments:\n\n  - the current value of `:coeffects`\n  - optionally, the originally supplied arbitrary `value`\n\n  This `coeffect handler` is expected to modify and return its first, `coeffects` argument.\n\n  **Example of `inject-cofx` and `reg-cofx` working together**\n\n\n  First - Early in app startup, you register a `coeffect handler` for `:datetime`:\n\n      #!clj\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-cofx\n        :datetime                        ;; usage  (inject-cofx :datetime)\n        (fn coeffect-handler\n          [coeffect]\n          (assoc coeffect :now (js/Date.))))   ;; modify and return first arg\n\n  Second - Later, add an interceptor to an -fx event handler, using `inject-cofx`:\n\n      #!clj\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-fx            ;; when registering an event handler\n        :event-id\n        [ ... (inject-cofx :datetime) ... ]  ;; <-- create an injecting interceptor\n        (fn event-handler\n          [coeffect event]\n            ;;... in here can access (:now coeffect) to obtain current datetime ...\n          )))\n\n  **Background**\n\n  `coeffects` are the input resources required by an event handler\n  to perform its job. The two most obvious ones are `db` and `event`.\n  But sometimes an event handler might need other resources.\n\n  Perhaps an event handler needs a random number or a GUID or the current\n  datetime. Perhaps it needs access to a DataScript database connection.\n\n  If an event handler directly accesses these resources, it stops being\n  pure and, consequently, it becomes harder to test, etc. So we don't\n  want that.\n\n  Instead, the interceptor created by this function is a way to 'inject'\n  'necessary resources' into the `:coeffects` (map) subsequently given\n  to the event handler at call time.\n\n  See also `reg-cofx`\n  "],"^U","^2M","^7Y","Coeffects","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",18,"^7Z",["^ ","^7[",false,"^80",2,"^81",2,"^82",[["^8U"],["^8U","^8O"]],"^85",["^1V",[["^8U"],["^8U","^8O"]]],"^86",["^1V",[null,null]]],"^82",[["^8U"],["^8U","^8O"]],"^89",null,"^80",2,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",1,"^7[",false,"^8;","^8@"],["^ ","^80",2,"^7[",false,"^8;","^8@"]],"^7",509,"^9",509,"^81",2,"^8>",true,"^85",["^1V",[["^8U"],["^8U","^8O"]]],"^88","Given an `id`, and an optional, arbitrary `value`, returns an interceptor\n  whose `:before` adds to the `:coeffects` (map) by calling a pre-registered\n  'coeffect handler' identified by the `id`.\n\n  The previous association of a `coeffect handler` with an `id` will have\n  happened via a call to `day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-cofx` - generally on program startup.\n\n  Within the created interceptor, this 'looked up' `coeffect handler` will\n  be called (within the `:before`) with two arguments:\n\n  - the current value of `:coeffects`\n  - optionally, the originally supplied arbitrary `value`\n\n  This `coeffect handler` is expected to modify and return its first, `coeffects` argument.\n\n  **Example of `inject-cofx` and `reg-cofx` working together**\n\n\n  First - Early in app startup, you register a `coeffect handler` for `:datetime`:\n\n      #!clj\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-cofx\n        :datetime                        ;; usage  (inject-cofx :datetime)\n        (fn coeffect-handler\n          [coeffect]\n          (assoc coeffect :now (js/Date.))))   ;; modify and return first arg\n\n  Second - Later, add an interceptor to an -fx event handler, using `inject-cofx`:\n\n      #!clj\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-fx            ;; when registering an event handler\n        :event-id\n        [ ... (inject-cofx :datetime) ... ]  ;; <-- create an injecting interceptor\n        (fn event-handler\n          [coeffect event]\n            ;;... in here can access (:now coeffect) to obtain current datetime ...\n          )))\n\n  **Background**\n\n  `coeffects` are the input resources required by an event handler\n  to perform its job. The two most obvious ones are `db` and `event`.\n  But sometimes an event handler might need other resources.\n\n  Perhaps an event handler needs a random number or a GUID or the current\n  datetime. Perhaps it needs access to a DataScript database connection.\n\n  If an event handler directly accesses these resources, it stops being\n  pure and, consequently, it becomes harder to test, etc. So we don't\n  want that.\n\n  Instead, the interceptor created by this function is a way to 'inject'\n  'necessary resources' into the `:coeffects` (map) subsequently given\n  to the event handler at call time.\n\n  See also `reg-cofx`\n  "],"~$clear-global-interceptor",["^ ","^7X",null,"^5",["^ ","^7Y","Global Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",31,"^7Z",["^ ","^7[",false,"^80",1,"^81",1,"^82",[[],["^8U"]],"^85",["^1V",[[],["^8U"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",814,"^9",814,"^85",["^1V",["^87",["^1V",[[],["^8U"]]]]],"^88","Unregisters global interceptors (presumably registered previously via the use of `reg-global-interceptor`).\n\n  When called with no args, it will unregister all currently registered global interceptors.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  global interceptors, it will unregister the associated interceptor. Will produce a warning to\n  console if it finds no matching registration."],"^U","^2U","^7Y","Global Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",31,"^7Z",["^ ","^7[",false,"^80",1,"^81",1,"^82",[[],["^8U"]],"^85",["^1V",[[],["^8U"]]],"^86",["^1V",[null,null]]],"^82",[[],["^8U"]],"^89",null,"^80",1,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",0,"^7[",false,"^8;",["^T",[null,"^8<"]]],["^ ","^80",1,"^7[",false,"^8;",["^T",[null,"^8<"]]]],"^7",814,"^9",814,"^81",1,"^8>",true,"^85",["^1V",[[],["^8U"]]],"^88","Unregisters global interceptors (presumably registered previously via the use of `reg-global-interceptor`).\n\n  When called with no args, it will unregister all currently registered global interceptors.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  global interceptors, it will unregister the associated interceptor. Will produce a warning to\n  console if it finds no matching registration."],"~$get-coeffect",["^ ","^7X",null,"^5",["^ ","^7Y","Writing Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",19,"^7Z",["^ ","^7[",false,"^80",3,"^81",3,"^82",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]],"^85",["^1V",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]]],"^86",["^1V",[null,null,null]]],"^8",7,"^7",867,"^9",867,"^85",["^1V",["^87",["^1V",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]]]]],"^88","A utility function, typically used when writing an interceptor's `:before` function.\n\n   When called with one argument, it returns the `:coeffects` map from with that `context`.\n\n   When called with two or three arguments, behaves like `clojure.core/get` and\n   returns the value mapped to `key` in the `:coeffects` map within `context`, `not-found` or\n   `nil` if `key` is not present."],"^U","^4F","^7Y","Writing Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",19,"^7Z",["^ ","^7[",false,"^80",3,"^81",3,"^82",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]],"^85",["^1V",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]]],"^86",["^1V",[null,null,null]]],"^82",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]],"^89",null,"^80",3,"^86",["^1V",[null,null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",1,"^7[",false,"^8;","^8<"],["^ ","^80",2,"^7[",false,"^8;",["^T",[null,"^8<"]]],["^ ","^80",3,"^7[",false,"^8;",["^T",[null,"^8<"]]]],"^7",867,"^9",867,"^81",3,"^8>",true,"^85",["^1V",[["^8M"],["^8M","^8N"],["^8M","^8N","^90"]]],"^88","A utility function, typically used when writing an interceptor's `:before` function.\n\n   When called with one argument, it returns the `:coeffects` map from with that `context`.\n\n   When called with two or three arguments, behaves like `clojure.core/get` and\n   returns the value mapped to `key` in the `:coeffects` map within `context`, `not-found` or\n   `nil` if `key` is not present."],"~$debug",["^ ","^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",590,"^8",42,"^9",590,"^:",47,"^7Y","Interceptors"],"^U","^2E","^7Y","Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",47,"^8",1,"^7",590,"^9",590,"^8;","^8@","^88","An interceptor which logs/instruments an event handler's actions to\n  `js/console.debug`. See examples/todomvc/src/events.cljs for use.\n\n  Output includes:\n\n    1. the event vector\n    2. a `clojure.data/diff` of db, before vs after, which shows\n       the changes caused by the event handler. To understand the output,\n       you should understand:\n       <a href=\"https://clojuredocs.org/clojure.data/diff\" target=\"_blank\">https://clojuredocs.org/clojure.data/diff</a>.\n\n  You'd typically include this interceptor after (to the right of) any\n  `path` interceptor.\n\n  Warning:  calling `clojure.data/diff` on large, complex data structures\n  can be slow. So, you won't want this interceptor present in production\n  code. So, you should condition it out like this:\n\n      #!clj\n      (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-event-db\n        :evt-id\n        [(when ^boolean goog.DEBUG day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/debug)]  ;; <-- conditional\n        (fn [db v]\n           ...))\n\n  To make this code fragment work, you'll also have to set `goog.DEBUG` to\n  `false` in your production builds. For an example, look in `project.clj` of /examples/todomvc.\n  "],"~$assoc-effect",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",907,"^8",7,"^9",907,"^:",19,"^85",["^1V",["^87",["^1V",[["^8M","^8N","^8O"]]]]],"^88","A utility function, typically used when writing an interceptor's `:after` function.\n\n   Adds or updates a key/value pair in the `:effects` map within `context`. ","^7Y","Writing Interceptors"],"^U","^4G","^7Y","Writing Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",19,"^82",["^1V",[["^8M","^8N","^8O"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",907,"^8=",["^T",["^8P","^8<"]],"^9",907,"^81",3,"^8>",true,"^85",["^1V",["^87",["^1V",[["^8M","^8N","^8O"]]]]],"^88","A utility function, typically used when writing an interceptor's `:after` function.\n\n   Adds or updates a key/value pair in the `:effects` map within `context`. "],"~$enqueue",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",915,"^8",7,"^9",915,"^:",14,"^85",["^1V",["^87",["^1V",[["^8M","^93"]]]]],"^88","A utility function, used when writing an interceptor's `:before` function.\n\n  Adds the given collection of `interceptors` to those already in `context's`\n  execution `:queue`. It returns the updated `context`.\n\n  So, it provides a way for one Interceptor to add more interceptors to the\n  currently executing interceptor chain.\n  ","^7Y","Writing Interceptors"],"^U","^2D","^7Y","Writing Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",14,"^82",["^1V",[["^8M","^93"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",915,"^8=",["^T",["^8P","^8<"]],"^9",915,"^81",2,"^8>",true,"^85",["^1V",["^87",["^1V",[["^8M","^93"]]]]],"^88","A utility function, used when writing an interceptor's `:before` function.\n\n  Adds the given collection of `interceptors` to those already in `context's`\n  execution `:queue`. It returns the updated `context`.\n\n  So, it provides a way for one Interceptor to add more interceptors to the\n  currently executing interceptor chain.\n  "],"~$clear-cofx",["^ ","^7X",null,"^5",["^ ","^7Y","Coeffects","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",17,"^7Z",["^ ","^7[",false,"^80",1,"^81",1,"^82",[[],["^8U"]],"^85",["^1V",[[],["^8U"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",573,"^9",573,"^85",["^1V",["^87",["^1V",[[],["^8U"]]]]],"^88","Unregisters coeffect handlers (presumably registered previously via the use of `reg-cofx`).\n\n  When called with no args, it will unregister all currently registered coeffect handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  coeffect handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration."],"^U","^2W","^7Y","Coeffects","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",17,"^7Z",["^ ","^7[",false,"^80",1,"^81",1,"^82",[[],["^8U"]],"^85",["^1V",[[],["^8U"]]],"^86",["^1V",[null,null]]],"^82",[[],["^8U"]],"^89",null,"^80",1,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",0,"^7[",false,"^8;",["^T",[null,"^8<"]]],["^ ","^80",1,"^7[",false,"^8;",["^T",[null,"^8<"]]]],"^7",573,"^9",573,"^81",1,"^8>",true,"^85",["^1V",[[],["^8U"]]],"^88","Unregisters coeffect handlers (presumably registered previously via the use of `reg-cofx`).\n\n  When called with no args, it will unregister all currently registered coeffect handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  coeffect handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration."],"~$reg-event-ctx",["^ ","^7X",null,"^5",["^ ","^7Y","Event Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",20,"^7Z",["^ ","^7[",false,"^80",3,"^81",3,"^82",[["^8U","^92"],["^8U","^93","^92"]],"^85",["^1V",[["^8U","^92"],["^8U","^93","^92"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",143,"^9",143,"^85",["^1V",["^87",["^1V",[["^8U","^92"],["^8U","^93","^92"]]]]],"^88","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain:\n\n    - `id` is typically a namespaced keyword  (but can be anything)\n    - `handler` is a function: context-map -> context-map\n\n  You can explore what is provided in `context` [here](https://day8.github.io/re-frame/Interceptors/#what-is-context).\n\n  Example Usage:\n\n      #!clj\n      (reg-event-ctx\n        :event-id\n        (fn [{:keys [coeffects] :as context}]\n          (let [initial  {:db     (:db coeffects)\n                          :event  (:event coeffects)\n                          :fx     []}\n                result   (-> initial\n                           function1\n                           function2\n                           function3)\n                effects  (selectkeys result [:db :fx])]\n             (assoc context :effects effects))))\n  "],"^U","^2X","^7Y","Event Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",20,"^7Z",["^ ","^7[",false,"^80",3,"^81",3,"^82",[["^8U","^92"],["^8U","^93","^92"]],"^85",["^1V",[["^8U","^92"],["^8U","^93","^92"]]],"^86",["^1V",[null,null]]],"^82",[["^8U","^92"],["^8U","^93","^92"]],"^89",null,"^80",3,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",2,"^7[",false,"^8;","^8<"],["^ ","^80",3,"^7[",false,"^8;","^8<"]],"^7",143,"^9",143,"^81",3,"^8>",true,"^85",["^1V",[["^8U","^92"],["^8U","^93","^92"]]],"^88","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain:\n\n    - `id` is typically a namespaced keyword  (but can be anything)\n    - `handler` is a function: context-map -> context-map\n\n  You can explore what is provided in `context` [here](https://day8.github.io/re-frame/Interceptors/#what-is-context).\n\n  Example Usage:\n\n      #!clj\n      (reg-event-ctx\n        :event-id\n        (fn [{:keys [coeffects] :as context}]\n          (let [initial  {:db     (:db coeffects)\n                          :event  (:event coeffects)\n                          :fx     []}\n                result   (-> initial\n                           function1\n                           function2\n                           function3)\n                effects  (selectkeys result [:db :fx])]\n             (assoc context :effects effects))))\n  "],"~$reg-fx",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",450,"^8",7,"^9",450,"^:",13,"^85",["^1V",["^87",["^1V",[["^8U","^92"]]]]],"^88","Register the given effect `handler` for the given `id`:\n\n    - `id` is keyword, often namespaced.\n    - `handler` is a side-effecting function which takes a single argument and whose return\n      value is ignored.\n\n  To use, first, associate `:effect2` with a handler:\n\n      #!clj\n      (reg-fx\n         :effect2\n         (fn [value]\n            ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map:\n\n      #!clj\n      {:effect2  [1 2]}\n\n  then the `handler` `fn` we registered previously, using `reg-fx`, will be\n  called with an argument of `[1 2]`.\n  ","^7Y","Effect Handlers"],"^U","^2L","^7Y","Effect Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",13,"^82",["^1V",[["^8U","^92"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",450,"^8=","^8<","^9",450,"^81",2,"^8>",true,"^85",["^1V",["^87",["^1V",[["^8U","^92"]]]]],"^88","Register the given effect `handler` for the given `id`:\n\n    - `id` is keyword, often namespaced.\n    - `handler` is a side-effecting function which takes a single argument and whose return\n      value is ignored.\n\n  To use, first, associate `:effect2` with a handler:\n\n      #!clj\n      (reg-fx\n         :effect2\n         (fn [value]\n            ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map:\n\n      #!clj\n      {:effect2  [1 2]}\n\n  then the `handler` `fn` we registered previously, using `reg-fx`, will be\n  called with an argument of `[1 2]`.\n  "],"~$trim-v",["^ ","^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",731,"^8",42,"^9",731,"^:",48,"^7Y","Interceptors"],"^U","^2A","^7Y","Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",48,"^8",1,"^7",731,"^9",731,"^8;","^8@","^88","An interceptor which removes the first element of the event vector,\n  before it is supplied to the event handler, allowing you to write more\n   aesthetically pleasing event handlers. No leading underscore on the event-v!\n\n  Should you want the full original event, it can be found in `coeffects` under\n  the key `:original-event`.\n\n  Your event handlers will look like this:\n\n      #!clj\n      (reg-event-db\n        :event-id\n        [... trim-v ...]    ;; <-- added to the interceptors\n        (fn [db [x y z]]    ;; <-- instead of [_ x y z]\n          ...)\n    "],"~$clear-sub",["^ ","^7X",null,"^5",["^ ","^7Y","Subscriptions","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",16,"^7Z",["^ ","^7[",false,"^80",1,"^81",1,"^82",[[],["^8F"]],"^85",["^1V",[[],["^8F"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",406,"^9",406,"^85",["^1V",["^87",["^1V",[[],["^8F"]]]]],"^88","Unregisters subscription handlers (presumably registered previously via the use of `reg-sub`).\n\n  When called with no args, it will unregister all currently registered subscription handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  subscription handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration.\n\n  NOTE: Depending on the usecase, it may be necessary to call `clear-subscription-cache!` afterwards"],"^U","^3D","^7Y","Subscriptions","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",16,"^7Z",["^ ","^7[",false,"^80",1,"^81",1,"^82",[[],["^8F"]],"^85",["^1V",[[],["^8F"]]],"^86",["^1V",[null,null]]],"^82",[[],["^8F"]],"^89",null,"^80",1,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",0,"^7[",false,"^8;",["^T",[null,"^8<"]]],["^ ","^80",1,"^7[",false,"^8;",["^T",[null,"^8<"]]]],"^7",406,"^9",406,"^81",1,"^8>",true,"^85",["^1V",[[],["^8F"]]],"^88","Unregisters subscription handlers (presumably registered previously via the use of `reg-sub`).\n\n  When called with no args, it will unregister all currently registered subscription handlers.\n\n  When given one arg, assumed to be the `id` of a previously registered\n  subscription handler, it will unregister the associated handler. Will produce a warning to\n  console if it finds no matching registration.\n\n  NOTE: Depending on the usecase, it may be necessary to call `clear-subscription-cache!` afterwards"],"~$dispatch",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",23,"^8",7,"^9",23,"^:",15,"^85",["^1V",["^87",["^1V",[["^95"]]]]],"^88","Queue `event` for processing (handling).\n\n  `event` is a vector and the first element is typically a keyword\n  which identifies the kind of event.\n\n  The event will be added to a FIFO processing queue, so event\n  handling does not happen immediately. It will happen 'very soon'\n  bit not now. And if the queue already contains events, they\n  will be processed first.\n\n  Usage:\n\n      #!clj\n      (dispatch [:order \"pizza\" {:supreme 2 :meatlovers 1 :veg 1}])\n  ","^7Y","Dispatching Events"],"^U","^38","^7Y","Dispatching Events","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",15,"^82",["^1V",[["^95"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",23,"^8=","^96","^9",23,"^81",1,"^8>",true,"^85",["^1V",["^87",["^1V",[["^95"]]]]],"^88","Queue `event` for processing (handling).\n\n  `event` is a vector and the first element is typically a keyword\n  which identifies the kind of event.\n\n  The event will be added to a FIFO processing queue, so event\n  handling does not happen immediately. It will happen 'very soon'\n  bit not now. And if the queue already contains events, they\n  will be processed first.\n\n  Usage:\n\n      #!clj\n      (dispatch [:order \"pizza\" {:supreme 2 :meatlovers 1 :veg 1}])\n  "],"^9;",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",750,"^8",7,"^9",750,"^:",12,"^85",["^1V",["^87",["^1V",[["~$f"]]]]],"^88","Returns an interceptor which runs the given function `f` in the `:after`\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `:effects` value for `:db`\n  (or the `:coeffect` value of `:db` if no `:db` effect is returned) and the event.\n  Its return value is ignored, so `f` can only side-effect.\n\n  An example of use can be seen in the re-frame github repo in `/examples/todomvc/events.cljs`:\n\n     - `f` runs schema validation (reporting any errors found).\n     - `f` writes to localstorage.","^7Y","Interceptors"],"^U","^3:","^7Y","Interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",12,"^82",["^1V",[["~$f"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",750,"^8=","^8@","^9",750,"^81",1,"^8>",true,"^85",["^1V",["^87",["^1V",[["~$f"]]]]],"^88","Returns an interceptor which runs the given function `f` in the `:after`\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `:effects` value for `:db`\n  (or the `:coeffect` value of `:db` if no `:db` effect is returned) and the event.\n  Its return value is ignored, so `f` can only side-effect.\n\n  An example of use can be seen in the re-frame github repo in `/examples/todomvc/events.cljs`:\n\n     - `f` runs schema validation (reporting any errors found).\n     - `f` writes to localstorage."],"~$add-post-event-callback",["^ ","^7X",null,"^5",["^ ","^7Y","Miscellaneous","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",30,"^7Z",["^ ","^7[",false,"^80",2,"^81",2,"^82",[["~$f"],["^8U","~$f"]],"^85",["^1V",[["~$f"],["^8U","~$f"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",1015,"^9",1015,"^85",["^1V",["^87",["^1V",[["~$f"],["^8U","~$f"]]]]],"^88","Registers the given function `f` to be called after each event is processed.\n\n   `f` will be called with two arguments:\n\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This facility is useful in advanced cases like:\n\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  `id` is typically a keyword. If it supplied when an `f` is added, it can be\n  subsequently be used to identify it for removal. See `remove-post-event-callback`.\n  "],"^U","^3=","^7Y","Miscellaneous","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",30,"^7Z",["^ ","^7[",false,"^80",2,"^81",2,"^82",[["~$f"],["^8U","~$f"]],"^85",["^1V",[["~$f"],["^8U","~$f"]]],"^86",["^1V",[null,null]]],"^82",[["~$f"],["^8U","~$f"]],"^89",null,"^80",2,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",1,"^7[",false,"^8;","^8<"],["^ ","^80",2,"^7[",false,"^8;","^8<"]],"^7",1015,"^9",1015,"^81",2,"^8>",true,"^85",["^1V",[["~$f"],["^8U","~$f"]]],"^88","Registers the given function `f` to be called after each event is processed.\n\n   `f` will be called with two arguments:\n\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This facility is useful in advanced cases like:\n\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  `id` is typically a keyword. If it supplied when an `f` is added, it can be\n  subsequently be used to identify it for removal. See `remove-post-event-callback`.\n  "],"~$reg-cofx",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",495,"^8",7,"^9",495,"^:",15,"^85",["^1V",["^87",["^1V",[["^8U","^92"]]]]],"^88","Register the given coeffect `handler` for the given `id`, for later use\n  within `inject-cofx`:\n\n    - `id` is keyword, often namespaced.\n    - `handler` is a function which takes either one or two arguements, the first of which is\n       always `coeffects` and which returns an updated `coeffects`.\n\n  See also: `inject-cofx`\n  ","^7Y","Coeffects"],"^U","^33","^7Y","Coeffects","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",15,"^82",["^1V",[["^8U","^92"]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",495,"^8=","^8<","^9",495,"^81",2,"^8>",true,"^85",["^1V",["^87",["^1V",[["^8U","^92"]]]]],"^88","Register the given coeffect `handler` for the given `id`, for later use\n  within `inject-cofx`:\n\n    - `id` is keyword, often namespaced.\n    - `handler` is a function which takes either one or two arguements, the first of which is\n       always `coeffects` and which returns an updated `coeffects`.\n\n  See also: `inject-cofx`\n  "],"~$reg-event-fx",["^ ","^7X",null,"^5",["^ ","^7Y","Event Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",19,"^7Z",["^ ","^7[",false,"^80",3,"^81",3,"^82",[["^8U","^92"],["^8U","^93","^92"]],"^85",["^1V",[["^8U","^92"],["^8U","^93","^92"]]],"^86",["^1V",[null,null]]],"^8",7,"^7",108,"^9",108,"^85",["^1V",["^87",["^1V",[["^8U","^92"],["^8U","^93","^92"]]]]],"^88","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain:\n\n    - `id` is typically a namespaced keyword  (but can be anything)\n    - `handler` is a function: (coeffects-map event-vector) -> effects-map\n    - `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n\n\n  Example Usage:\n\n      #!clj\n      (reg-event-fx\n        :event-id\n        (fn [cofx event]\n          {:db (assoc (:db cofx) :some-key (get event 2))}))   ;; return a map of effects\n\n\n  Or perhaps:\n\n      #!clj\n      (reg-event-fx\n        :namespaced/id           ;; <-- namespaced keywords are often used\n        [one two three]          ;; <-- a seq of interceptors\n        (fn [{:keys [db] :as cofx} [_ arg1 arg2]] ;; destructure both arguments\n          {:db       (assoc db :some-key arg1)          ;; return a map of effects\n           :dispatch [:some-event arg2]}))\n  "],"^U","^3H","^7Y","Event Handlers","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",19,"^7Z",["^ ","^7[",false,"^80",3,"^81",3,"^82",[["^8U","^92"],["^8U","^93","^92"]],"^85",["^1V",[["^8U","^92"],["^8U","^93","^92"]]],"^86",["^1V",[null,null]]],"^82",[["^8U","^92"],["^8U","^93","^92"]],"^89",null,"^80",3,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^8:",[["^ ","^80",2,"^7[",false,"^8;","^8<"],["^ ","^80",3,"^7[",false,"^8;","^8<"]],"^7",108,"^9",108,"^81",3,"^8>",true,"^85",["^1V",[["^8U","^92"],["^8U","^93","^92"]]],"^88","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain:\n\n    - `id` is typically a namespaced keyword  (but can be anything)\n    - `handler` is a function: (coeffects-map event-vector) -> effects-map\n    - `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n\n\n  Example Usage:\n\n      #!clj\n      (reg-event-fx\n        :event-id\n        (fn [cofx event]\n          {:db (assoc (:db cofx) :some-key (get event 2))}))   ;; return a map of effects\n\n\n  Or perhaps:\n\n      #!clj\n      (reg-event-fx\n        :namespaced/id           ;; <-- namespaced keywords are often used\n        [one two three]          ;; <-- a seq of interceptors\n        (fn [{:keys [db] :as cofx} [_ arg1 arg2]] ;; destructure both arguments\n          {:db       (assoc db :some-key arg1)          ;; return a map of effects\n           :dispatch [:some-event arg2]}))\n  "],"~$register-handler",["^ ","^7X",null,"^5",["^ ","^7Y","Deprecated","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",23,"^7Z",["^ ","^7[",true,"^80",0,"^81",0,"^82",[["^1V",["^84"]]],"^85",["^1V",[["~$&","^84"]]],"^86",["^1V",[null]]],"^8",7,"^7",1051,"^8R","0.8.0","^9",1051,"^85",["^1V",["^87",["^1V",[["~$&","^84"]]]]],"^88","Deprecated. Use `reg-event-db` instead."],"^U","^34","^7Y","Deprecated","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",23,"^7Z",["^ ","^7[",true,"^80",0,"^81",0,"^82",[["^1V",["^84"]]],"^85",["^1V",[["~$&","^84"]]],"^86",["^1V",[null]]],"^82",[["^1V",["^84"]]],"^89",null,"^80",0,"^86",["^1V",[null]],"^8",1,"^7[",true,"^8:",[["^ ","^80",0,"^7[",true,"^8;","^8<"]],"^7",1051,"^8R","0.8.0","^8=","^8<","^9",1051,"^81",0,"^8>",true,"^85",["^1V",[["~$&","^84"]]],"^88","Deprecated. Use `reg-event-db` instead."],"~$clear-subscription-cache!",["^ ","^7X",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^7",435,"^8",7,"^9",435,"^:",32,"^85",["^1V",["^87",["^1V",[[]]]]],"^88","Removes all subscriptions from the cache.\n\n  This function can be used at development time or test time. Useful when hot realoding\n  namespaces containing subscription handlers. Also call it after a React/render exception,\n  because React components won't have been cleaned up properly. And this, in turn, means\n  the subscriptions within those components won't have been cleaned up correctly. So this\n  forces the issue.\n  ","^7Y","Subscriptions"],"^U","^3@","^7Y","Subscriptions","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/core.cljc","^:",32,"^82",["^1V",[[]]],"^89",null,"^86",["^1V",[null,null]],"^8",1,"^7[",false,"^7",435,"^8=",["^T",["^8<","^96"]],"^9",435,"^81",0,"^8>",true,"^85",["^1V",["^87",["^1V",[[]]]]],"^88","Removes all subscriptions from the cache.\n\n  This function can be used at development time or test time. Useful when hot realoding\n  namespaces containing subscription handlers. Also call it after a React/render exception,\n  because React components won't have been cleaned up properly. And this, in turn, means\n  the subscriptions within those components won't have been cleaned up correctly. So this\n  forces the issue.\n  "]],"^1T",["^ ","^1<","^1<"],"~:cljs.analyzer/constants",["^ ","^1N",["^T",["~:warn","~:after","~:id","~:before"]],"~:order",["^9R","^9S","^9Q","^9P"]],"^1Z",["^ ","^1O",["^T",[]]],"^1[",["^ "],"^20",["^1@","^1<","^1:","^11","^1J","^1;","^17","^15","^1C","^1?","^19","^1F","^1>","^1A","^1I","^13"]],"^Y","^V","~:ns-specs",["^ "],"~:ns-spec-vars",["^T",[]],"~:compiler-options",["^4P",[["^9W","~:static-fns"],true,["^9W","~:shadow-tweaks"],null,["^9W","~:source-map-inline"],null,["^9W","~:elide-asserts"],false,["^9W","~:optimize-constants"],null,["^9W","^25"],null,["^9W","~:external-config"],null,["^9W","~:tooling-config"],null,["^9W","~:emit-constants"],null,["^9W","~:load-tests"],null,["^9W","~:form-size-threshold"],null,["^9W","~:global-goog-object&array"],null,["^9W","~:data-readers"],null,["^9W","~:infer-externs"],"~:auto",["^9W","^27"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^9W","~:fn-invoke-direct"],null,["^9W","~:source-map"],"/dev/null"]]]