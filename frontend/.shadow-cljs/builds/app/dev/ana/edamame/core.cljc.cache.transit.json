["^ ","~:output",["^ ","~:js","goog.provide('edamame.core');\n/**\n * Parses first EDN value from string.\n * \n *   Supported parsing options:\n * \n *   `:deref`: parse forms starting with `@`. If `true`, the resulting\n *   expression will be parsed as `(deref expr)`.\n * \n *   `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n * \n *   `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n * \n *   `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n *   resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n * \n *   `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n *   `re-pattern`.\n * \n *   `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n *   qualified using `:resolve-symbol` which defaults to `identity`:\n *   `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n *   ;;=> (quote user/x)`.\n * \n *   `:var`: parse var literals (`#'foo`). If `true`, the resulting\n *   expression will be parsed as `(var foo)`.\n * \n *   `:all`: when `true`, the above options will be set to `true` unless\n *   explicitly provided.\n * \n *   Supported options for processing reader conditionals:\n * \n *   `:read-cond`: - `:allow` to process reader conditionals, or\n *                `:preserve` to keep all branches\n *   `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n * \n *   `:auto-resolve`: map of alias to namespace symbols for\n *   auto-resolving keywords. Use `:current` as the alias for the current\n *   namespace.\n * \n *   `:readers`: data readers.\n * \n *   `:postprocess`: a function that is called with a map containing\n *   `:obj`, the read value, and `:loc`, the location metadata. This can\n *   be used to handle objects that cannot carry metadata differently. If\n *   this option is provided, attaching location metadata is not\n *   automatically added to the object.\n * \n *   `:location?`: a predicate that is called with the parsed\n *   object. Should return a truthy value to determine if location\n *   information will be added.\n * \n *   Additional arguments to tools.reader may be passed with\n *   `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n *   \n */\nedamame.core.parse_string = (function edamame$core$parse_string(var_args){\nvar G__49719 = arguments.length;\nswitch (G__49719) {\ncase 1:\nreturn edamame.core.parse_string.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn edamame.core.parse_string.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(edamame.core.parse_string.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn edamame.impl.parser.parse_string(s,null);\n}));\n\n(edamame.core.parse_string.cljs$core$IFn$_invoke$arity$2 = (function (s,opts){\nreturn edamame.impl.parser.parse_string(s,opts);\n}));\n\n(edamame.core.parse_string.cljs$lang$maxFixedArity = 2);\n\n/**\n * Like parse-string but parses all values from string and returns them\n *   in a vector.\n */\nedamame.core.parse_string_all = (function edamame$core$parse_string_all(var_args){\nvar G__49725 = arguments.length;\nswitch (G__49725) {\ncase 1:\nreturn edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn edamame.impl.parser.parse_string_all(s,null);\n}));\n\n(edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$2 = (function (s,opts){\nreturn edamame.impl.parser.parse_string_all(s,opts);\n}));\n\n(edamame.core.parse_string_all.cljs$lang$maxFixedArity = 2);\n\n/**\n * Coerces x into indexing pushback-reader to be used with\n *   parse-next. Accepts: string or java.io.Reader.\n */\nedamame.core.reader = (function edamame$core$reader(x){\nreturn edamame.impl.parser.reader(x);\n});\n/**\n * Coerces x into source-logging-reader to be used with\n *   parse-next. Accepts: string or java.io.Reader.\n */\nedamame.core.source_reader = (function edamame$core$source_reader(x){\nreturn edamame.impl.parser.source_logging_reader(x);\n});\nedamame.core.get_line_number = (function edamame$core$get_line_number(reader){\nreturn edamame.impl.parser.get_line_number(reader);\n});\nedamame.core.get_column_number = (function edamame$core$get_column_number(reader){\nreturn edamame.impl.parser.get_column_number(reader);\n});\nedamame.core.normalize_opts = (function edamame$core$normalize_opts(opts){\nreturn edamame.impl.parser.normalize_opts(opts);\n});\n/**\n * Parses next form from reader. Accepts same opts as parse-string, must\n *   be normalized with normalize-opts first.\n */\nedamame.core.parse_next = (function edamame$core$parse_next(var_args){\nvar G__49728 = arguments.length;\nswitch (G__49728) {\ncase 1:\nreturn edamame.core.parse_next.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn edamame.core.parse_next.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(edamame.core.parse_next.cljs$core$IFn$_invoke$arity$1 = (function (reader){\nreturn edamame.core.parse_next.cljs$core$IFn$_invoke$arity$2(reader,edamame.impl.parser.normalize_opts(cljs.core.PersistentArrayMap.EMPTY));\n}));\n\n(edamame.core.parse_next.cljs$core$IFn$_invoke$arity$2 = (function (reader,opts){\nvar v = edamame.impl.parser.parse_next.cljs$core$IFn$_invoke$arity$2(opts,reader);\nif((edamame.impl.parser.eof === v)){\nvar or__5045__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(\"edamame.core\",\"eof\",\"edamame.core/eof\",1855384188);\n}\n} else {\nreturn v;\n}\n}));\n\n(edamame.core.parse_next.cljs$lang$maxFixedArity = 2);\n\n/**\n * Returns true if obj can carry metadata.\n */\nedamame.core.iobj_QMARK_ = (function edamame$core$iobj_QMARK_(obj){\nif((!((obj == null)))){\nif((((obj.cljs$lang$protocol_mask$partition0$ & (262144))) || ((cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IWithMeta$)))){\nreturn true;\n} else {\nif((!obj.cljs$lang$protocol_mask$partition0$)){\nreturn cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta,obj);\n} else {\nreturn false;\n}\n}\n} else {\nreturn cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta,obj);\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","edamame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",17],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$edamame.core","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","^H","^I","~$rt","^I","~$edamame.impl.parser","^11","~$p","^11","~$cljs.core","^12","~$goog","^13","^I","^I"],"~:seen",["^T",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^12","^12"],"~:form",["~#list",["~$ns","^V",["^19",["^15",["^H","~:as","^10"],["^11","^1;","~$p"]]]]],"~:flags",["^ ","^15",["^T",[]]],"~:js-deps",["^ "],"~:deps",["^13","^12","^I","^11"]],"^Y","^V","~:resource-id",["~:shadow.build.classpath/resource","edamame/core.cljc"],"~:compiled-at",1666857670358,"^W",["^ ","^H","^I","^10","^I","^11","^11","~$p","^11","^12","^12","^13","^13","^I","^I"],"~:resource-name","edamame/core.cljc","~:warnings",[],"~:source","(ns edamame.core\n  (:require\n   [clojure.tools.reader.reader-types :as rt]\n   [edamame.impl.parser :as p]))\n\n(defn parse-string\n  \"Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\\\"foo\\\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \\\"`x\\\" {:syntax-quote {:resolve-symbol #(symbol \\\"user\\\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  `:postprocess`: a function that is called with a map containing\n  `:obj`, the read value, and `:loc`, the location metadata. This can\n  be used to handle objects that cannot carry metadata differently. If\n  this option is provided, attaching location metadata is not\n  automatically added to the object.\n\n  `:location?`: a predicate that is called with the parsed\n  object. Should return a truthy value to determine if location\n  information will be added.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n  \"\n  ([s]\n   (p/parse-string s nil))\n  ([s opts]\n   (p/parse-string s opts)))\n\n(defn parse-string-all\n  \"Like parse-string but parses all values from string and returns them\n  in a vector.\"\n  ([s]\n   (p/parse-string-all s nil))\n  ([s opts]\n   (p/parse-string-all s opts)))\n\n(defn reader\n  \"Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader.\"\n  [x]\n  (p/reader x))\n\n(defn source-reader\n  \"Coerces x into source-logging-reader to be used with\n  parse-next. Accepts: string or java.io.Reader.\"\n  [x]\n  (p/source-logging-reader x))\n\n(defn get-line-number [reader]\n  (p/get-line-number reader))\n\n(defn get-column-number [reader]\n  (p/get-column-number reader))\n\n(defn normalize-opts [opts]\n  (p/normalize-opts opts))\n\n(defn parse-next\n  \"Parses next form from reader. Accepts same opts as parse-string, must\n  be normalized with normalize-opts first.\"\n  ([reader] (parse-next reader (p/normalize-opts {})))\n  ([reader opts]\n   (let [v (p/parse-next opts reader)]\n     (if (identical? p/eof v)\n       (or (get opts :eof)\n           ::eof)\n       v))))\n\n(defn iobj?\n  \"Returns true if obj can carry metadata.\"\n  [obj]\n  #?(:clj\n     (instance? clojure.lang.IObj obj)\n     :cljs (satisfies? IWithMeta obj)))\n\n;;;; Scratch\n\n(comment\n  (parse-string \"(1 2 3 #_4)\"))\n","~:reader-features",["^T",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAKA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAAA,oCAAAA,hEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMD,qEAsDFE;AAtDJ,AAuDG,0CAAA,nCAACC,iCAAeD;;;AAvDnB,CAAA,0DAAA,1DAAMF,qEAwDFE,EAAEE;AAxDN,AAyDG,OAACD,iCAAeD,EAAEE;;;AAzDrB,CAAA,oDAAA,pDAAMJ;;AAAN,AA2DA,AAAA;;;;gCAAA,wCAAAF,xEAAMQ;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAL,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8DAAA,9DAAMK,yEAGFJ;AAHJ,AAIG,8CAAA,vCAACK,qCAAmBL;;;AAJvB,CAAA,8DAAA,9DAAMI,yEAKFJ,EAAEE;AALN,AAMG,OAACG,qCAAmBL,EAAEE;;;AANzB,CAAA,wDAAA,xDAAME;;AAAN,AAQA;;;;sBAAA,tBAAME,oDAGHC;AAHH,AAIE,OAACC,2BAASD;;AAEZ;;;;6BAAA,7BAAME,kEAGHF;AAHH,AAIE,OAACG,0CAAwBH;;AAE3B,+BAAA,/BAAMI,sEAAiBC;AAAvB,AACE,OAACC,oCAAkBD;;AAErB,iCAAA,jCAAME,0EAAmBF;AAAzB,AACE,OAACG,sCAAoBH;;AAEvB,8BAAA,9BAAMI,oEAAgBd;AAAtB,AACE,OAACe,mCAAiBf;;AAEpB,AAAA;;;;0BAAA,kCAAAN,5DAAMuB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAMoB,mEAGFP;AAHJ,AAGY,OAACQ,sDAAWR,OAAO,mCAAA,nCAACK;;;AAHhC,CAAA,wDAAA,xDAAME,mEAIFP,OAAOV;AAJX,AAKG,IAAMmB,IAAE,AAACC,6DAAapB,KAAKU;AAA3B,AACE,GAAI,CAAYW,4BAAMF;AACpB,IAAAG,mBAAI,iDAAA,jDAACC,4CAAIvB;AAAT,AAAA,oBAAAsB;AAAAA;;AAAA;;;AAEAH;;;;AATP,CAAA,kDAAA,lDAAMF;;AAAN,AAWA;;;2BAAA,3BAAMO,8DAEHC;AAFH,AAKW,GAAA,GAAA,QAAA,PAAsBA;AAAtB,GAAA,EAAA,CAAA,0CAAA,eAAA,CAAAC,gCAAA,1FAAsBD,0FAAAA;AAAtB;;AAAA,GAAA,EAAA,AAAsBA;AAAtB,OAAAE,kCAAYC,oBAAUH;;AAAtB;;;;AAAA,OAAAE,kCAAYC,oBAAUH;;;AAIjC","names",["var_args","G__49719","edamame.core/parse-string","js/Error","s","edamame.impl.parser/parse-string","opts","G__49725","edamame.core/parse-string-all","edamame.impl.parser/parse-string-all","edamame.core/reader","x","edamame.impl.parser/reader","edamame.core/source-reader","edamame.impl.parser/source-logging-reader","edamame.core/get-line-number","reader","edamame.impl.parser/get-line-number","edamame.core/get-column-number","edamame.impl.parser/get-column-number","edamame.core/normalize-opts","edamame.impl.parser/normalize-opts","G__49728","edamame.core/parse-next","edamame.core.parse_next","v","edamame.impl.parser.parse_next","edamame.impl.parser/eof","or__5045__auto__","cljs.core.get","edamame.core/iobj?","obj","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta"]],"~:used-vars",["^T",["~$cljs.core/PROTOCOL_SENTINEL","~$edamame.core/get-line-number","~$edamame.core/parse-string","~$edamame.impl.parser/get-column-number","~$edamame.core/iobj?","~$edamame.core/normalize-opts","~$edamame.impl.parser/parse-next","~$edamame.impl.parser/reader","~$edamame.impl.parser/parse-string-all","~$cljs.core/native-satisfies?","~$edamame.impl.parser/eof","~$edamame.core/get-column-number","~$edamame.impl.parser/source-logging-reader","~$cljs.core/get","~$edamame.core/source-reader","~$edamame.impl.parser/get-line-number","~$edamame.impl.parser/parse-string","~$edamame.impl.parser/normalize-opts","~$cljs.core/not","~$edamame.core/parse-next","~$edamame.core/parse-string-all","~$cljs.core/IWithMeta","~$edamame.core/reader","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^1@","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^T",[]],"~:deps-syms",["^13","~$goog.dom.HtmlElement"]]],["^1@","edamame/core.cljc"],["b54bd287c84a2627384be29d09c4652c7631d9fa","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","^I","^11"]]],["^1@","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","~$clojure.string","~$goog.string"]]],["^1@","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1@","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2D"]]],["^1@","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2E"]]],["^1@","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","^E","^I","^?","^C","~$cljs.tools.reader","^2@","~$goog.string.StringBuffer"]]],["^1@","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12"]]],["^1@","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","^I","^?","^C","^E","^2A","^2@","^2M"]]],["^1@","edamame/impl/parser.cljc"],["b54bd287c84a2627384be29d09c4652c7631d9fa","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","^K","^I","~$cljs.tools.reader.impl.inspect","^?","^C","~$cljs.tagged-literals","^2?","~$edamame.impl.read-fn","~$edamame.impl.syntax-quote","^2M"]]],["^1@","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2E"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^1@","edamame/impl/syntax_quote.cljc"],["b54bd287c84a2627384be29d09c4652c7631d9fa","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","^2?"]]],["^1@","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2E","~$goog.reflect"]]],["^1@","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2E","~$goog.fs.blob","^2F","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2H","^2I","^2J","^2K"]]],["^1@","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2J","~$goog.html.SafeUrl","^2K","^2E","^2D"]]],["^1@","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2E","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2U","~$goog.html.SafeStyle","^2W","^2G","~$goog.html.uncheckedconversions","^2J","^2D"]]],["^1@","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2J","^2H","^2I","^2U","^2[","~$goog.html.SafeStyleSheet","^2W","~$goog.dom.TagName","^2G","^2K","^2E","~$goog.labs.userAgent.browser","^2A","^2B","^2D","~$goog.dom.tags","^2V"]]],["^1@","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2B"]]],["^1@","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","cljs/reader.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","^2B","^2L","^K","^2M"]]],["^1@","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1@","cljs/tagged_literals.cljc"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","~$cljs.reader"]]],["^1@","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2A","^2E","~$goog.collections.maps","^2@","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1@","edamame/impl/read_fn.cljc"],["b54bd287c84a2627384be29d09c4652c7631d9fa","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12"]]],["^1@","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",[]]],["^1@","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2A","^2B"]]],["^1@","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","^I","^2?","^2N"]]],["^1@","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","^2@","^2M"]]],["^1@","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","~$goog.dom.safe","^30","^2J","^2D"]]],["^1@","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","~$goog.labs.userAgent","^2D"]]],["^1@","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","^?","^2@","^2M"]]],["^1@","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2E","^2Z","^2U","^2[","^31","^2W","^2G","^2J","^2D","^2H"]]],["^1@","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^12","^E","^I","^?"]]],["^1@","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13"]]],["^1@","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","~$goog.math.Long","~$goog.math.Integer","^2@","^2B","^2A","~$goog.Uri","^2M"]]],["^1@","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2J","^2K","^2V","^2E"]]],["^1@","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2J","^2[","^2K","^2B","^2E","^2D"]]],["^1@","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2S"]]],["^1@","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2E","^2@"]]],["^1@","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2:",["^ ","^2;",null,"^2<",["^T",[]],"^2=",["^13","^2E","^2K"]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1666857280000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","edamame/core.cljc","^7",1,"^8",5,"^9",1,"^:",17],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q"],"^R",null,"^S",["^T",[]],"^U","^V","^W",["^ "],"^Z",null,"^[",["^ ","^H","^I","^10","^I","^11","^11","~$p","^11","^12","^12","^13","^13","^I","^I"],"^14",["^T",["^15"]],"~:shadow/js-access-global",["^T",["Error"]],"^16",null,"~:defs",["^ ","~$parse-string",["^ ","~:protocol-inline",null,"^5",["^ ","^6","edamame/core.cljc","^7",6,"^8",7,"^9",6,"^:",19,"~:arglists",["^19",["~$quote",["^19",[["~$s"],["~$s","~$opts"]]]]],"~:doc","Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  `:postprocess`: a function that is called with a map containing\n  `:obj`, the read value, and `:loc`, the location metadata. This can\n  be used to handle objects that cannot carry metadata differently. If\n  this option is provided, attaching location metadata is not\n  automatically added to the object.\n\n  `:location?`: a predicate that is called with the parsed\n  object. Should return a truthy value to determine if location\n  information will be added.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n  ","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["~$s"],["~$s","^4>"]],"^4<",["^19",[["~$s"],["~$s","^4>"]]],"~:arglists-meta",["^19",[null,null]]]],"^U","^1N","^6","edamame/core.cljc","^:",19,"^4@",["^ ","^4A",false,"^4B",2,"^4C",2,"^4D",[["~$s"],["~$s","^4>"]],"^4<",["^19",[["~$s"],["~$s","^4>"]]],"^4E",["^19",[null,null]]],"^4D",[["~$s"],["~$s","^4>"]],"~:protocol-impl",null,"^4B",2,"^4E",["^19",[null,null]],"^8",1,"^4A",false,"~:methods",[["^ ","^4B",1,"^4A",false,"~:tag",["^T",["~$any","~$clj-nil"]]],["^ ","^4B",2,"^4A",false,"^4H",["^T",["^4I","^4J"]]]],"^7",6,"^9",6,"^4C",2,"~:fn-var",true,"^4<",["^19",[["~$s"],["~$s","^4>"]]],"^4?","Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  `:postprocess`: a function that is called with a map containing\n  `:obj`, the read value, and `:loc`, the location metadata. This can\n  be used to handle objects that cannot carry metadata differently. If\n  this option is provided, attaching location metadata is not\n  automatically added to the object.\n\n  `:location?`: a predicate that is called with the parsed\n  object. Should return a truthy value to determine if location\n  information will be added.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n  "],"~$iobj?",["^ ","^4;",null,"^5",["^ ","^6","edamame/core.cljc","^7",105,"^8",7,"^9",105,"^:",12,"^4<",["^19",["^4=",["^19",[["~$obj"]]]]],"^4?","Returns true if obj can carry metadata."],"^U","^1P","^6","edamame/core.cljc","^:",12,"^4D",["^19",[["^4M"]]],"^4F",null,"^4E",["^19",[null,null]],"^8",1,"^4A",false,"^7",105,"~:ret-tag","~$boolean","^9",105,"^4C",1,"^4K",true,"^4<",["^19",["^4=",["^19",[["^4M"]]]]],"^4?","Returns true if obj can carry metadata."],"~$normalize-opts",["^ ","^4;",null,"^5",["^ ","^6","edamame/core.cljc","^7",91,"^8",7,"^9",91,"^:",21,"^4<",["^19",["^4=",["^19",[["^4>"]]]]]],"^U","^1Q","^6","edamame/core.cljc","^:",21,"^4D",["^19",[["^4>"]]],"^4F",null,"^4E",["^19",[null,null]],"^8",1,"^4A",false,"^7",91,"^4N","~$edamame.impl.parser/Options","^9",91,"^4C",1,"^4K",true,"^4<",["^19",["^4=",["^19",[["^4>"]]]]]],"~$source-reader",["^ ","^4;",null,"^5",["^ ","^6","edamame/core.cljc","^7",79,"^8",7,"^9",79,"^:",20,"^4<",["^19",["^4=",["^19",[["~$x"]]]]],"^4?","Coerces x into source-logging-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"^U","^1Z","^6","edamame/core.cljc","^:",20,"^4D",["^19",[["~$x"]]],"^4F",null,"^4E",["^19",[null,null]],"^8",1,"^4A",false,"^7",79,"^4N","^4I","^9",79,"^4C",1,"^4K",true,"^4<",["^19",["^4=",["^19",[["~$x"]]]]],"^4?","Coerces x into source-logging-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"~$get-column-number",["^ ","^4;",null,"^5",["^ ","^6","edamame/core.cljc","^7",88,"^8",7,"^9",88,"^:",24,"^4<",["^19",["^4=",["^19",[["~$reader"]]]]]],"^U","^1W","^6","edamame/core.cljc","^:",24,"^4D",["^19",[["^4T"]]],"^4F",null,"^4E",["^19",[null,null]],"^8",1,"^4A",false,"^7",88,"^4N","^4I","^9",88,"^4C",1,"^4K",true,"^4<",["^19",["^4=",["^19",[["^4T"]]]]]],"~$parse-next",["^ ","^4;",null,"^5",["^ ","^6","edamame/core.cljc","^7",94,"^8",7,"^9",94,"^:",17,"^4<",["^19",["^4=",["^19",[["^4T"],["^4T","^4>"]]]]],"^4?","Parses next form from reader. Accepts same opts as parse-string, must\n  be normalized with normalize-opts first.","^4@",["^ ","^4A",false,"^4B",2,"^4C",2,"^4D",[["^4T"],["^4T","^4>"]],"^4<",["^19",[["^4T"],["^4T","^4>"]]],"^4E",["^19",[null,null]]]],"^U","^23","^6","edamame/core.cljc","^:",17,"^4@",["^ ","^4A",false,"^4B",2,"^4C",2,"^4D",[["^4T"],["^4T","^4>"]],"^4<",["^19",[["^4T"],["^4T","^4>"]]],"^4E",["^19",[null,null]]],"^4D",[["^4T"],["^4T","^4>"]],"^4F",null,"^4B",2,"^4E",["^19",[null,null]],"^8",1,"^4A",false,"^4G",[["^ ","^4B",1,"^4A",false,"^4H","^4I"],["^ ","^4B",2,"^4A",false,"^4H",["^T",["^4I","~$cljs.core/Keyword"]]]],"^7",94,"^9",94,"^4C",2,"^4K",true,"^4<",["^19",[["^4T"],["^4T","^4>"]]],"^4?","Parses next form from reader. Accepts same opts as parse-string, must\n  be normalized with normalize-opts first."],"~$parse-string-all",["^ ","^4;",null,"^5",["^ ","^6","edamame/core.cljc","^7",65,"^8",7,"^9",65,"^:",23,"^4<",["^19",["^4=",["^19",[["~$s"],["~$s","^4>"]]]]],"^4?","Like parse-string but parses all values from string and returns them\n  in a vector.","^4@",["^ ","^4A",false,"^4B",2,"^4C",2,"^4D",[["~$s"],["~$s","^4>"]],"^4<",["^19",[["~$s"],["~$s","^4>"]]],"^4E",["^19",[null,null]]]],"^U","^24","^6","edamame/core.cljc","^:",23,"^4@",["^ ","^4A",false,"^4B",2,"^4C",2,"^4D",[["~$s"],["~$s","^4>"]],"^4<",["^19",[["~$s"],["~$s","^4>"]]],"^4E",["^19",[null,null]]],"^4D",[["~$s"],["~$s","^4>"]],"^4F",null,"^4B",2,"^4E",["^19",[null,null]],"^8",1,"^4A",false,"^4G",[["^ ","^4B",1,"^4A",false,"^4H","~$clj"],["^ ","^4B",2,"^4A",false,"^4H","^4X"]],"^7",65,"^9",65,"^4C",2,"^4K",true,"^4<",["^19",[["~$s"],["~$s","^4>"]]],"^4?","Like parse-string but parses all values from string and returns them\n  in a vector."],"^4T",["^ ","^4;",null,"^5",["^ ","^6","edamame/core.cljc","^7",73,"^8",7,"^9",73,"^:",13,"^4<",["^19",["^4=",["^19",[["~$x"]]]]],"^4?","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"^U","^26","^6","edamame/core.cljc","^:",13,"^4D",["^19",[["~$x"]]],"^4F",null,"^4E",["^19",[null,null]],"^8",1,"^4A",false,"^7",73,"^4N","^4I","^9",73,"^4C",1,"^4K",true,"^4<",["^19",["^4=",["^19",[["~$x"]]]]],"^4?","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"~$get-line-number",["^ ","^4;",null,"^5",["^ ","^6","edamame/core.cljc","^7",85,"^8",7,"^9",85,"^:",22,"^4<",["^19",["^4=",["^19",[["^4T"]]]]]],"^U","^1M","^6","edamame/core.cljc","^:",22,"^4D",["^19",[["^4T"]]],"^4F",null,"^4E",["^19",[null,null]],"^8",1,"^4A",false,"^7",85,"^4N","^4I","^9",85,"^4C",1,"^4K",true,"^4<",["^19",["^4=",["^19",[["^4T"]]]]]]],"^17",["^ ","^12","^12"],"~:cljs.analyzer/constants",["^ ","^14",["^T",["~:eof","~:edamame.core/eof"]],"~:order",["^4[","^50"]],"^1<",["^ ","^15",["^T",[]]],"^1=",["^ "],"^1>",["^13","^12","^I","^11"]],"^Y","^V","~:ns-specs",["^ "],"~:ns-spec-vars",["^T",[]],"~:compiler-options",["^29",[["^54","~:static-fns"],true,["^54","~:shadow-tweaks"],null,["^54","~:source-map-inline"],null,["^54","~:elide-asserts"],false,["^54","~:optimize-constants"],null,["^54","^1C"],null,["^54","~:external-config"],null,["^54","~:tooling-config"],null,["^54","~:emit-constants"],null,["^54","~:load-tests"],null,["^54","~:form-size-threshold"],null,["^54","~:global-goog-object&array"],null,["^54","~:data-readers"],null,["^54","~:infer-externs"],"~:auto",["^54","^1E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^54","~:fn-invoke-direct"],null,["^54","~:source-map"],"/dev/null"]]]