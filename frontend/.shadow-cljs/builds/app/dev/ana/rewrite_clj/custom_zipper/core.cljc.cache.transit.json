["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.custom_zipper.core');\nrewrite_clj.custom_zipper.core.custom_zipper = (function rewrite_clj$custom_zipper$core$custom_zipper(root){\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(\"rewrite-clj.custom-zipper.core\",\"custom?\",\"rewrite-clj.custom-zipper.core/custom?\",-1122119625),true,new cljs.core.Keyword(null,\"node\",\"node\",581201198),root,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(1)], null),new cljs.core.Keyword(null,\"parent\",\"parent\",-878878779),null,new cljs.core.Keyword(null,\"left\",\"left\",-399115937),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"right\",\"right\",-452581833),cljs.core.List.EMPTY], null);\n});\nrewrite_clj.custom_zipper.core.zipper = (function rewrite_clj$custom_zipper$core$zipper(root){\nreturn clojure.zip.zipper(rewrite_clj.node.protocols.inner_QMARK_,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.seq,rewrite_clj.node.protocols.children),rewrite_clj.node.protocols.replace_children,root);\n});\nrewrite_clj.custom_zipper.core.custom_zipper_QMARK_ = (function rewrite_clj$custom_zipper$core$custom_zipper_QMARK_(value){\nreturn new cljs.core.Keyword(\"rewrite-clj.custom-zipper.core\",\"custom?\",\"rewrite-clj.custom-zipper.core/custom?\",-1122119625).cljs$core$IFn$_invoke$arity$1(value);\n});\n/**\n * Returns the current node in `zloc`.\n */\nrewrite_clj.custom_zipper.core.node = (function rewrite_clj$custom_zipper$core$node(G__31201){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31201))){\nvar zloc = G__31201;\nreturn new cljs.core.Keyword(null,\"node\",\"node\",581201198).cljs$core$IFn$_invoke$arity$1(zloc);\n} else {\nreturn clojure.zip.node(G__31201);\n}\n});\n/**\n * Returns true if the current node in `zloc` is a branch.\n */\nrewrite_clj.custom_zipper.core.branch_QMARK_ = (function rewrite_clj$custom_zipper$core$branch_QMARK_(G__31211){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31211))){\nvar zloc = G__31211;\nreturn rewrite_clj.node.protocols.inner_QMARK_(new cljs.core.Keyword(null,\"node\",\"node\",581201198).cljs$core$IFn$_invoke$arity$1(zloc));\n} else {\nreturn clojure.zip.branch_QMARK_(G__31211);\n}\n});\n/**\n * Returns a seq of the children of current node in `zloc`, which must be a branch.\n */\nrewrite_clj.custom_zipper.core.children = (function rewrite_clj$custom_zipper$core$children(G__31213){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31213))){\nvar map__31214 = G__31213;\nvar map__31214__$1 = cljs.core.__destructure_map(map__31214);\nvar zloc = map__31214__$1;\nvar node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31214__$1,new cljs.core.Keyword(null,\"node\",\"node\",581201198));\nif(cljs.core.truth_(rewrite_clj.custom_zipper.core.branch_QMARK_(zloc))){\nreturn cljs.core.seq(rewrite_clj.node.protocols.children(node));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"called children on a leaf node\",cljs.core.PersistentArrayMap.EMPTY);\n}\n} else {\nreturn clojure.zip.children(G__31213);\n}\n});\n/**\n * Returns a new branch node, given an existing `node` and new\n *   `children`. \n */\nrewrite_clj.custom_zipper.core.make_node = (function rewrite_clj$custom_zipper$core$make_node(G__31215,G__31216,G__31217){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31215))){\nvar _zloc = G__31215;\nvar node = G__31216;\nvar children = G__31217;\nreturn rewrite_clj.node.protocols.replace_children(node,children);\n} else {\nreturn clojure.zip.make_node(G__31215,G__31216,G__31217);\n}\n});\n/**\n * Returns the ones-based `[row col]` of the start of the current node in `zloc`.\n * \n *   Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking).\n */\nrewrite_clj.custom_zipper.core.position = (function rewrite_clj$custom_zipper$core$position(zloc){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.core.custom_zipper_QMARK_(zloc))){\nreturn new cljs.core.Keyword(null,\"position\",\"position\",-2011731912).cljs$core$IFn$_invoke$arity$1(zloc);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"to use position functions, please construct your zipper with \",\"':track-position?'  set to true.\"].join(''),cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n/**\n * Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\n *   `end-col` is exclusive.\n * \n *   Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking).\n */\nrewrite_clj.custom_zipper.core.position_span = (function rewrite_clj$custom_zipper$core$position_span(zloc){\nvar start_pos = rewrite_clj.custom_zipper.core.position(zloc);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [start_pos,rewrite_clj.node.protocols._PLUS_extent(start_pos,rewrite_clj.node.protocols.extent(rewrite_clj.custom_zipper.core.node(zloc)))], null);\n});\n/**\n * Returns a seq of the left siblings of current node in `zloc`.\n */\nrewrite_clj.custom_zipper.core.lefts = (function rewrite_clj$custom_zipper$core$lefts(G__31223){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31223))){\nvar zloc = G__31223;\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,new cljs.core.Keyword(null,\"left\",\"left\",-399115937).cljs$core$IFn$_invoke$arity$1(zloc));\n} else {\nreturn clojure.zip.lefts(G__31223);\n}\n});\n/**\n * Returns zipper with the location at the leftmost child of current node in `zloc`, or\n *   nil if no children.\n */\nrewrite_clj.custom_zipper.core.down = (function rewrite_clj$custom_zipper$core$down(G__31224){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31224))){\nvar zloc = G__31224;\nif(cljs.core.truth_(rewrite_clj.custom_zipper.core.branch_QMARK_(zloc))){\nvar map__31225 = zloc;\nvar map__31225__$1 = cljs.core.__destructure_map(map__31225);\nvar vec__31226 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31225__$1,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912));\nvar row = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31226,(0),null);\nvar col = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31226,(1),null);\nvar node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31225__$1,new cljs.core.Keyword(null,\"node\",\"node\",581201198));\nvar vec__31229 = rewrite_clj.custom_zipper.core.children(zloc);\nvar seq__31230 = cljs.core.seq(vec__31229);\nvar first__31231 = cljs.core.first(seq__31230);\nvar seq__31230__$1 = cljs.core.next(seq__31230);\nvar c = first__31231;\nvar cnext = seq__31230__$1;\nvar cs = vec__31229;\nif(cljs.core.truth_(cs)){\nreturn cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(\"rewrite-clj.custom-zipper.core\",\"custom?\",\"rewrite-clj.custom-zipper.core/custom?\",-1122119625),true,new cljs.core.Keyword(null,\"node\",\"node\",581201198),c,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [row,(col + rewrite_clj.node.protocols.leader_length(node))], null),new cljs.core.Keyword(null,\"parent\",\"parent\",-878878779),zloc,new cljs.core.Keyword(null,\"left\",\"left\",-399115937),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"right\",\"right\",-452581833),cnext], null),cljs.core.meta(zloc));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn clojure.zip.down(G__31224);\n}\n});\n/**\n * Returns zipper with the location at the parent of current node in `zloc`, or nil if at\n *   the top.\n */\nrewrite_clj.custom_zipper.core.up = (function rewrite_clj$custom_zipper$core$up(G__31232){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31232))){\nvar zloc = G__31232;\nvar map__31233 = zloc;\nvar map__31233__$1 = cljs.core.__destructure_map(map__31233);\nvar node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31233__$1,new cljs.core.Keyword(null,\"node\",\"node\",581201198));\nvar parent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31233__$1,new cljs.core.Keyword(null,\"parent\",\"parent\",-878878779));\nvar left = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31233__$1,new cljs.core.Keyword(null,\"left\",\"left\",-399115937));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31233__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nvar changed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31233__$1,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330));\nif(cljs.core.truth_(parent)){\nif(cljs.core.truth_(changed_QMARK_)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(parent,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"node\",\"node\",581201198),rewrite_clj.custom_zipper.core.make_node(zloc,new cljs.core.Keyword(null,\"node\",\"node\",581201198).cljs$core$IFn$_invoke$arity$1(parent),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,left),cljs.core.cons(node,right)))], 0));\n} else {\nreturn parent;\n}\n} else {\nreturn null;\n}\n} else {\nreturn clojure.zip.up(G__31232);\n}\n});\n/**\n * Zips all the way up `zloc` and returns the root node, reflecting any changes.\n */\nrewrite_clj.custom_zipper.core.root = (function rewrite_clj$custom_zipper$core$root(G__31234){\nwhile(true){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31234))){\nvar zloc = G__31234;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"end?\",\"end?\",-1423391609).cljs$core$IFn$_invoke$arity$1(zloc))){\nreturn rewrite_clj.custom_zipper.core.node(zloc);\n} else {\nvar p = rewrite_clj.custom_zipper.core.up(zloc);\nif(cljs.core.truth_(p)){\nvar G__31328 = p;\nG__31234 = G__31328;\ncontinue;\n} else {\nreturn rewrite_clj.custom_zipper.core.node(zloc);\n}\n}\n} else {\nreturn clojure.zip.root(G__31234);\n}\nbreak;\n}\n});\n/**\n * Returns zipper with location at the right sibling of the current node in `zloc`, or nil.\n */\nrewrite_clj.custom_zipper.core.right = (function rewrite_clj$custom_zipper$core$right(G__31236){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31236))){\nvar zloc = G__31236;\nvar map__31242 = zloc;\nvar map__31242__$1 = cljs.core.__destructure_map(map__31242);\nvar vec__31243 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31242__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nvar seq__31244 = cljs.core.seq(vec__31243);\nvar first__31245 = cljs.core.first(seq__31244);\nvar seq__31244__$1 = cljs.core.next(seq__31244);\nvar r = first__31245;\nvar rnext = seq__31244__$1;\nvar right = vec__31243;\nvar node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31242__$1,new cljs.core.Keyword(null,\"node\",\"node\",581201198));\nvar parent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31242__$1,new cljs.core.Keyword(null,\"parent\",\"parent\",-878878779));\nvar position = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31242__$1,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912));\nvar left = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31242__$1,new cljs.core.Keyword(null,\"left\",\"left\",-399115937));\nif(cljs.core.truth_((function (){var and__5043__auto__ = parent;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn right;\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(zloc,new cljs.core.Keyword(null,\"node\",\"node\",581201198),r,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"left\",\"left\",-399115937),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(left,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node,position], null)),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),rnext,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),rewrite_clj.node.protocols._PLUS_extent(position,rewrite_clj.node.protocols.extent(node))], 0));\n} else {\nreturn null;\n}\n} else {\nreturn clojure.zip.right(G__31236);\n}\n});\n/**\n * Returns zipper with location at the rightmost sibling of the current node in `zloc`, or self.\n */\nrewrite_clj.custom_zipper.core.rightmost = (function rewrite_clj$custom_zipper$core$rightmost(G__31246){\nwhile(true){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31246))){\nvar zloc = G__31246;\nvar temp__5802__auto__ = rewrite_clj.custom_zipper.core.right(zloc);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar next = temp__5802__auto__;\nvar G__31329 = next;\nG__31246 = G__31329;\ncontinue;\n} else {\nreturn zloc;\n}\n} else {\nreturn clojure.zip.rightmost(G__31246);\n}\nbreak;\n}\n});\n/**\n * Returns zipper with location at the left sibling of the current node in `zloc`, or nil.\n */\nrewrite_clj.custom_zipper.core.left = (function rewrite_clj$custom_zipper$core$left(G__31249){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31249))){\nvar zloc = G__31249;\nvar map__31250 = zloc;\nvar map__31250__$1 = cljs.core.__destructure_map(map__31250);\nvar node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31250__$1,new cljs.core.Keyword(null,\"node\",\"node\",581201198));\nvar parent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31250__$1,new cljs.core.Keyword(null,\"parent\",\"parent\",-878878779));\nvar left = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31250__$1,new cljs.core.Keyword(null,\"left\",\"left\",-399115937));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31250__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nif(cljs.core.truth_((function (){var and__5043__auto__ = parent;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.seq(left);\n} else {\nreturn and__5043__auto__;\n}\n})())){\nvar vec__31251 = cljs.core.peek(left);\nvar lnode = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31251,(0),null);\nvar lpos = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31251,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(zloc,new cljs.core.Keyword(null,\"node\",\"node\",581201198),lnode,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),lpos,new cljs.core.Keyword(null,\"left\",\"left\",-399115937),cljs.core.pop(left),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),cljs.core.cons(node,right)], 0));\n} else {\nreturn null;\n}\n} else {\nreturn clojure.zip.left(G__31249);\n}\n});\n/**\n * Returns zipper with location at the leftmost sibling of the current node in `zloc`, or self.\n */\nrewrite_clj.custom_zipper.core.leftmost = (function rewrite_clj$custom_zipper$core$leftmost(G__31254){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31254))){\nvar zloc = G__31254;\nvar map__31255 = zloc;\nvar map__31255__$1 = cljs.core.__destructure_map(map__31255);\nvar node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31255__$1,new cljs.core.Keyword(null,\"node\",\"node\",581201198));\nvar parent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31255__$1,new cljs.core.Keyword(null,\"parent\",\"parent\",-878878779));\nvar left = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31255__$1,new cljs.core.Keyword(null,\"left\",\"left\",-399115937));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31255__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nif(cljs.core.truth_((function (){var and__5043__auto__ = parent;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.seq(left);\n} else {\nreturn and__5043__auto__;\n}\n})())){\nvar vec__31256 = cljs.core.first(left);\nvar lnode = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31256,(0),null);\nvar lpos = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31256,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(zloc,new cljs.core.Keyword(null,\"node\",\"node\",581201198),lnode,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),lpos,new cljs.core.Keyword(null,\"left\",\"left\",-399115937),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"right\",\"right\",-452581833),cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,cljs.core.rest(left)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [node], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([right], 0))], 0));\n} else {\nreturn zloc;\n}\n} else {\nreturn clojure.zip.leftmost(G__31254);\n}\n});\n/**\n * Returns zipper with `item` inserted as the left sibling of current node in `zloc`,\n *  without moving location.\n */\nrewrite_clj.custom_zipper.core.insert_left = (function rewrite_clj$custom_zipper$core$insert_left(G__31260,G__31261){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31260))){\nvar zloc = G__31260;\nvar item = G__31261;\nvar map__31263 = zloc;\nvar map__31263__$1 = cljs.core.__destructure_map(map__31263);\nvar parent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31263__$1,new cljs.core.Keyword(null,\"parent\",\"parent\",-878878779));\nvar position = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31263__$1,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912));\nvar left = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31263__$1,new cljs.core.Keyword(null,\"left\",\"left\",-399115937));\nif(cljs.core.not(parent)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"cannot insert left at top\",cljs.core.PersistentArrayMap.EMPTY);\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(zloc,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"left\",\"left\",-399115937),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(left,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [item,position], null)),new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),rewrite_clj.node.protocols._PLUS_extent(position,rewrite_clj.node.protocols.extent(item))], 0));\n}\n} else {\nreturn clojure.zip.insert_left(G__31260,G__31261);\n}\n});\n/**\n * Returns zipper with `item` inserted as the right sibling of the current node in `zloc`,\n *   without moving location.\n */\nrewrite_clj.custom_zipper.core.insert_right = (function rewrite_clj$custom_zipper$core$insert_right(G__31264,G__31265){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31264))){\nvar zloc = G__31264;\nvar item = G__31265;\nvar map__31266 = zloc;\nvar map__31266__$1 = cljs.core.__destructure_map(map__31266);\nvar parent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31266__$1,new cljs.core.Keyword(null,\"parent\",\"parent\",-878878779));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31266__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nif(cljs.core.not(parent)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"cannot insert right at top\",cljs.core.PersistentArrayMap.EMPTY);\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(zloc,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"right\",\"right\",-452581833),cljs.core.cons(item,right)], 0));\n}\n} else {\nreturn clojure.zip.insert_right(G__31264,G__31265);\n}\n});\n/**\n * Returns zipper with `node` replacing current node in `zloc`, without moving location.\n */\nrewrite_clj.custom_zipper.core.replace = (function rewrite_clj$custom_zipper$core$replace(G__31269,G__31270){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31269))){\nvar zloc = G__31269;\nvar node = G__31270;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(zloc,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"node\",\"node\",581201198),node], 0));\n} else {\nreturn clojure.zip.replace(G__31269,G__31270);\n}\n});\n/**\n * Returns zipper with value of `(apply f current-node args)` replacing current node in `zloc`.\n * \n * The result of `f` should be a rewrite-clj node.\n */\nrewrite_clj.custom_zipper.core.edit = (function rewrite_clj$custom_zipper$core$edit(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___31336 = arguments.length;\nvar i__5770__auto___31337 = (0);\nwhile(true){\nif((i__5770__auto___31337 < len__5769__auto___31336)){\nargs__5775__auto__.push((arguments[i__5770__auto___31337]));\n\nvar G__31339 = (i__5770__auto___31337 + (1));\ni__5770__auto___31337 = G__31339;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\nreturn rewrite_clj.custom_zipper.core.edit.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\n});\n\n(rewrite_clj.custom_zipper.core.edit.cljs$core$IFn$_invoke$arity$variadic = (function (zloc,f,args){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.core.custom_zipper_QMARK_(zloc))){\nreturn rewrite_clj.custom_zipper.core.replace(zloc,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,rewrite_clj.custom_zipper.core.node(zloc),args));\n} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(clojure.zip.edit,zloc,f,args);\n}\n}));\n\n(rewrite_clj.custom_zipper.core.edit.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(rewrite_clj.custom_zipper.core.edit.cljs$lang$applyTo = (function (seq31277){\nvar G__31278 = cljs.core.first(seq31277);\nvar seq31277__$1 = cljs.core.next(seq31277);\nvar G__31279 = cljs.core.first(seq31277__$1);\nvar seq31277__$2 = cljs.core.next(seq31277__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__31278,G__31279,seq31277__$2);\n}));\n\n/**\n * Returns zipper with `item` inserted as the leftmost child of the current node in `zloc`,\n *   without moving location.\n */\nrewrite_clj.custom_zipper.core.insert_child = (function rewrite_clj$custom_zipper$core$insert_child(G__31298,G__31299){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31298))){\nvar zloc = G__31298;\nvar item = G__31299;\nreturn rewrite_clj.custom_zipper.core.replace(zloc,rewrite_clj.custom_zipper.core.make_node(zloc,rewrite_clj.custom_zipper.core.node(zloc),cljs.core.cons(item,rewrite_clj.custom_zipper.core.children(zloc))));\n} else {\nreturn clojure.zip.insert_child(G__31298,G__31299);\n}\n});\n/**\n * Returns zipper with `item` inserted as the rightmost child of the current node in `zloc`,\n *   without moving.\n */\nrewrite_clj.custom_zipper.core.append_child = (function rewrite_clj$custom_zipper$core$append_child(G__31300,G__31301){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31300))){\nvar zloc = G__31300;\nvar item = G__31301;\nreturn rewrite_clj.custom_zipper.core.replace(zloc,rewrite_clj.custom_zipper.core.make_node(zloc,rewrite_clj.custom_zipper.core.node(zloc),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(rewrite_clj.custom_zipper.core.children(zloc),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [item], null))));\n} else {\nreturn clojure.zip.append_child(G__31300,G__31301);\n}\n});\n/**\n * Returns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n *   When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n *   at the end, stays there.\n */\nrewrite_clj.custom_zipper.core.next = (function rewrite_clj$custom_zipper$core$next(G__31303){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31303))){\nvar zloc = G__31303;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"end?\",\"end?\",-1423391609).cljs$core$IFn$_invoke$arity$1(zloc))){\nreturn zloc;\n} else {\nvar or__5045__auto__ = (function (){var and__5043__auto__ = rewrite_clj.custom_zipper.core.branch_QMARK_(zloc);\nif(cljs.core.truth_(and__5043__auto__)){\nreturn rewrite_clj.custom_zipper.core.down(zloc);\n} else {\nreturn and__5043__auto__;\n}\n})();\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar or__5045__auto____$1 = rewrite_clj.custom_zipper.core.right(zloc);\nif(cljs.core.truth_(or__5045__auto____$1)){\nreturn or__5045__auto____$1;\n} else {\nvar p = zloc;\nwhile(true){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.core.up(p))){\nvar or__5045__auto____$2 = rewrite_clj.custom_zipper.core.right(rewrite_clj.custom_zipper.core.up(p));\nif(cljs.core.truth_(or__5045__auto____$2)){\nreturn or__5045__auto____$2;\n} else {\nvar G__31341 = rewrite_clj.custom_zipper.core.up(p);\np = G__31341;\ncontinue;\n}\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p,new cljs.core.Keyword(null,\"end?\",\"end?\",-1423391609),true);\n}\nbreak;\n}\n}\n}\n}\n} else {\nreturn clojure.zip.next(G__31303);\n}\n});\n/**\n * Returns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n *   If already at the root, returns nil.\n */\nrewrite_clj.custom_zipper.core.prev = (function rewrite_clj$custom_zipper$core$prev(G__31307){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31307))){\nvar zloc = G__31307;\nvar temp__5802__auto__ = rewrite_clj.custom_zipper.core.left(zloc);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar lloc = temp__5802__auto__;\nvar zloc__$1 = lloc;\nwhile(true){\nvar temp__5802__auto____$1 = (function (){var and__5043__auto__ = rewrite_clj.custom_zipper.core.branch_QMARK_(zloc__$1);\nif(cljs.core.truth_(and__5043__auto__)){\nreturn rewrite_clj.custom_zipper.core.down(zloc__$1);\n} else {\nreturn and__5043__auto__;\n}\n})();\nif(cljs.core.truth_(temp__5802__auto____$1)){\nvar child = temp__5802__auto____$1;\nvar G__31343 = rewrite_clj.custom_zipper.core.rightmost(child);\nzloc__$1 = G__31343;\ncontinue;\n} else {\nreturn zloc__$1;\n}\nbreak;\n}\n} else {\nreturn rewrite_clj.custom_zipper.core.up(zloc);\n}\n} else {\nreturn clojure.zip.prev(G__31307);\n}\n});\n/**\n * Returns true if at end of depth-first walk in `zloc`.\n */\nrewrite_clj.custom_zipper.core.end_QMARK_ = (function rewrite_clj$custom_zipper$core$end_QMARK_(G__31308){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31308))){\nvar zloc = G__31308;\nreturn new cljs.core.Keyword(null,\"end?\",\"end?\",-1423391609).cljs$core$IFn$_invoke$arity$1(zloc);\n} else {\nreturn clojure.zip.end_QMARK_(G__31308);\n}\n});\n/**\n * Returns zipper with current node in `zloc` removed, with location at node that would have preceded\n *   it in a depth-first walk.\n */\nrewrite_clj.custom_zipper.core.remove = (function rewrite_clj$custom_zipper$core$remove(G__31309){\nif(cljs.core.truth_(rewrite_clj.custom_zipper.switchable.custom_zipper_QMARK_(G__31309))){\nvar zloc = G__31309;\nvar map__31310 = zloc;\nvar map__31310__$1 = cljs.core.__destructure_map(map__31310);\nvar parent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31310__$1,new cljs.core.Keyword(null,\"parent\",\"parent\",-878878779));\nvar left = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31310__$1,new cljs.core.Keyword(null,\"left\",\"left\",-399115937));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31310__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nif(cljs.core.not(parent)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"cannot remove at top\",cljs.core.PersistentArrayMap.EMPTY);\n} else {\nif(cljs.core.seq(left)){\nvar zloc__$1 = (function (){var vec__31314 = cljs.core.peek(left);\nvar lnode = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31314,(0),null);\nvar lpos = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31314,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(zloc,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),lpos,new cljs.core.Keyword(null,\"node\",\"node\",581201198),lnode,new cljs.core.Keyword(null,\"left\",\"left\",-399115937),cljs.core.pop(left)], 0));\n})();\nwhile(true){\nvar temp__5802__auto__ = (function (){var and__5043__auto__ = rewrite_clj.custom_zipper.core.branch_QMARK_(zloc__$1);\nif(cljs.core.truth_(and__5043__auto__)){\nreturn rewrite_clj.custom_zipper.core.down(zloc__$1);\n} else {\nreturn and__5043__auto__;\n}\n})();\nif(cljs.core.truth_(temp__5802__auto__)){\nvar child = temp__5802__auto__;\nvar G__31347 = rewrite_clj.custom_zipper.core.rightmost(child);\nzloc__$1 = G__31347;\ncontinue;\n} else {\nreturn zloc__$1;\n}\nbreak;\n}\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(parent,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"node\",\"node\",581201198),rewrite_clj.custom_zipper.core.make_node(zloc,new cljs.core.Keyword(null,\"node\",\"node\",581201198).cljs$core$IFn$_invoke$arity$1(parent),right)], 0));\n}\n}\n} else {\nreturn clojure.zip.remove(G__31309);\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","This is the underlying zipper that rewrite-clj uses.\n\n   It delegates to two different zipper implementations:\n   1. the code herein under defn-switchable bodies when the user has created a `:position-tracking` zipper\n   2. otherwise clojure.zip, with some small exceptions:\n      - `edit` explicitly handles the delegation - I assume because defn-switchable could not handle the argument delegation\n      - there are fns exclusive to the position trakcing zipper, `position`, `position-span`","~:file","rewrite_clj/custom_zipper/core.cljc","~:line",14,"~:column",14,"~:end-line",14,"~:end-column",44,"~:no-doc",true],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",["^ ","~$defn-switchable","~$rewrite-clj.custom-zipper.switchable"],"~:excludes",["~#set",["~$remove","~$replace","~$next"]],"~:name","~$rewrite-clj.custom-zipper.core","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.zip","^17","~$clj-zip","^17","^V","^V","~$rewrite-clj.node.protocols","^19","~$node","^19","~$cljs.core","^1;","~$goog","^1<"],"~:seen",["^X",["~:require","~:require-macros"]],"~:uses",["^ ","^U","^V"],"^1?",["^ ","^V","^V","^1;","^1;"],"~:form",["~#list",["~$ns","^11","This is the underlying zipper that rewrite-clj uses.\n\n   It delegates to two different zipper implementations:\n   1. the code herein under defn-switchable bodies when the user has created a `:position-tracking` zipper\n   2. otherwise clojure.zip, with some small exceptions:\n      - `edit` explicitly handles the delegation - I assume because defn-switchable could not handle the argument delegation\n      - there are fns exclusive to the position trakcing zipper, `position`, `position-span`",["^1B",["~:refer-clojure","~:exclude",["^1B",["^Z","^Y","^["]]]],["^1B",["^1>",["^17","~:as","^18"],["^V","~:refer",["^U"]],["^19","^1F","^1:"]]],["^1B",["^1?",["^V","^1G",["^U"]]]]]],"~:flags",["^ ","^1>",["^X",[]],"^1?",["^X",[]]],"~:js-deps",["^ "],"~:deps",["^1<","^1;","^17","^V","^19"]],"^14","^11","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/custom_zipper/core.cljc"],"~:compiled-at",1666857663272,"^12",["^ ","^17","^17","^18","^17","^V","^V","^19","^19","^1:","^19","^1;","^1;","^1<","^1<"],"~:resource-name","rewrite_clj/custom_zipper/core.cljc","~:warnings",[],"~:source","; Interface and algorithms based on code in clojure.zip with is bundled with Clojure itself:\n\n;   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n;functional hierarchical zipper, with navigation, editing and enumeration\n;see Huet\n\n(ns ^:no-doc rewrite-clj.custom-zipper.core\n  \"This is the underlying zipper that rewrite-clj uses.\n\n   It delegates to two different zipper implementations:\n   1. the code herein under defn-switchable bodies when the user has created a `:position-tracking` zipper\n   2. otherwise clojure.zip, with some small exceptions:\n      - `edit` explicitly handles the delegation - I assume because defn-switchable could not handle the argument delegation\n      - there are fns exclusive to the position trakcing zipper, `position`, `position-span`\"\n  (:refer-clojure :exclude (replace remove next))\n  (:require [clojure.zip :as clj-zip]\n            [rewrite-clj.custom-zipper.switchable :refer [defn-switchable]]\n            [rewrite-clj.node.protocols :as node])\n  #?(:cljs (:require-macros [rewrite-clj.custom-zipper.switchable :refer [defn-switchable]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; the custom zipper is used to support position-tracking, otherwise clojure.zip is used\n\n(defn custom-zipper\n  [root]\n  {::custom? true\n   :node     root\n   :position [1 1]\n   :parent   nil\n   :left     []\n   :right   '()})\n\n(defn zipper\n  [root]\n  (clj-zip/zipper\n    node/inner?\n    (comp seq node/children)\n    node/replace-children\n    root))\n\n(defn custom-zipper?\n  [value]\n  (::custom? value))\n\n;; ## Implementation\n\n(defn-switchable node\n  \"Returns the current node in `zloc`.\"\n  [zloc]\n  (:node zloc))\n\n(defn-switchable branch?\n  \"Returns true if the current node in `zloc` is a branch.\"\n  [zloc]\n  (node/inner? (:node zloc)))\n\n(defn-switchable children\n  \"Returns a seq of the children of current node in `zloc`, which must be a branch.\"\n  [{:keys [node] :as zloc}]\n  (if (branch? zloc)\n    (seq (node/children node))\n    (throw (ex-info \"called children on a leaf node\" {}))))\n\n(defn-switchable make-node\n  \"Returns a new branch node, given an existing `node` and new\n  `children`. \"\n  [_zloc node children]\n  (node/replace-children node children))\n\n(defn position\n  \"Returns the ones-based `[row col]` of the start of the current node in `zloc`.\n   \n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking).\"\n  [zloc]\n  (if (custom-zipper? zloc)\n    (:position zloc)\n    (throw\n     (ex-info\n      (str \"to use position functions, please construct your zipper with \"\n           \"':track-position?'  set to true.\") {}))))\n\n(defn position-span\n  \"Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\n  `end-col` is exclusive.\n\n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking).\"\n  [zloc]\n  (let [start-pos (position zloc)]\n    [start-pos (node/+extent start-pos (node/extent (node zloc)))]))\n\n(defn-switchable lefts\n  \"Returns a seq of the left siblings of current node in `zloc`.\"\n  [zloc]\n  (map first (:left zloc)))\n\n(defn-switchable down\n  \"Returns zipper with the location at the leftmost child of current node in `zloc`, or\n  nil if no children.\"\n  [zloc]\n  (when (branch? zloc)\n    (let [{:keys [node] [row col] :position} zloc\n          [c & cnext :as cs] (children zloc)]\n      (when cs\n        (with-meta\n          {::custom? true\n           :node     c\n           :position [row (+ col (node/leader-length node))]\n           :parent   zloc\n           :left     []\n           :right    cnext}\n          (meta zloc))))))\n\n(defn-switchable up\n  \"Returns zipper with the location at the parent of current node in `zloc`, or nil if at\n  the top.\"\n  [zloc]\n  (let [{:keys [node parent left right changed?]} zloc]\n    (when parent\n      (if changed?\n        (assoc parent\n               :changed? true\n               :node (make-node zloc\n                                (:node parent)\n                                (concat (map first left) (cons node right))))\n        parent))))\n\n(defn-switchable root\n  \"Zips all the way up `zloc` and returns the root node, reflecting any changes.\"\n  [zloc]\n  (if (:end? zloc)\n    (node zloc)\n    (let [p (up zloc)]\n      (if p\n        (recur p)\n        (node zloc)))))\n\n(defn-switchable right\n  \"Returns zipper with location at the right sibling of the current node in `zloc`, or nil.\"\n  [zloc]\n  (let [{:keys [node parent position left] [r & rnext :as right] :right} zloc]\n    (when (and parent right)\n      (assoc zloc\n             :node r\n             :left (conj left [node position])\n             :right rnext\n             :position (node/+extent position (node/extent node))))))\n\n(defn-switchable rightmost\n  \"Returns zipper with location at the rightmost sibling of the current node in `zloc`, or self.\"\n  [zloc]\n  (if-let [next (right zloc)]\n    (recur next)\n    zloc))\n\n(defn-switchable left\n  \"Returns zipper with location at the left sibling of the current node in `zloc`, or nil.\"\n  [zloc]\n  (let [{:keys [node parent left right]} zloc]\n    (when (and parent (seq left))\n      (let [[lnode lpos] (peek left)]\n        (assoc zloc\n               :node lnode\n               :position lpos\n               :left (pop left)\n               :right (cons node right))))))\n\n(defn-switchable leftmost\n  \"Returns zipper with location at the leftmost sibling of the current node in `zloc`, or self.\"\n  [zloc]\n  (let [{:keys [node parent left right]} zloc]\n    (if (and parent (seq left))\n      (let [[lnode lpos] (first left)]\n        (assoc zloc\n               :node lnode\n               :position lpos\n               :left []\n               :right (concat (map first (rest left)) [node] right)))\n      zloc)))\n\n(defn-switchable insert-left\n  \"Returns zipper with `item` inserted as the left sibling of current node in `zloc`,\n without moving location.\"\n  [zloc item]\n  (let [{:keys [parent position left]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot insert left at top\" {}))\n      (assoc zloc\n             :changed? true\n             :left (conj left [item position])\n             :position (node/+extent position (node/extent item))))))\n\n(defn-switchable insert-right\n  \"Returns zipper with `item` inserted as the right sibling of the current node in `zloc`,\n  without moving location.\"\n  [zloc item]\n  (let [{:keys [parent right]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot insert right at top\" {}))\n      (assoc zloc\n             :changed? true\n             :right (cons item right)))))\n\n(defn-switchable replace\n  \"Returns zipper with `node` replacing current node in `zloc`, without moving location.\"\n  [zloc node]\n  (assoc zloc :changed? true :node node))\n\n(defn edit\n  \"Returns zipper with value of `(apply f current-node args)` replacing current node in `zloc`.\n   \n   The result of `f` should be a rewrite-clj node.\"\n  [zloc f & args]\n  (if (custom-zipper? zloc)\n    (replace zloc (apply f (node zloc) args))\n    (apply clj-zip/edit zloc f args)))\n\n(defn-switchable insert-child\n  \"Returns zipper with `item` inserted as the leftmost child of the current node in `zloc`,\n  without moving location.\"\n  [zloc item]\n  (replace zloc (make-node zloc (node zloc) (cons item (children zloc)))))\n\n(defn-switchable append-child\n  \"Returns zipper with `item` inserted as the rightmost child of the current node in `zloc`,\n  without moving.\"\n  [zloc item]\n  (replace zloc (make-node zloc (node zloc) (concat (children zloc) [item]))))\n\n(defn-switchable next\n  \"Returns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n  When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n  at the end, stays there.\"\n  [zloc]\n  (if (:end? zloc)\n    zloc\n    (or\n     (and (branch? zloc) (down zloc))\n     (right zloc)\n     (loop [p zloc]\n       (if (up p)\n         (or (right (up p)) (recur (up p)))\n         (assoc p :end? true))))))\n\n(defn-switchable prev\n  \"Returns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n  If already at the root, returns nil.\"\n  [zloc]\n  (if-let [lloc (left zloc)]\n    (loop [zloc lloc]\n      (if-let [child (and (branch? zloc) (down zloc))]\n        (recur (rightmost child))\n        zloc))\n    (up zloc)))\n\n(defn-switchable end?\n  \"Returns true if at end of depth-first walk in `zloc`.\"\n  [zloc]\n  (:end? zloc))\n\n(defn-switchable remove\n  \"Returns zipper with current node in `zloc` removed, with location at node that would have preceded\n  it in a depth-first walk.\"\n  [zloc]\n  (let [{:keys [parent left right]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot remove at top\" {}))\n      (if (seq left)\n        (loop [zloc (let [[lnode lpos] (peek left)]\n                     (assoc zloc\n                            :changed? true\n                            :position lpos\n                            :node lnode\n                            :left (pop left)))]\n          (if-let [child (and (branch? zloc) (down zloc))]\n            (recur (rightmost child))\n            zloc))\n        (assoc parent\n               :changed? true\n               :node (make-node zloc (:node parent) right))))))\n","~:reader-features",["^X",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AA+BA,+CAAA,/CAAMA,sGACHC;AADH,AAAA,kDAAA,uHAAA,KAAA,yDAAA,8DAAA,mFAAA,IAAA,YAAA,yDAAA,KAAA,qDAAA,iCAAA,uDAAA,AAAA,jXAGaA;;AAMb,wCAAA,xCAAMC,wFACHD;AADH,AAEE,OAACE,mBACCC,wCACA,AAACC,6CAAKC,cAAIC,qCACVC,4CACAP;;AAEJ,sDAAA,tDAAMQ,oHACHC;AADH,AAEE,OAAA,qJAAWA;;AAIb;;;sCAAA,8CAAAC,pFAAiBG;AAAjB,AAAA,oBAAA,AAAAF,0DAAAD;AAAA,WAAAA,PAEGI;AAFH,AAGE,OAAA,kFAAOA;;AAHT,OAAAF,iBAAAF;;;AAKA;;;+CAAA,uDAAAK,tGAAiBE;AAAjB,AAAA,oBAAA,AAAAN,0DAAAI;AAAA,WAAAA,PAEGD;AAFH,AAGE,OAACX,wCAAY,AAAA,kFAAOW;;AAHtB,OAAAE,0BAAAD;;;AAKA;;;0CAAA,kDAAAG,5FAAiBK;AAAjB,AAAA,oBAAA,AAAAZ,0DAAAO;AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAEqBL;WAFrB,AAAAO,4CAAAF,eAAA,lEAEWK;AAFX,AAGE,oBAAI,AAACP,6CAAQH;AACX,OAACT,cAAI,AAACC,oCAAckB;;AACpB,MAAO,gDAAA,iCAAA,jFAACC;;;AALZ,OAAAH,qBAAAJ;;;AAOA;;;;2CAAA,mDAAAQ,SAAAC,SAAAC,hHAAiBE;AAAjB,AAAA,oBAAA,AAAAnB,0DAAAe;AAAA,YAAAA,RAGGK;WAHHJ,PAGSH;eAHTI,XAGcI;AAHd,AAIE,OAACzB,4CAAsBiB,KAAKQ;;AAJ9B,OAAAH,sBAAAH,SAAAC,SAAAC;;;AAMA;;;;;0CAAA,1CAAMK,4FAIHnB;AAJH,AAKE,oBAAI,AAACN,oDAAeM;AAClB,OAAA,4FAAWA;;AACX,MACC,8JAAA,9JAACW,gDACA,CAAA,gEAAA;;;AAGN;;;;;;+CAAA,/CAAMS,sGAKHpB;AALH,AAME,IAAMqB,YAAU,AAACF,wCAASnB;AAA1B,AAAA,0FACGqB,UAAU,AAACC,wCAAaD,UAAU,AAACE,kCAAY,AAACxB,oCAAKC;;AAE1D;;;uCAAA,+CAAAwB,tFAAiBE;AAAjB,AAAA,oBAAA,AAAA7B,0DAAA2B;AAAA,WAAAA,PAEGxB;AAFH,AAGE,OAAC2B,4CAAIC,gBAAM,AAAA,mFAAO5B;;AAHpB,OAAAyB,kBAAAD;;;AAKA;;;;sCAAA,8CAAAK,pFAAiBE;AAAjB,AAAA,oBAAA,AAAAlC,0DAAAgC;AAAA,WAAAA,PAGG7B;AAHH,AAIE,oBAAM,AAACG,6CAAQH;AAAf,AACE,IAAAgC,aAAyChC;IAAzCgC,iBAAA,AAAA1B,4BAAA0B;IAAAC,aAAA,AAAA1B,4CAAAyB,eAAA;UAAA,AAAAE,4CAAAD,WAAA,IAAA,jEAAqBM;UAArB,AAAAL,4CAAAD,WAAA,IAAA,jEAAyBO;WAAzB,AAAAjC,4CAAAyB,eAAA,lEAActB;IAAdyB,aACyB,AAAC1B,wCAAST;IADnCoC,aAAA,AAAA7C,cAAA4C;IAAAE,eAAA,AAAAT,gBAAAQ;IAAAA,iBAAA,AAAAE,eAAAF;QAAAC,JACOI;YADPL,RACWM;SADXP,LACqBQ;AADrB,AAEE,oBAAMA;AAAN,AACE,2BAAA,2CAAA,uHAAA,KAAA,sDAAA,8DAAA,sJAAA,8DAAA,qDAAA,iCAAA,zlBAACC,+OAEYH,mJACCF,IAAI,CAAGC,MAAI,AAACK,yCAAmBnC,wEAChCV,kJAEA0C,cACX,AAACI,eAAK9C;;AARV;;;AAHJ;;;AAJF,OAAA8B,iBAAAD;;;AAiBA;;;;oCAAA,4CAAAkB,hFAAiBE;AAAjB,AAAA,oBAAA,AAAApD,0DAAAkD;AAAA,WAAAA,PAGG/C;AAHH,AAIE,IAAAkD,aAAgDlD;IAAhDkD,iBAAA,AAAA5C,4BAAA4C;WAAA,AAAA3C,4CAAA2C,eAAA,lEAAcxC;aAAd,AAAAH,4CAAA2C,eAAA,pEAAmBC;WAAnB,AAAA5C,4CAAA2C,eAAA,lEAA0BE;YAA1B,AAAA7C,4CAAA2C,eAAA,nEAA+BG;qBAA/B,AAAA9C,4CAAA2C,eAAA,5EAAqCI;AAArC,AACE,oBAAMH;AAAN,AACE,oBAAIG;AACF,mEAAA,6DAAA,uDAAA,hLAACC,qDAAMJ,+KAEM,AAACnC,yCAAUhB,KACA,AAAA,kFAAOmD,QACP,AAACK,+CAAO,AAAC7B,4CAAIC,gBAAMwB,MAAM,AAACK,eAAK/C,KAAK2C;;AAC5DF;;;AAPJ;;;AALJ,OAAAH,eAAAD;;;AAcA;;;sCAAA,8CAAAW,pFAAiBE;;AAAjB,AAAA,oBAAA,AAAA/D,0DAAA6D;AAAA,WAAAA,PAEG1D;AAFH,AAGE,oBAAI,AAAA,oFAAOA;AACT,OAACD,oCAAKC;;AACN,IAAM6D,IAAE,AAACZ,kCAAGjD;AAAZ,AACE,oBAAI6D;AACF,eAAOA;;;;AACP,OAAC9D,oCAAKC;;;;AARd,OAAA2D,iBAAAD;;;;;AAUA;;;uCAAA,+CAAAI,tFAAiBE;AAAjB,AAAA,oBAAA,AAAAnE,0DAAAiE;AAAA,WAAAA,PAEG9D;AAFH,AAGE,IAAAiE,aAAuEjE;IAAvEiE,iBAAA,AAAA3D,4BAAA2D;IAAAC,aAAA,AAAA3D,4CAAA0D,eAAA;IAAAE,aAAA,AAAA5E,cAAA2E;IAAAE,eAAA,AAAAxC,gBAAAuC;IAAAA,iBAAA,AAAA7B,eAAA6B;QAAAC,JAA0CE;YAA1CH,RAA8CI;YAA9CL,RAAwDb;WAAxD,AAAA9C,4CAAA0D,eAAA,lEAAcvD;aAAd,AAAAH,4CAAA0D,eAAA,pEAAmBd;eAAnB,AAAA5C,4CAAA0D,eAAA,tEAA0BI;WAA1B,AAAA9D,4CAAA0D,eAAA,lEAAmCb;AAAnC,AACE,oBAAM,iBAAAoB,oBAAKrB;AAAL,AAAA,oBAAAqB;AAAYnB;;AAAZmB;;;AAAN,AACE,iEAAA,wGAAA,iNAAA,6DAAA,hbAACjB,qDAAMvD,yDACMsE,yGACA,kDAAA,lDAACG,6CAAKrB,wFAAM1C,KAAK2D,yEAChBE,oEACG,AAACjD,wCAAa+C,SAAS,AAAC9C,kCAAYb;;AALvD;;;AAJJ,OAAAqD,kBAAAD;;;AAWA;;;2CAAA,mDAAAY,9FAAiBE;;AAAjB,AAAA,oBAAA,AAAA/E,0DAAA6E;AAAA,WAAAA,PAEG1E;AAFH,AAGE,IAAA6E,qBAAc,AAACb,qCAAMhE;AAArB,AAAA,oBAAA6E;AAAA,WAAAA,PAASC;AAAT,AACE,eAAOA;;;;AACP9E;;;AALJ,OAAA2E,sBAAAD;;;;;AAOA;;;sCAAA,8CAAAK,pFAAiBE;AAAjB,AAAA,oBAAA,AAAApF,0DAAAkF;AAAA,WAAAA,PAEG/E;AAFH,AAGE,IAAAkF,aAAuClF;IAAvCkF,iBAAA,AAAA5E,4BAAA4E;WAAA,AAAA3E,4CAAA2E,eAAA,lEAAcxE;aAAd,AAAAH,4CAAA2E,eAAA,pEAAmB/B;WAAnB,AAAA5C,4CAAA2E,eAAA,lEAA0B9B;YAA1B,AAAA7C,4CAAA2E,eAAA,nEAA+B7B;AAA/B,AACE,oBAAM,iBAAAmB,oBAAKrB;AAAL,AAAA,oBAAAqB;AAAY,OAACjF,cAAI6D;;AAAjBoB;;;AAAN,AACE,IAAAW,aAAmB,AAACG,eAAKlC;YAAzB,AAAAlB,4CAAAiD,WAAA,IAAA,nEAAOC;WAAP,AAAAlD,4CAAAiD,WAAA,IAAA,lEAAaE;AAAb,AACE,iEAAA,4GAAA,mEAAA,yEAAA,lTAAC9B,qDAAMvD,yDACMoF,sHACIC,0DACJ,AAACE,cAAInC,6DACJ,AAACK,eAAK/C,KAAK2C;;AAN7B;;;AAJJ,OAAA2B,iBAAAD;;;AAYA;;;0CAAA,kDAAAS,5FAAiBE;AAAjB,AAAA,oBAAA,AAAA7F,0DAAA2F;AAAA,WAAAA,PAEGxF;AAFH,AAGE,IAAA2F,aAAuC3F;IAAvC2F,iBAAA,AAAArF,4BAAAqF;WAAA,AAAApF,4CAAAoF,eAAA,lEAAcjF;aAAd,AAAAH,4CAAAoF,eAAA,pEAAmBxC;WAAnB,AAAA5C,4CAAAoF,eAAA,lEAA0BvC;YAA1B,AAAA7C,4CAAAoF,eAAA,nEAA+BtC;AAA/B,AACE,oBAAI,iBAAAmB,oBAAKrB;AAAL,AAAA,oBAAAqB;AAAY,OAACjF,cAAI6D;;AAAjBoB;;;AACF,IAAAoB,aAAmB,AAAChE,gBAAMwB;YAA1B,AAAAlB,4CAAA0D,WAAA,IAAA,nEAAOR;WAAP,AAAAlD,4CAAA0D,WAAA,IAAA,lEAAaP;AAAb,AACE,iEAAA,4GAAA,mEAAA,qDAAA,iCAAA,/TAAC9B,qDAAMvD,yDACMoF,sHACIC,kJAEH,wIAAA,xIAAC7B,sDAAO,AAAC7B,4CAAIC,gBAAM,AAACiE,eAAKzC,0FAAQ1C,+DAAM2C;;AACvDrD;;;AAXN,OAAAyF,qBAAAD;;;AAaA;;;;6CAAA,qDAAAM,SAAAC,3GAAiBE;AAAjB,AAAA,oBAAA,AAAApG,0DAAAiG;AAAA,WAAAA,PAGG9F;WAHH+F,PAGQG;AAHR,AAIE,IAAAC,aAAqCnG;IAArCmG,iBAAA,AAAA7F,4BAAA6F;aAAA,AAAA5F,4CAAA4F,eAAA,pEAAchD;eAAd,AAAA5C,4CAAA4F,eAAA,tEAAqB9B;WAArB,AAAA9D,4CAAA4F,eAAA,lEAA8B/C;AAA9B,AACE,GAAA,AAAAgD,cAAQjD;AACN,MAAO,gDAAA,4BAAA,5EAACxC;;AACR,iEAAA,6DAAA,uDAAA,iNAAA,/XAAC4C,qDAAMvD,8KAEM,kDAAA,lDAACyE,6CAAKrB,wFAAM8C,KAAK7B,gFACb,AAAC/C,wCAAa+C,SAAS,AAAC9C,kCAAY2E;;;AAV3D,OAAAF,wBAAAF,SAAAC;;;AAYA;;;;8CAAA,sDAAAM,SAAAC,7GAAiBE;AAAjB,AAAA,oBAAA,AAAA3G,0DAAAwG;AAAA,WAAAA,PAGGrG;WAHHsG,PAGQJ;AAHR,AAIE,IAAAO,aAA6BzG;IAA7ByG,iBAAA,AAAAnG,4BAAAmG;aAAA,AAAAlG,4CAAAkG,eAAA,pEAActD;YAAd,AAAA5C,4CAAAkG,eAAA,nEAAqBpD;AAArB,AACE,GAAA,AAAA+C,cAAQjD;AACN,MAAO,gDAAA,6BAAA,7EAACxC;;AACR,iEAAA,6DAAA,uDAAA,9KAAC4C,qDAAMvD,gLAEO,AAACyD,eAAKyC,KAAK7C;;;AAT/B,OAAAkD,yBAAAF,SAAAC;;;AAWA;;;yCAAA,iDAAAI,SAAAC,nGAAiBE;AAAjB,AAAA,oBAAA,AAAAhH,0DAAA6G;AAAA,WAAAA,PAEG1G;WAFH2G,PAEQjG;AAFR,AAGE,iEAAA,6DAAA,uDAAA,9KAAC6C,qDAAMvD,6KAA0BU;;AAHnC,OAAAkG,oBAAAF,SAAAC;;;AAKA,AAAA;;;;;sCAAA,8CAAAG,pFAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,2EAAA,3EAAME,sFAIHpH,KAAKyH,EAAIC;AAJZ,AAKE,oBAAI,AAAChI,oDAAeM;AAClB,OAAC6G,uCAAQ7G,KAAK,AAAC2H,8CAAMF,EAAE,AAAC1H,oCAAKC,MAAM0H;;AACnC,OAACC,8CAAMC,iBAAa5H,KAAKyH,EAAEC;;;;AAP/B,CAAA,8DAAA,9DAAMN;;AAAN;AAAA,CAAA,wDAAA,WAAAC,nEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAA1F,gBAAAyF;IAAAA,eAAA,AAAA/E,eAAA+E;IAAAE,WAAA,AAAA3F,gBAAAyF;IAAAA,eAAA,AAAA/E,eAAA+E;AAAA,AAAA,IAAAG,qBAAA;AAAA,AAAA,OAAAA,wDAAAF,SAAAC,SAAAF;;;AAAA,AASA;;;;8CAAA,sDAAAQ,SAAAC,7GAAiBE;AAAjB,AAAA,oBAAA,AAAAnI,0DAAAgI;AAAA,WAAAA,PAGG7H;WAHH8H,PAGQ5B;AAHR,AAIE,OAACW,uCAAQ7G,KAAK,AAACgB,yCAAUhB,KAAK,AAACD,oCAAKC,MAAM,AAACyD,eAAKyC,KAAK,AAACzF,wCAAST;;AAJjE,OAAA+H,yBAAAF,SAAAC;;;AAMA;;;;8CAAA,sDAAAG,SAAAC,7GAAiBE;AAAjB,AAAA,oBAAA,AAAAvI,0DAAAoI;AAAA,WAAAA,PAGGjI;WAHHkI,PAGQhC;AAHR,AAIE,OAACW,uCAAQ7G,KAAK,AAACgB,yCAAUhB,KAAK,AAACD,oCAAKC,MAAM,6FAAA,7FAACwD,+CAAO,AAAC/C,wCAAST,yFAAOkG;;AAJrE,OAAAiC,yBAAAF,SAAAC;;;AAMA;;;;;sCAAA,8CAAAG,pFAAiBE;AAAjB,AAAA,oBAAA,AAAA1I,0DAAAwI;AAAA,WAAAA,PAIGrI;AAJH,AAKE,oBAAI,AAAA,oFAAOA;AACTA;;AACA,IAAAwI,mBACC,iBAAAhE,oBAAK,AAACrE,6CAAQH;AAAd,AAAA,oBAAAwE;AAAoB,OAACzC,oCAAK/B;;AAA1BwE;;;AADD,AAAA,oBAAAgE;AAAAA;;AAAA,IAAAA,uBAEC,AAACxE,qCAAMhE;AAFR,AAAA,oBAAAwI;AAAAA;;AAGC,IAAO3E,IAAE7D;;AAAT,AACE,oBAAI,AAACiD,kCAAGY;AACN,IAAA2E,uBAAI,AAACxE,qCAAM,AAACf,kCAAGY;AAAf,AAAA,oBAAA2E;AAAAA;;AAAmB,eAAO,AAACvF,kCAAGY;;;;;AAC9B,uDAAA,sDAAA,tGAACN,8CAAMM;;;;;;;;AAbhB,OAAAyE,iBAAAD;;;AAeA;;;;sCAAA,8CAAAI,pFAAiBE;AAAjB,AAAA,oBAAA,AAAA9I,0DAAA4I;AAAA,WAAAA,PAGGzI;AAHH,AAIE,IAAA6E,qBAAc,AAACI,oCAAKjF;AAApB,AAAA,oBAAA6E;AAAA,WAAAA,PAAS+D;AAAT,AACE,IAAO5I,WAAK4I;;AAAZ,AACE,IAAA/D,yBAAe,iBAAAL,oBAAK,AAACrE,6CAAQH;AAAd,AAAA,oBAAAwE;AAAoB,OAACzC,oCAAK/B;;AAA1BwE;;;AAAf,AAAA,oBAAAK;AAAA,YAAAA,RAASgE;AAAT,AACE,eAAO,AAACjE,yCAAUiE;;;;AAClB7I;;;;;AACJ,OAACiD,kCAAGjD;;;AATR,OAAA0I,iBAAAD;;;AAWA;;;4CAAA,oDAAAK,hGAAiBE;AAAjB,AAAA,oBAAA,AAAAnJ,0DAAAiJ;AAAA,WAAAA,PAEG9I;AAFH,AAGE,OAAA,oFAAOA;;AAHT,OAAA+I,uBAAAD;;;AAKA;;;;wCAAA,gDAAAG,xFAAiBE;AAAjB,AAAA,oBAAA,AAAAtJ,0DAAAoJ;AAAA,WAAAA,PAGGjJ;AAHH,AAIE,IAAAoJ,aAAkCpJ;IAAlCoJ,iBAAA,AAAA9I,4BAAA8I;aAAA,AAAA7I,4CAAA6I,eAAA,pEAAcjG;WAAd,AAAA5C,4CAAA6I,eAAA,lEAAqBhG;YAArB,AAAA7C,4CAAA6I,eAAA,nEAA0B/F;AAA1B,AACE,GAAA,AAAA+C,cAAQjD;AACN,MAAO,gDAAA,uBAAA,vEAACxC;;AACR,GAAI,AAACpB,cAAI6D;AACP,IAAOpD,WAAK,iBAAAqJ,aAAmB,AAAC/D,eAAKlC;YAAzB,AAAAlB,4CAAAmH,WAAA,IAAA,nEAAOjE;WAAP,AAAAlD,4CAAAmH,WAAA,IAAA,lEAAahE;AAAb,AACC,iEAAA,6DAAA,uDAAA,mEAAA,0DAAA,3SAAC9B,qDAAMvD,uLAEUqF,yDACJD,2DACA,AAACG,cAAInC;;;AAL/B,AAME,IAAAyB,qBAAe,iBAAAL,oBAAK,AAACrE,6CAAQH;AAAd,AAAA,oBAAAwE;AAAoB,OAACzC,oCAAK/B;;AAA1BwE;;;AAAf,AAAA,oBAAAK;AAAA,YAAAA,RAASgE;AAAT,AACE,eAAO,AAACjE,yCAAUiE;;;;AAClB7I;;;;;AACJ,mEAAA,6DAAA,uDAAA,hLAACuD,qDAAMJ,+KAEM,AAACnC,yCAAUhB,KAAK,AAAA,kFAAOmD,QAAQE;;;;AAnBpD,OAAA6F,mBAAAD","names",["rewrite-clj.custom-zipper.core/custom-zipper","root","rewrite-clj.custom-zipper.core/zipper","clojure.zip/zipper","rewrite-clj.node.protocols/inner?","cljs.core.comp","cljs.core/seq","rewrite-clj.node.protocols/children","rewrite-clj.node.protocols/replace-children","rewrite-clj.custom-zipper.core/custom-zipper?","value","G__31201","rewrite-clj.custom-zipper.switchable/custom-zipper?","clojure.zip/node","rewrite-clj.custom-zipper.core/node","zloc","G__31211","clojure.zip/branch?","rewrite-clj.custom-zipper.core/branch?","G__31213","map__31214","cljs.core/--destructure-map","cljs.core.get","clojure.zip/children","rewrite-clj.custom-zipper.core/children","node","cljs.core.ex_info","G__31215","G__31216","G__31217","clojure.zip/make-node","rewrite-clj.custom-zipper.core/make-node","_zloc","children","rewrite-clj.custom-zipper.core/position","rewrite-clj.custom-zipper.core/position-span","start-pos","rewrite-clj.node.protocols/+extent","rewrite-clj.node.protocols/extent","G__31223","clojure.zip/lefts","rewrite-clj.custom-zipper.core/lefts","cljs.core.map","cljs.core/first","G__31224","clojure.zip/down","rewrite-clj.custom-zipper.core/down","map__31225","vec__31226","cljs.core.nth","vec__31229","seq__31230","first__31231","cljs.core/next","row","col","c","cnext","cs","cljs.core/with-meta","rewrite-clj.node.protocols/leader-length","cljs.core/meta","G__31232","clojure.zip/up","rewrite-clj.custom-zipper.core/up","map__31233","parent","left","right","changed?","cljs.core.assoc","cljs.core.concat","cljs.core/cons","G__31234","clojure.zip/root","rewrite-clj.custom-zipper.core/root","p","G__31236","clojure.zip/right","rewrite-clj.custom-zipper.core/right","map__31242","vec__31243","seq__31244","first__31245","position","r","rnext","and__5043__auto__","cljs.core.conj","G__31246","clojure.zip/rightmost","rewrite-clj.custom-zipper.core/rightmost","temp__5802__auto__","next","G__31249","clojure.zip/left","rewrite-clj.custom-zipper.core/left","map__31250","vec__31251","lnode","lpos","cljs.core/peek","cljs.core/pop","G__31254","clojure.zip/leftmost","rewrite-clj.custom-zipper.core/leftmost","map__31255","vec__31256","cljs.core/rest","G__31260","G__31261","clojure.zip/insert-left","rewrite-clj.custom-zipper.core/insert-left","item","map__31263","cljs.core/not","G__31264","G__31265","clojure.zip/insert-right","rewrite-clj.custom-zipper.core/insert-right","map__31266","G__31269","G__31270","clojure.zip/replace","rewrite-clj.custom-zipper.core/replace","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","rewrite-clj.custom-zipper.core/edit","seq31277","G__31278","G__31279","self__5754__auto__","f","args","cljs.core.apply","clojure.zip/edit","G__31298","G__31299","clojure.zip/insert-child","rewrite-clj.custom-zipper.core/insert-child","G__31300","G__31301","clojure.zip/append-child","rewrite-clj.custom-zipper.core/append-child","G__31303","clojure.zip/next","rewrite-clj.custom-zipper.core/next","or__5045__auto__","G__31307","clojure.zip/prev","rewrite-clj.custom-zipper.core/prev","lloc","child","G__31308","clojure.zip/end?","rewrite-clj.custom-zipper.core/end?","G__31309","clojure.zip/remove","rewrite-clj.custom-zipper.core/remove","map__31310","vec__31314"]],"~:used-vars",["^X",["~$rewrite-clj.custom-zipper.core/insert-left","~$cljs.core/--destructure-map","~$clojure.zip/children","~$rewrite-clj.custom-zipper.core/prev","~$cljs.core/comp","~$cljs.core/rest","~$rewrite-clj.custom-zipper.core/rightmost","~$clojure.zip/down","~$clojure.zip/node","~$clojure.zip/branch?","~$rewrite-clj.custom-zipper.core/right","~$rewrite-clj.custom-zipper.core/lefts","~$rewrite-clj.custom-zipper.core/root","~$rewrite-clj.custom-zipper.switchable/custom-zipper?","~$clojure.zip/end?","~$cljs.core/IndexedSeq","~$rewrite-clj.node.protocols/children","~$cljs.core/seq","~$cljs.core/apply","~$rewrite-clj.custom-zipper.core/end?","~$rewrite-clj.node.protocols/leader-length","~$clojure.zip/edit","~$rewrite-clj.node.protocols/inner?","~$rewrite-clj.custom-zipper.core/remove","~$cljs.core/concat","~$cljs.core/pop","~$rewrite-clj.custom-zipper.core/left","~$clojure.zip/make-node","~$rewrite-clj.custom-zipper.core/custom-zipper","~$rewrite-clj.custom-zipper.core/children","~$clojure.zip/insert-child","~$clojure.zip/up","~$cljs.core/conj","~$clojure.zip/insert-right","~$rewrite-clj.custom-zipper.core/replace","~$rewrite-clj.custom-zipper.core/zipper","~$clojure.zip/append-child","~$clojure.zip/leftmost","~$cljs.core/with-meta","~$cljs.core/peek","~$cljs.core/map","~$rewrite-clj.node.protocols/replace-children","~$rewrite-clj.node.protocols/+extent","~$rewrite-clj.custom-zipper.core/up","~$clojure.zip/root","~$cljs.core/get","~$clojure.zip/next","~$clojure.zip/insert-left","~$clojure.zip/prev","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/meta","~$rewrite-clj.custom-zipper.core/node","~$clojure.zip/remove","~$rewrite-clj.custom-zipper.core/down","~$rewrite-clj.custom-zipper.core/position-span","~$clojure.zip/lefts","~$clojure.zip/right","~$cljs.core/next","~$rewrite-clj.custom-zipper.core/branch?","~$rewrite-clj.custom-zipper.core/insert-child","~$rewrite-clj.custom-zipper.core/position","~$rewrite-clj.custom-zipper.core/make-node","~$cljs.core/not","~$cljs.core/cons","~$cljs.core/assoc","~$rewrite-clj.custom-zipper.core/custom-zipper?","~$rewrite-clj.custom-zipper.core/insert-right","~$clojure.zip/zipper","~$clojure.zip/replace","~$rewrite-clj.custom-zipper.core/append-child","~$rewrite-clj.custom-zipper.core/leftmost","~$cljs.core/first","~$rewrite-clj.custom-zipper.core/edit","~$clojure.zip/rightmost","~$rewrite-clj.node.protocols/extent","~$clojure.zip/left","~$rewrite-clj.custom-zipper.core/next"]]],"~:cache-keys",["~#cmap",[["^1L","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^X",[]],"~:deps-syms",["^1<","~$goog.dom.HtmlElement"]]],["^1L","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","~$goog.string"]]],["^1L","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1L","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3Y"]]],["^1L","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3Z"]]],["^1L","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3Z"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^1L","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3Z","~$goog.reflect"]]],["^1L","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3Z","~$goog.fs.blob","^3[","~$goog.html.SafeScript","~$goog.html.trustedtypes","^41","^42","^43","^44"]]],["^1L","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^43","~$goog.html.SafeUrl","^44","^3Z","^3Y"]]],["^1L","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3Z","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^48","~$goog.html.SafeStyle","^4:","^40","~$goog.html.uncheckedconversions","^43","^3Y"]]],["^1L","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^43","^41","^42","^48","^4>","~$goog.html.SafeStyleSheet","^4:","~$goog.dom.TagName","^40","^44","^3Z","~$goog.labs.userAgent.browser","^3V","^3W","^3Y","~$goog.dom.tags","^49"]]],["^1L","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3W"]]],["^1L","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","rewrite_clj/node/protocols.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^1;","~$clojure.string","~$rewrite-clj.interop"]]],["^1L","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1L","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3V","^3Z","~$goog.collections.maps","^3U","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1L","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",[]]],["^1L","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3V","^3W"]]],["^1L","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^1;","^3U","~$goog.string.StringBuffer"]]],["^1L","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","~$goog.dom.safe","^4?","^43","^3Y"]]],["^1L","rewrite_clj/custom_zipper/core.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^1;","^17","^V","^19"]]],["^1L","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","~$goog.labs.userAgent","^3Y"]]],["^1L","clojure/zip.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^1;"]]],["^1L","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3Z","^4=","^48","^4>","^4@","^4:","^40","^43","^3Y","^41"]]],["^1L","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<"]]],["^1L","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","~$goog.math.Long","~$goog.math.Integer","^3U","^3W","^3V","~$goog.Uri","^4M"]]],["^1L","rewrite_clj/custom_zipper/switchable.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^1;"]]],["^1L","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^43","^44","^49","^3Z"]]],["^1L","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^43","^4>","^44","^3W","^3Z","^3Y"]]],["^1L","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^46"]]],["^1L","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3Z","^3U"]]],["^1L","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^3Z","^44"]]],["^1L","rewrite_clj/interop.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3P",["^ ","^3Q",null,"^3R",["^X",[]],"^3S",["^1<","^1;","^3U","~$goog.string.format"]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/custom_zipper/switchable.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","This is the underlying zipper that rewrite-clj uses.\n\n   It delegates to two different zipper implementations:\n   1. the code herein under defn-switchable bodies when the user has created a `:position-tracking` zipper\n   2. otherwise clojure.zip, with some small exceptions:\n      - `edit` explicitly handles the delegation - I assume because defn-switchable could not handle the argument delegation\n      - there are fns exclusive to the position trakcing zipper, `position`, `position-span`","^7","rewrite_clj/custom_zipper/core.cljc","^8",14,"^9",14,"^:",14,"^;",44,"^<",true],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q","^R","^S"],"^T",["^ ","^U","^V"],"^W",["^X",["^Y","^Z","^["]],"^10","^11","^12",["^ "],"^15",null,"^16",["^ ","^17","^17","^18","^17","^V","^V","^19","^19","^1:","^19","^1;","^1;","^1<","^1<"],"^1=",["^X",["^1>","^1?"]],"^1@",["^ ","^U","^V"],"~:defs",["^ ","~$rightmost",["^ ","~:protocol-inline",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",156,"^9",18,"^:",156,"^;",27,"~:arglists",["^1B",["~$quote",["^1B",[["~$zloc"]]]]],"^6","Returns zipper with location at the rightmost sibling of the current node in `zloc`, or self."],"^10","^22","^7","rewrite_clj/custom_zipper/core.cljc","^;",27,"~:method-params",["^1B",[["~$G__31246"]]],"~:protocol-impl",null,"~:arglists-meta",["^1B",[null,null]],"^9",1,"~:variadic?",false,"^8",156,"~:ret-tag",["^X",[null,"~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^:",156,"~:max-fixed-arity",1,"~:fn-var",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the rightmost sibling of the current node in `zloc`, or self."],"~$insert-child",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",225,"^9",18,"^:",225,"^;",30,"^5L",["^1B",["^5M",["^1B",[["^5N","~$item"]]]]],"^6","Returns zipper with `item` inserted as the leftmost child of the current node in `zloc`,\n  without moving location."],"^10","^3<","^7","rewrite_clj/custom_zipper/core.cljc","^;",30,"^5O",["^1B",[["~$G__31298","~$G__31299"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",225,"^5T",["^X",["^5U","~$any","^5V","^5W"]],"^:",225,"^5X",2,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N","^5["]]]]],"^6","Returns zipper with `item` inserted as the leftmost child of the current node in `zloc`,\n  without moving location."],"~$left",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",163,"^9",18,"^:",163,"^;",22,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the left sibling of the current node in `zloc`, or nil."],"^10","^2F","^7","rewrite_clj/custom_zipper/core.cljc","^;",22,"^5O",["^1B",[["~$G__31249"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",163,"^5T",["^X",["^5U","^62","^5V","^5W"]],"^:",163,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the left sibling of the current node in `zloc`, or nil."],"~$leftmost",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",175,"^9",18,"^:",175,"^;",26,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the leftmost sibling of the current node in `zloc`, or self."],"^10","^3G","^7","rewrite_clj/custom_zipper/core.cljc","^;",26,"^5O",["^1B",[["~$G__31254"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",175,"^5T",["^X",[null,"^5U","^62","^5V","^5W"]],"^:",175,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the leftmost sibling of the current node in `zloc`, or self."],"~$append-child",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",231,"^9",18,"^:",231,"^;",30,"^5L",["^1B",["^5M",["^1B",[["^5N","^5["]]]]],"^6","Returns zipper with `item` inserted as the rightmost child of the current node in `zloc`,\n  without moving."],"^10","^3F","^7","rewrite_clj/custom_zipper/core.cljc","^;",30,"^5O",["^1B",[["~$G__31300","~$G__31301"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",231,"^5T",["^X",["^5U","^62","^5V","^5W"]],"^:",231,"^5X",2,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N","^5["]]]]],"^6","Returns zipper with `item` inserted as the rightmost child of the current node in `zloc`,\n  without moving."],"~$branch?",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",60,"^9",18,"^:",60,"^;",25,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns true if the current node in `zloc` is a branch."],"^10","^3;","^7","rewrite_clj/custom_zipper/core.cljc","^;",25,"^5O",["^1B",[["~$G__31211"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",60,"^5T","^62","^:",60,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns true if the current node in `zloc` is a branch."],"~$children",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",65,"^9",18,"^:",65,"^;",26,"^5L",["^1B",["^5M",["^1B",[[["^ ","~:keys",["^1:"],"^1F","^5N"]]]]]],"^6","Returns a seq of the children of current node in `zloc`, which must be a branch."],"^10","^2I","^7","rewrite_clj/custom_zipper/core.cljc","^;",26,"^5O",["^1B",[["~$G__31213"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",65,"^5T",["^X",["~$seq","^62"]],"^:",65,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[[["^ ","^6=",["^1:"],"^1F","^5N"]]]]]],"^6","Returns a seq of the children of current node in `zloc`, which must be a branch."],"~$custom-zipper",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",32,"^9",7,"^:",32,"^;",20,"^5L",["^1B",["^5M",["^1B",[["~$root"]]]]]],"^10","^2H","^7","rewrite_clj/custom_zipper/core.cljc","^;",20,"^5O",["^1B",[["^6A"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",32,"^5T","~$cljs.core/IMap","^:",32,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^6A"]]]]]],"^Y",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",268,"^9",18,"^:",268,"^;",24,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with current node in `zloc` removed, with location at node that would have preceded\n  it in a depth-first walk."],"^10","^2C","^7","rewrite_clj/custom_zipper/core.cljc","^;",24,"^5O",["^1B",[["~$G__31309"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",268,"^5T",["^X",[null,"^5U","^62","^5V","^5W"]],"^:",268,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with current node in `zloc` removed, with location at node that would have preceded\n  it in a depth-first walk."],"~$down",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",104,"^9",18,"^:",104,"^;",22,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with the location at the leftmost child of current node in `zloc`, or\n  nil if no children."],"^10","^36","^7","rewrite_clj/custom_zipper/core.cljc","^;",22,"^5O",["^1B",[["~$G__31224"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",104,"^5T",["^X",["^5U","^5V","^5W"]],"^:",104,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with the location at the leftmost child of current node in `zloc`, or\n  nil if no children."],"^Z",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",211,"^9",18,"^:",211,"^;",25,"^5L",["^1B",["^5M",["^1B",[["^5N","^1:"]]]]],"^6","Returns zipper with `node` replacing current node in `zloc`, without moving location."],"^10","^2N","^7","rewrite_clj/custom_zipper/core.cljc","^;",25,"^5O",["^1B",[["~$G__31269","~$G__31270"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",211,"^5T",["^X",["^5U","^62","^5V","^5W"]],"^:",211,"^5X",2,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N","^1:"]]]]],"^6","Returns zipper with `node` replacing current node in `zloc`, without moving location."],"~$zipper",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",41,"^9",7,"^:",41,"^;",13,"^5L",["^1B",["^5M",["^1B",[["^6A"]]]]]],"^10","^2O","^7","rewrite_clj/custom_zipper/core.cljc","^;",13,"^5O",["^1B",[["^6A"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",41,"^5T","^62","^:",41,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^6A"]]]]]],"~$end?",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",263,"^9",18,"^:",263,"^;",22,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns true if at end of depth-first walk in `zloc`."],"^10","^2?","^7","rewrite_clj/custom_zipper/core.cljc","^;",22,"^5O",["^1B",[["~$G__31308"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",263,"^5T",["^X",["~$boolean","^62"]],"^:",263,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns true if at end of depth-first walk in `zloc`."],"~$edit",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",216,"^9",7,"^:",216,"^;",11,"^5L",["^1B",["^5M",["^1B",[["^5N","~$f","~$&","~$args"]]]]],"^6","Returns zipper with value of `(apply f current-node args)` replacing current node in `zloc`.\n   \n   The result of `f` should be a rewrite-clj node.","~:top-fn",["^ ","^5S",true,"~:fixed-arity",2,"^5X",2,"^5O",[["^1B",["^5N","~$f","^6M"]]],"^5L",["^1B",[["^5N","~$f","~$&","^6M"]]],"^5R",["^1B",[null]]]],"^10","^3I","^7","rewrite_clj/custom_zipper/core.cljc","^;",11,"^6N",["^ ","^5S",true,"^6O",2,"^5X",2,"^5O",[["^1B",["^5N","~$f","^6M"]]],"^5L",["^1B",[["^5N","~$f","~$&","^6M"]]],"^5R",["^1B",[null]]],"^5O",[["^1B",["^5N","~$f","^6M"]]],"^5Q",null,"^6O",2,"^5R",["^1B",[null]],"^9",1,"^5S",true,"~:methods",[["^ ","^6O",2,"^5S",true,"~:tag",["^X",["^5U","^62","^5V","^5W"]]]],"^8",216,"^5T","^62","^:",216,"^5X",2,"^5Y",true,"^5L",["^1B",[["^5N","~$f","~$&","^6M"]]],"^6","Returns zipper with value of `(apply f current-node args)` replacing current node in `zloc`.\n   \n   The result of `f` should be a rewrite-clj node."],"~$position-span",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",90,"^9",7,"^:",90,"^;",20,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\n  `end-col` is exclusive.\n\n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking)."],"^10","^37","^7","rewrite_clj/custom_zipper/core.cljc","^;",20,"^5O",["^1B",[["^5N"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",90,"^5T","~$cljs.core/IVector","^:",90,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\n  `end-col` is exclusive.\n\n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking)."],"~$make-node",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",72,"^9",18,"^:",72,"^;",27,"^5L",["^1B",["^5M",["^1B",[["~$_zloc","^1:","^6<"]]]]],"^6","Returns a new branch node, given an existing `node` and new\n  `children`. "],"^10","^3>","^7","rewrite_clj/custom_zipper/core.cljc","^;",27,"^5O",["^1B",[["~$G__31215","~$G__31216","~$G__31217"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",72,"^5T","^62","^:",72,"^5X",3,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^6U","^1:","^6<"]]]]],"^6","Returns a new branch node, given an existing `node` and new\n  `children`. "],"^1:",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",55,"^9",18,"^:",55,"^;",22,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns the current node in `zloc`."],"^10","^34","^7","rewrite_clj/custom_zipper/core.cljc","^;",22,"^5O",["^1B",[["~$G__31201"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",55,"^5T","^62","^:",55,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns the current node in `zloc`."],"~$up",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",121,"^9",18,"^:",121,"^;",20,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with the location at the parent of current node in `zloc`, or nil if at\n  the top."],"^10","^2W","^7","rewrite_clj/custom_zipper/core.cljc","^;",20,"^5O",["^1B",[["~$G__31232"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",121,"^5T",["^X",["^5U","^62","^5V","^5W"]],"^:",121,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with the location at the parent of current node in `zloc`, or nil if at\n  the top."],"~$insert-right",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",200,"^9",18,"^:",200,"^;",30,"^5L",["^1B",["^5M",["^1B",[["^5N","^5["]]]]],"^6","Returns zipper with `item` inserted as the right sibling of the current node in `zloc`,\n  without moving location."],"^10","^3C","^7","rewrite_clj/custom_zipper/core.cljc","^;",30,"^5O",["^1B",[["~$G__31264","~$G__31265"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",200,"^5T",["^X",["^5U","^62","^5V","^5W"]],"^:",200,"^5X",2,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N","^5["]]]]],"^6","Returns zipper with `item` inserted as the right sibling of the current node in `zloc`,\n  without moving location."],"~$custom-zipper?",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",49,"^9",7,"^:",49,"^;",21,"^5L",["^1B",["^5M",["^1B",[["~$value"]]]]]],"^10","^3B","^7","rewrite_clj/custom_zipper/core.cljc","^;",21,"^5O",["^1B",[["^74"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",49,"^5T","^62","^:",49,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^74"]]]]]],"^6A",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",135,"^9",18,"^:",135,"^;",22,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Zips all the way up `zloc` and returns the root node, reflecting any changes."],"^10","^28","^7","rewrite_clj/custom_zipper/core.cljc","^;",22,"^5O",["^1B",[["~$G__31234"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",135,"^5T","^62","^:",135,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Zips all the way up `zloc` and returns the root node, reflecting any changes."],"^[",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",237,"^9",18,"^:",237,"^;",22,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n  When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n  at the end, stays there."],"^10","^3M","^7","rewrite_clj/custom_zipper/core.cljc","^;",22,"^5O",["^1B",[["~$G__31303"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",237,"^5T",["^X",[null,"^5U","^6S","^62","^5V"]],"^:",237,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n  When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n  at the end, stays there."],"~$insert-left",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",188,"^9",18,"^:",188,"^;",29,"^5L",["^1B",["^5M",["^1B",[["^5N","^5["]]]]],"^6","Returns zipper with `item` inserted as the left sibling of current node in `zloc`,\n without moving location."],"^10","^1X","^7","rewrite_clj/custom_zipper/core.cljc","^;",29,"^5O",["^1B",[["~$G__31260","~$G__31261"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",188,"^5T",["^X",["^5U","^62","^5V","^5W"]],"^:",188,"^5X",2,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N","^5["]]]]],"^6","Returns zipper with `item` inserted as the left sibling of current node in `zloc`,\n without moving location."],"~$prev",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",252,"^9",18,"^:",252,"^;",22,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n  If already at the root, returns nil."],"^10","^1[","^7","rewrite_clj/custom_zipper/core.cljc","^;",22,"^5O",["^1B",[["~$G__31307"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",252,"^5T",["^X",[null,"^5U","^62","^5V","^5W"]],"^:",252,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n  If already at the root, returns nil."],"~$right",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",145,"^9",18,"^:",145,"^;",23,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the right sibling of the current node in `zloc`, or nil."],"^10","^26","^7","rewrite_clj/custom_zipper/core.cljc","^;",23,"^5O",["^1B",[["~$G__31236"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",145,"^5T",["^X",["^5U","^62","^5V","^5W"]],"^:",145,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns zipper with location at the right sibling of the current node in `zloc`, or nil."],"~$lefts",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",99,"^9",18,"^:",99,"^;",23,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns a seq of the left siblings of current node in `zloc`."],"^10","^27","^7","rewrite_clj/custom_zipper/core.cljc","^;",23,"^5O",["^1B",[["~$G__31223"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",99,"^5T",["^X",["^6?","~$cljs.core/LazySeq"]],"^:",99,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns a seq of the left siblings of current node in `zloc`."],"~$position",["^ ","^5K",null,"^5",["^ ","^7","rewrite_clj/custom_zipper/core.cljc","^8",78,"^9",7,"^:",78,"^;",15,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns the ones-based `[row col]` of the start of the current node in `zloc`.\n   \n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking)."],"^10","^3=","^7","rewrite_clj/custom_zipper/core.cljc","^;",15,"^5O",["^1B",[["^5N"]]],"^5Q",null,"^5R",["^1B",[null,null]],"^9",1,"^5S",false,"^8",78,"^5T","^62","^:",78,"^5X",1,"^5Y",true,"^5L",["^1B",["^5M",["^1B",[["^5N"]]]]],"^6","Returns the ones-based `[row col]` of the start of the current node in `zloc`.\n   \n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking)."]],"^1?",["^ ","^V","^V","^1;","^1;"],"~:cljs.analyzer/constants",["^ ","^1=",["^X",["~:parent","~:end?","~:node","~:changed?","~:rewrite-clj.custom-zipper.core/custom?","~:right","~:position","~:left"]],"~:order",["^7G","^7E","^7I","^7C","^7J","^7H","^7F","^7D"]],"^1H",["^ ","^1>",["^X",[]],"^1?",["^X",[]]],"^1I",["^ "],"^1J",["^1<","^1;","^17","^V","^19"]],"^14","^11","~:ns-specs",["^ "],"~:ns-spec-vars",["^X",[]],"~:compiler-options",["^3O",[["^7N","~:static-fns"],true,["^7N","~:shadow-tweaks"],null,["^7N","~:source-map-inline"],null,["^7N","~:elide-asserts"],false,["^7N","~:optimize-constants"],null,["^7N","^1O"],null,["^7N","~:external-config"],null,["^7N","~:tooling-config"],null,["^7N","~:emit-constants"],null,["^7N","~:load-tests"],null,["^7N","~:form-size-threshold"],null,["^7N","~:global-goog-object&array"],null,["^7N","~:data-readers"],null,["^7N","~:infer-externs"],"~:auto",["^7N","^1Q"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7N","~:fn-invoke-direct"],null,["^7N","~:source-map"],"/dev/null"]]]