["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.node.namespaced_map');\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {rewrite_clj.node.protocols.Node}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nrewrite_clj.node.namespaced_map.MapQualifierNode = (function (auto_resolved_QMARK_,prefix,__meta,__extmap,__hash){\nthis.auto_resolved_QMARK_ = auto_resolved_QMARK_;\nthis.prefix = prefix;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.toString = (function (){\nvar self__ = this;\nvar node = this;\nreturn node.rewrite_clj$node$protocols$Node$string$arity$1(null);\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__5343__auto__,k__5344__auto__){\nvar self__ = this;\nvar this__5343__auto____$1 = this;\nreturn this__5343__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__5344__auto__,null);\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__5345__auto__,k31274,else__5346__auto__){\nvar self__ = this;\nvar this__5345__auto____$1 = this;\nvar G__31283 = k31274;\nvar G__31283__$1 = (((G__31283 instanceof cljs.core.Keyword))?G__31283.fqn:null);\nswitch (G__31283__$1) {\ncase \"auto-resolved?\":\nreturn self__.auto_resolved_QMARK_;\n\nbreak;\ncase \"prefix\":\nreturn self__.prefix;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k31274,else__5346__auto__);\n\n}\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__5363__auto__,f__5364__auto__,init__5365__auto__){\nvar self__ = this;\nvar this__5363__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__5366__auto__,p__31284){\nvar vec__31285 = p__31284;\nvar k__5367__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31285,(0),null);\nvar v__5368__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31285,(1),null);\nreturn (f__5364__auto__.cljs$core$IFn$_invoke$arity$3 ? f__5364__auto__.cljs$core$IFn$_invoke$arity$3(ret__5366__auto__,k__5367__auto__,v__5368__auto__) : f__5364__auto__.call(null,ret__5366__auto__,k__5367__auto__,v__5368__auto__));\n}),init__5365__auto__,this__5363__auto____$1);\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__5358__auto__,writer__5359__auto__,opts__5360__auto__){\nvar self__ = this;\nvar this__5358__auto____$1 = this;\nvar pr_pair__5361__auto__ = (function (keyval__5362__auto__){\nreturn cljs.core.pr_sequential_writer(writer__5359__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__5360__auto__,keyval__5362__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__5359__auto__,pr_pair__5361__auto__,\"#rewrite-clj.node.namespaced-map.MapQualifierNode{\",\", \",\"}\",opts__5360__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"auto-resolved?\",\"auto-resolved?\",-1944476351),self__.auto_resolved_QMARK_],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),self__.prefix],null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__31273){\nvar self__ = this;\nvar G__31273__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__31273__$1,2,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"auto-resolved?\",\"auto-resolved?\",-1944476351),new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__5341__auto__){\nvar self__ = this;\nvar this__5341__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__5338__auto__){\nvar self__ = this;\nvar this__5338__auto____$1 = this;\nreturn (new rewrite_clj.node.namespaced_map.MapQualifierNode(self__.auto_resolved_QMARK_,self__.prefix,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__5347__auto__){\nvar self__ = this;\nvar this__5347__auto____$1 = this;\nreturn (2 + cljs.core.count(self__.__extmap));\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__5339__auto__){\nvar self__ = this;\nvar this__5339__auto____$1 = this;\nvar h__5154__auto__ = self__.__hash;\nif((!((h__5154__auto__ == null)))){\nreturn h__5154__auto__;\n} else {\nvar h__5154__auto____$1 = (function (coll__5340__auto__){\nreturn (-426705749 ^ cljs.core.hash_unordered_coll(coll__5340__auto__));\n})(this__5339__auto____$1);\n(self__.__hash = h__5154__auto____$1);\n\nreturn h__5154__auto____$1;\n}\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this31275,other31276){\nvar self__ = this;\nvar this31275__$1 = this;\nreturn (((!((other31276 == null)))) && ((((this31275__$1.constructor === other31276.constructor)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this31275__$1.auto_resolved_QMARK_,other31276.auto_resolved_QMARK_)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this31275__$1.prefix,other31276.prefix)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this31275__$1.__extmap,other31276.__extmap)))))))));\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL);\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn new cljs.core.Keyword(null,\"map-qualifier\",\"map-qualifier\",-1248117720);\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.rewrite_clj$node$protocols$Node$node_type$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn new cljs.core.Keyword(null,\"map-qualifier\",\"map-qualifier\",-1248117720);\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn false;\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.rewrite_clj$node$protocols$Node$sexpr_STAR_$arity$2 = (function (_node,opts){\nvar self__ = this;\nvar _node__$1 = this;\nif(cljs.core.truth_(self__.auto_resolved_QMARK_)){\nvar G__31306 = (cljs.core.truth_(self__.prefix)?cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(self__.prefix):new cljs.core.Keyword(null,\"current\",\"current\",-1088038603));\nvar fexpr__31305 = (function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"auto-resolve\",\"auto-resolve\",1851201983).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn rewrite_clj.node.protocols.default_auto_resolve;\n}\n})();\nreturn (fexpr__31305.cljs$core$IFn$_invoke$arity$1 ? fexpr__31305.cljs$core$IFn$_invoke$arity$1(G__31306) : fexpr__31305.call(null,G__31306));\n} else {\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(self__.prefix);\n}\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn (((1) + (cljs.core.truth_(self__.auto_resolved_QMARK_)?(1):(0))) + cljs.core.count(self__.prefix));\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn [\":\",(cljs.core.truth_(self__.auto_resolved_QMARK_)?\":\":null),cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.prefix)].join('');\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__5353__auto__,k__5354__auto__){\nvar self__ = this;\nvar this__5353__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"auto-resolved?\",\"auto-resolved?\",-1944476351),null,new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),null], null), null),k__5354__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__5353__auto____$1),self__.__meta),k__5354__auto__);\n} else {\nreturn (new rewrite_clj.node.namespaced_map.MapQualifierNode(self__.auto_resolved_QMARK_,self__.prefix,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__5354__auto__)),null));\n}\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (this__5350__auto__,k31274){\nvar self__ = this;\nvar this__5350__auto____$1 = this;\nvar G__31317 = k31274;\nvar G__31317__$1 = (((G__31317 instanceof cljs.core.Keyword))?G__31317.fqn:null);\nswitch (G__31317__$1) {\ncase \"auto-resolved?\":\ncase \"prefix\":\nreturn true;\n\nbreak;\ndefault:\nreturn cljs.core.contains_QMARK_(self__.__extmap,k31274);\n\n}\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__5351__auto__,k__5352__auto__,G__31273){\nvar self__ = this;\nvar this__5351__auto____$1 = this;\nvar pred__31318 = cljs.core.keyword_identical_QMARK_;\nvar expr__31319 = k__5352__auto__;\nif(cljs.core.truth_((pred__31318.cljs$core$IFn$_invoke$arity$2 ? pred__31318.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"auto-resolved?\",\"auto-resolved?\",-1944476351),expr__31319) : pred__31318.call(null,new cljs.core.Keyword(null,\"auto-resolved?\",\"auto-resolved?\",-1944476351),expr__31319)))){\nreturn (new rewrite_clj.node.namespaced_map.MapQualifierNode(G__31273,self__.prefix,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__31318.cljs$core$IFn$_invoke$arity$2 ? pred__31318.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),expr__31319) : pred__31318.call(null,new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),expr__31319)))){\nreturn (new rewrite_clj.node.namespaced_map.MapQualifierNode(self__.auto_resolved_QMARK_,G__31273,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new rewrite_clj.node.namespaced_map.MapQualifierNode(self__.auto_resolved_QMARK_,self__.prefix,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__5352__auto__,G__31273),null));\n}\n}\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__5356__auto__){\nvar self__ = this;\nvar this__5356__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"auto-resolved?\",\"auto-resolved?\",-1944476351),self__.auto_resolved_QMARK_,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),self__.prefix,null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__5342__auto__,G__31273){\nvar self__ = this;\nvar this__5342__auto____$1 = this;\nreturn (new rewrite_clj.node.namespaced_map.MapQualifierNode(self__.auto_resolved_QMARK_,self__.prefix,G__31273,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__5348__auto__,entry__5349__auto__){\nvar self__ = this;\nvar this__5348__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__5349__auto__)){\nreturn this__5348__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__5349__auto__,(0)),cljs.core._nth(entry__5349__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__5348__auto____$1,entry__5349__auto__);\n}\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"auto-resolved?\",\"auto-resolved?\",-303944824,null),new cljs.core.Symbol(null,\"prefix\",\"prefix\",1374623062,null)], null);\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.cljs$lang$type = true);\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.cljs$lang$ctorPrSeq = (function (this__5389__auto__){\nreturn (new cljs.core.List(null,\"rewrite-clj.node.namespaced-map/MapQualifierNode\",null,(1),null));\n}));\n\n(rewrite_clj.node.namespaced_map.MapQualifierNode.cljs$lang$ctorPrWriter = (function (this__5389__auto__,writer__5390__auto__){\nreturn cljs.core._write(writer__5390__auto__,\"rewrite-clj.node.namespaced-map/MapQualifierNode\");\n}));\n\n/**\n * Positional factory function for rewrite-clj.node.namespaced-map/MapQualifierNode.\n */\nrewrite_clj.node.namespaced_map.__GT_MapQualifierNode = (function rewrite_clj$node$namespaced_map$__GT_MapQualifierNode(auto_resolved_QMARK_,prefix){\nreturn (new rewrite_clj.node.namespaced_map.MapQualifierNode(auto_resolved_QMARK_,prefix,null,null,null));\n});\n\n/**\n * Factory function for rewrite-clj.node.namespaced-map/MapQualifierNode, taking a map of keywords to field values.\n */\nrewrite_clj.node.namespaced_map.map__GT_MapQualifierNode = (function rewrite_clj$node$namespaced_map$map__GT_MapQualifierNode(G__31281){\nvar extmap__5385__auto__ = (function (){var G__31327 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__31281,new cljs.core.Keyword(null,\"auto-resolved?\",\"auto-resolved?\",-1944476351),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465)], 0));\nif(cljs.core.record_QMARK_(G__31281)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__31327);\n} else {\nreturn G__31327;\n}\n})();\nreturn (new rewrite_clj.node.namespaced_map.MapQualifierNode(new cljs.core.Keyword(null,\"auto-resolved?\",\"auto-resolved?\",-1944476351).cljs$core$IFn$_invoke$arity$1(G__31281),new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465).cljs$core$IFn$_invoke$arity$1(G__31281),null,cljs.core.not_empty(extmap__5385__auto__),null));\n});\n\n/**\n * A map node's children are a list of nodes that can contain non-sexpr-able elements (ex. whitespace).\n * \n *   Returns `children` with `f` applied sexpressable children.\n * \n *   `f` is called with\n *   - `n` - node\n *   - `is-map-key?` true if the node is in keyword position\n *   and should return `n` or a new version of `n`.\n */\nrewrite_clj.node.namespaced_map.edit_map_children = (function rewrite_clj$node$namespaced_map$edit_map_children(children,f){\nvar r = children;\nvar last_key = null;\nvar new_children = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nvar temp__5802__auto__ = cljs.core.first(r);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar n = temp__5802__auto__;\nif(cljs.core.truth_(rewrite_clj.node.protocols.printable_only_QMARK_(n))){\nvar G__31593 = cljs.core.rest(r);\nvar G__31594 = last_key;\nvar G__31595 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_children,n);\nr = G__31593;\nlast_key = G__31594;\nnew_children = G__31595;\ncontinue;\n} else {\nif(cljs.core.truth_(last_key)){\nvar G__31597 = cljs.core.rest(r);\nvar G__31598 = null;\nvar G__31599 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_children,(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(n,false) : f.call(null,n,false)));\nr = G__31597;\nlast_key = G__31598;\nnew_children = G__31599;\ncontinue;\n} else {\nvar G__31601 = cljs.core.rest(r);\nvar G__31602 = n;\nvar G__31603 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_children,(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(n,true) : f.call(null,n,true)));\nr = G__31601;\nlast_key = G__31602;\nnew_children = G__31603;\ncontinue;\n}\n}\n} else {\nreturn new_children;\n}\nbreak;\n}\n});\n/**\n * Apply the context of the qualified map to the keyword keys in the map.\n * \n *   Strips context from keyword-nodes not in keyword position and adds context to keyword nodes in keyword position.\n */\nrewrite_clj.node.namespaced_map.apply_context_to_map = (function rewrite_clj$node$namespaced_map$apply_context_to_map(m_node,q_node){\nreturn rewrite_clj.node.protocols.replace_children(m_node,rewrite_clj.node.namespaced_map.edit_map_children(rewrite_clj.node.protocols.children(m_node),(function (n,is_map_key_QMARK_){\nif((((!((n == null))))?((((false) || ((cljs.core.PROTOCOL_SENTINEL === n.rewrite_clj$node$protocols$MapQualifiable$))))?true:(((!n.cljs$lang$protocol_mask$partition$))?cljs.core.native_satisfies_QMARK_(rewrite_clj.node.protocols.MapQualifiable,n):false)):cljs.core.native_satisfies_QMARK_(rewrite_clj.node.protocols.MapQualifiable,n))){\nif(cljs.core.truth_(is_map_key_QMARK_)){\nreturn rewrite_clj.node.protocols.map_context_apply(n,q_node);\n} else {\nreturn rewrite_clj.node.protocols.map_context_clear(n);\n}\n} else {\nreturn n;\n}\n})));\n});\nrewrite_clj.node.namespaced_map.apply_context = (function rewrite_clj$node$namespaced_map$apply_context(children){\nvar q_node = cljs.core.first(children);\nvar m_node = cljs.core.last(children);\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(children),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [rewrite_clj.node.namespaced_map.apply_context_to_map(m_node,q_node)], null));\n});\n/**\n * Namespaced map qualifier context is automatically applied to keyword children of contained map automatically on:\n *   - [[node/namespaced-map-node]] creation (i.e. at parse time)\n *   - [[node/replace-children]]\n * \n *   If you make changes outside these techniques, call this function to reapply the qualifier context.\n * \n *   This is only necessary if you need `sexpr` on map keywords to reflect the namespaced map qualifier.\n * \n *   Returns `n` if not a namespaced map node.\n */\nrewrite_clj.node.namespaced_map.reapply_namespaced_map_context = (function rewrite_clj$node$namespaced_map$reapply_namespaced_map_context(n){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"namespaced-map\",\"namespaced-map\",1235665380),rewrite_clj.node.protocols.tag(n))){\nreturn rewrite_clj.node.protocols.replace_children(n,rewrite_clj.node.namespaced_map.apply_context(rewrite_clj.node.protocols.children(n)));\n} else {\nreturn n;\n}\n});\n/**\n * Assumes that appropriate qualifier context has been applied to contained map.\n */\nrewrite_clj.node.namespaced_map.namespaced_map_sexpr = (function rewrite_clj$node$namespaced_map$namespaced_map_sexpr(children,opts){\nreturn rewrite_clj.node.protocols.sexpr.cljs$core$IFn$_invoke$arity$2(cljs.core.last(children),opts);\n});\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {rewrite_clj.node.protocols.InnerNode}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {rewrite_clj.node.protocols.Node}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nrewrite_clj.node.namespaced_map.NamespacedMapNode = (function (children,__meta,__extmap,__hash){\nthis.children = children;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.toString = (function (){\nvar self__ = this;\nvar node = this;\nreturn node.rewrite_clj$node$protocols$Node$string$arity$1(null);\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__5343__auto__,k__5344__auto__){\nvar self__ = this;\nvar this__5343__auto____$1 = this;\nreturn this__5343__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__5344__auto__,null);\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__5345__auto__,k31409,else__5346__auto__){\nvar self__ = this;\nvar this__5345__auto____$1 = this;\nvar G__31451 = k31409;\nvar G__31451__$1 = (((G__31451 instanceof cljs.core.Keyword))?G__31451.fqn:null);\nswitch (G__31451__$1) {\ncase \"children\":\nreturn self__.children;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k31409,else__5346__auto__);\n\n}\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__5363__auto__,f__5364__auto__,init__5365__auto__){\nvar self__ = this;\nvar this__5363__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__5366__auto__,p__31477){\nvar vec__31479 = p__31477;\nvar k__5367__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31479,(0),null);\nvar v__5368__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31479,(1),null);\nreturn (f__5364__auto__.cljs$core$IFn$_invoke$arity$3 ? f__5364__auto__.cljs$core$IFn$_invoke$arity$3(ret__5366__auto__,k__5367__auto__,v__5368__auto__) : f__5364__auto__.call(null,ret__5366__auto__,k__5367__auto__,v__5368__auto__));\n}),init__5365__auto__,this__5363__auto____$1);\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__5358__auto__,writer__5359__auto__,opts__5360__auto__){\nvar self__ = this;\nvar this__5358__auto____$1 = this;\nvar pr_pair__5361__auto__ = (function (keyval__5362__auto__){\nreturn cljs.core.pr_sequential_writer(writer__5359__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__5360__auto__,keyval__5362__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__5359__auto__,pr_pair__5361__auto__,\"#rewrite-clj.node.namespaced-map.NamespacedMapNode{\",\", \",\"}\",opts__5360__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"children\",\"children\",-940561982),self__.children],null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__31407){\nvar self__ = this;\nvar G__31407__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__31407__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__5341__auto__){\nvar self__ = this;\nvar this__5341__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__5338__auto__){\nvar self__ = this;\nvar this__5338__auto____$1 = this;\nreturn (new rewrite_clj.node.namespaced_map.NamespacedMapNode(self__.children,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__5347__auto__){\nvar self__ = this;\nvar this__5347__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__5339__auto__){\nvar self__ = this;\nvar this__5339__auto____$1 = this;\nvar h__5154__auto__ = self__.__hash;\nif((!((h__5154__auto__ == null)))){\nreturn h__5154__auto__;\n} else {\nvar h__5154__auto____$1 = (function (coll__5340__auto__){\nreturn (679326169 ^ cljs.core.hash_unordered_coll(coll__5340__auto__));\n})(this__5339__auto____$1);\n(self__.__hash = h__5154__auto____$1);\n\nreturn h__5154__auto____$1;\n}\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this31410,other31411){\nvar self__ = this;\nvar this31410__$1 = this;\nreturn (((!((other31411 == null)))) && ((((this31410__$1.constructor === other31411.constructor)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this31410__$1.children,other31411.children)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this31410__$1.__extmap,other31411.__extmap)))))));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL);\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn new cljs.core.Keyword(null,\"namespaced-map\",\"namespaced-map\",1235665380);\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$Node$node_type$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn new cljs.core.Keyword(null,\"namespaced-map\",\"namespaced-map\",1235665380);\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn false;\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$Node$sexpr_STAR_$arity$2 = (function (_node,opts){\nvar self__ = this;\nvar _node__$1 = this;\nreturn rewrite_clj.node.namespaced_map.namespaced_map_sexpr(self__.children,opts);\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn ((1) + rewrite_clj.node.protocols.sum_lengths(self__.children));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn [\"#\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rewrite_clj.node.protocols.concat_strings(self__.children))].join('');\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__5353__auto__,k__5354__auto__){\nvar self__ = this;\nvar this__5353__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982),null], null), null),k__5354__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__5353__auto____$1),self__.__meta),k__5354__auto__);\n} else {\nreturn (new rewrite_clj.node.namespaced_map.NamespacedMapNode(self__.children,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__5354__auto__)),null));\n}\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$InnerNode$ = cljs.core.PROTOCOL_SENTINEL);\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$InnerNode$inner_QMARK_$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn true;\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$InnerNode$children$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn self__.children;\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$InnerNode$replace_children$arity$2 = (function (node,children_SINGLEQUOTE_){\nvar self__ = this;\nvar node__$1 = this;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),rewrite_clj.node.namespaced_map.apply_context(children_SINGLEQUOTE_));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.rewrite_clj$node$protocols$InnerNode$leader_length$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn ((2) - (1));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (this__5350__auto__,k31409){\nvar self__ = this;\nvar this__5350__auto____$1 = this;\nvar G__31507 = k31409;\nvar G__31507__$1 = (((G__31507 instanceof cljs.core.Keyword))?G__31507.fqn:null);\nswitch (G__31507__$1) {\ncase \"children\":\nreturn true;\n\nbreak;\ndefault:\nreturn cljs.core.contains_QMARK_(self__.__extmap,k31409);\n\n}\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__5351__auto__,k__5352__auto__,G__31407){\nvar self__ = this;\nvar this__5351__auto____$1 = this;\nvar pred__31509 = cljs.core.keyword_identical_QMARK_;\nvar expr__31510 = k__5352__auto__;\nif(cljs.core.truth_((pred__31509.cljs$core$IFn$_invoke$arity$2 ? pred__31509.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"children\",\"children\",-940561982),expr__31510) : pred__31509.call(null,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),expr__31510)))){\nreturn (new rewrite_clj.node.namespaced_map.NamespacedMapNode(G__31407,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new rewrite_clj.node.namespaced_map.NamespacedMapNode(self__.children,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__5352__auto__,G__31407),null));\n}\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__5356__auto__){\nvar self__ = this;\nvar this__5356__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"children\",\"children\",-940561982),self__.children,null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__5342__auto__,G__31407){\nvar self__ = this;\nvar this__5342__auto____$1 = this;\nreturn (new rewrite_clj.node.namespaced_map.NamespacedMapNode(self__.children,G__31407,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__5348__auto__,entry__5349__auto__){\nvar self__ = this;\nvar this__5348__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__5349__auto__)){\nreturn this__5348__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__5349__auto__,(0)),cljs.core._nth(entry__5349__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__5348__auto____$1,entry__5349__auto__);\n}\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"children\",\"children\",699969545,null)], null);\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.cljs$lang$type = true);\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.cljs$lang$ctorPrSeq = (function (this__5389__auto__){\nreturn (new cljs.core.List(null,\"rewrite-clj.node.namespaced-map/NamespacedMapNode\",null,(1),null));\n}));\n\n(rewrite_clj.node.namespaced_map.NamespacedMapNode.cljs$lang$ctorPrWriter = (function (this__5389__auto__,writer__5390__auto__){\nreturn cljs.core._write(writer__5390__auto__,\"rewrite-clj.node.namespaced-map/NamespacedMapNode\");\n}));\n\n/**\n * Positional factory function for rewrite-clj.node.namespaced-map/NamespacedMapNode.\n */\nrewrite_clj.node.namespaced_map.__GT_NamespacedMapNode = (function rewrite_clj$node$namespaced_map$__GT_NamespacedMapNode(children){\nreturn (new rewrite_clj.node.namespaced_map.NamespacedMapNode(children,null,null,null));\n});\n\n/**\n * Factory function for rewrite-clj.node.namespaced-map/NamespacedMapNode, taking a map of keywords to field values.\n */\nrewrite_clj.node.namespaced_map.map__GT_NamespacedMapNode = (function rewrite_clj$node$namespaced_map$map__GT_NamespacedMapNode(G__31416){\nvar extmap__5385__auto__ = (function (){var G__31527 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__31416,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nif(cljs.core.record_QMARK_(G__31416)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__31527);\n} else {\nreturn G__31527;\n}\n})();\nreturn (new rewrite_clj.node.namespaced_map.NamespacedMapNode(new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(G__31416),null,cljs.core.not_empty(extmap__5385__auto__),null));\n});\n\nrewrite_clj.node.protocols.make_printable_BANG_(rewrite_clj.node.namespaced_map.MapQualifierNode);\nrewrite_clj.node.protocols.make_printable_BANG_(rewrite_clj.node.namespaced_map.NamespacedMapNode);\n/**\n * Create a map qualifier node.\n * The map qualifier node is a child node of [[namespaced-map-node]].\n *   \n * ```Clojure\n * (require '[rewrite-clj.node :as n]) \n * \n * ;; qualified\n * (-> (n/map-qualifier-node false \"my-prefix\")\n *     n/string)\n * ;; => \":my-prefix\"\n * \n * ;; auto-resolved to current ns\n * (-> (n/map-qualifier-node true nil)\n *     n/string)\n * ;; => \"::\"\n * \n * ;; auto-resolve to namespace with alias\n * (-> (n/map-qualifier-node true \"my-ns-alias\")\n *     n/string)\n * ;; => \"::my-ns-alias\"\n * ```\n */\nrewrite_clj.node.namespaced_map.map_qualifier_node = (function rewrite_clj$node$namespaced_map$map_qualifier_node(auto_resolved_QMARK_,prefix){\nreturn rewrite_clj.node.namespaced_map.__GT_MapQualifierNode(auto_resolved_QMARK_,prefix);\n});\n/**\n * Create a namespaced map node with `children`.\n * \n * ```Clojure\n * (require '[rewrite-clj.node :as n]) \n * \n * (-> (n/namespaced-map-node [(n/map-qualifier-node true \"my-ns-alias\")\n *                             (n/spaces 1)\n *                             (n/map-node [(n/keyword-node :a)\n *                                          (n/spaces 1)\n *                                          (n/token-node 1)])])\n *     n/string)\n * ;; => \"#::my-ns-alias {:a 1}\"\n * ``` \n * \n * Map qualifier context is automatically applied to map keys for sexpr support.\n * \n * See also [[map-qualifier-node]] and [[map-node]].\n */\nrewrite_clj.node.namespaced_map.namespaced_map_node = (function rewrite_clj$node$namespaced_map$namespaced_map_node(children){\nreturn rewrite_clj.node.namespaced_map.__GT_NamespacedMapNode(rewrite_clj.node.namespaced_map.apply_context(children));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/node/namespaced_map.cljc","~:line",1,"~:column",14,"~:end-line",1,"~:end-column",45,"~:no-doc",true],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.namespaced-map","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.node.protocols","^11","~$node","^11","~$cljs.core","^13","~$goog","^14"],"~:seen",["^U",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^13","^13"],"~:form",["~#list",["~$ns","^W",["^1:",["^16",["^11","~:as","^12"]]]]],"~:flags",["^ ","^16",["^U",[]]],"~:js-deps",["^ "],"~:deps",["^14","^13","^11"]],"^Z","^W","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/node/namespaced_map.cljc"],"~:compiled-at",1666857663335,"^X",["^ ","^11","^11","^12","^11","^13","^13","^14","^14"],"~:resource-name","rewrite_clj/node/namespaced_map.cljc","~:warnings",[],"~:source","(ns ^:no-doc rewrite-clj.node.namespaced-map\n  (:require [rewrite-clj.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defrecord MapQualifierNode [auto-resolved? prefix]\n  node/Node\n  (tag [_node] :map-qualifier)\n  (node-type [_node] :map-qualifier)\n  (printable-only? [_node] false)\n  (sexpr* [_node opts]\n    (if auto-resolved?\n      ((or (:auto-resolve opts) node/default-auto-resolve)\n       (if prefix (symbol prefix) :current))\n      (symbol prefix)))\n  (length [_node]\n    (+ 1 ;; for first :\n       (if auto-resolved? 1 0) ;; for extra :\n       (count prefix)))\n  (string [_node]\n    (str \":\"\n         (when auto-resolved? \":\")\n         prefix))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(defn- edit-map-children\n  \"A map node's children are a list of nodes that can contain non-sexpr-able elements (ex. whitespace).\n\n  Returns `children` with `f` applied sexpressable children.\n\n  `f` is called with\n  - `n` - node\n  - `is-map-key?` true if the node is in keyword position\n  and should return `n` or a new version of `n`.\"\n  [children f]\n  (loop [r children\n         last-key nil\n         new-children []]\n    (if-let [n (first r)]\n      (if (node/printable-only? n)\n        (recur (rest r)\n               last-key\n               (conj new-children n))\n        (if last-key\n          (recur (rest r)\n                 nil\n                 (conj new-children (f n false)))\n          (recur (rest r)\n                 n\n                 (conj new-children (f n true)))))\n      new-children)))\n\n(defn- apply-context-to-map\n  \"Apply the context of the qualified map to the keyword keys in the map.\n\n  Strips context from keyword-nodes not in keyword position and adds context to keyword nodes in keyword position.\"\n  [m-node q-node]\n  (node/replace-children m-node\n                         (edit-map-children (node/children m-node)\n                                            (fn [n is-map-key?]\n                                              (if (satisfies? node/MapQualifiable n)\n                                                (if is-map-key?\n                                                  (node/map-context-apply n q-node)\n                                                  (node/map-context-clear n))\n                                                n)))))\n\n(defn- apply-context [children]\n  (let [q-node (first children)\n        m-node (last children)]\n    (concat (drop-last children)\n            [(apply-context-to-map m-node q-node)])))\n\n(defn reapply-namespaced-map-context\n  \"Namespaced map qualifier context is automatically applied to keyword children of contained map automatically on:\n  - [[node/namespaced-map-node]] creation (i.e. at parse time)\n  - [[node/replace-children]]\n\n  If you make changes outside these techniques, call this function to reapply the qualifier context.\n\n  This is only necessary if you need `sexpr` on map keywords to reflect the namespaced map qualifier.\n\n  Returns `n` if not a namespaced map node.\"\n  [n]\n  (if (= :namespaced-map (node/tag n))\n    (node/replace-children n (apply-context (node/children n)))\n    n))\n\n(defn- namespaced-map-sexpr\n  \"Assumes that appropriate qualifier context has been applied to contained map.\"\n  [children opts]\n  (node/sexpr (last children) opts))\n\n(defrecord NamespacedMapNode [children]\n  node/Node\n  (tag [_node] :namespaced-map)\n  (node-type [_node] :namespaced-map)\n  (printable-only? [_node] false)\n  (sexpr* [_node opts]\n    (namespaced-map-sexpr children opts))\n  (length [_node]\n    (+ 1 ;; for leading #\n       (node/sum-lengths children)))\n  (string [_node]\n    (str \"#\" (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_node] true)\n  (children [_node] children)\n  (replace-children [node children']\n    (assoc node :children (apply-context children')))\n  (leader-length [_node]\n    (dec 2))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! MapQualifierNode)\n(node/make-printable! NamespacedMapNode)\n\n;; ## Constructors\n\n(defn map-qualifier-node\n  \"Create a map qualifier node.\n   The map qualifier node is a child node of [[namespaced-map-node]].\n     \n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n   \n   ;; qualified\n   (-> (n/map-qualifier-node false \\\"my-prefix\\\")\n       n/string)\n   ;; => \\\":my-prefix\\\"\n\n   ;; auto-resolved to current ns\n   (-> (n/map-qualifier-node true nil)\n       n/string)\n   ;; => \\\"::\\\"\n\n   ;; auto-resolve to namespace with alias\n   (-> (n/map-qualifier-node true \\\"my-ns-alias\\\")\n       n/string)\n   ;; => \\\"::my-ns-alias\\\"\n   ```\"\n  [auto-resolved? prefix]\n  (->MapQualifierNode auto-resolved? prefix))\n\n(defn namespaced-map-node\n  \"Create a namespaced map node with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n   \n   (-> (n/namespaced-map-node [(n/map-qualifier-node true \\\"my-ns-alias\\\")\n                               (n/spaces 1)\n                               (n/map-node [(n/keyword-node :a)\n                                            (n/spaces 1)\n                                            (n/token-node 1)])])\n       n/string)\n   ;; => \\\"#::my-ns-alias {:a 1}\\\"\n   ``` \n   \n   Map qualifier context is automatically applied to map keys for sexpr support.\n\n   See also [[map-qualifier-node]] and [[map-node]].\"\n  [children]\n  (->NamespacedMapNode (apply-context children)))\n","~:reader-features",["^U",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["this__5343__auto__","k__5344__auto__","this__5345__auto__","k31274","else__5346__auto__","G__31283","cljs.core/Keyword","auto-resolved?","prefix","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__31284","vec__31285","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__31273","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this31275","other31276","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__31317","this__5351__auto__","k__5352__auto__","pred__31318","cljs.core/keyword-identical?","expr__31319","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.namespaced-map/MapQualifierNode","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__31281","extmap__5385__auto__","G__31327","cljs.core/record?","rewrite-clj.node.namespaced-map/->MapQualifierNode","rewrite-clj.node.namespaced-map/map->MapQualifierNode","_node","opts","G__31306","fexpr__31305","or__5045__auto__","rewrite-clj.node.protocols/default-auto-resolve","cljs.core.symbol","node","rewrite-clj.node.namespaced-map/edit-map-children","children","f","r","last-key","new-children","temp__5802__auto__","n","cljs.core/first","rewrite-clj.node.protocols/printable-only?","cljs.core/rest","cljs.core.conj","rewrite-clj.node.namespaced-map/apply-context-to-map","m-node","q-node","rewrite-clj.node.protocols/replace-children","rewrite-clj.node.protocols/children","is-map-key?","cljs.core/native-satisfies?","rewrite-clj.node.protocols/MapQualifiable","rewrite-clj.node.protocols/map-context-apply","rewrite-clj.node.protocols/map-context-clear","rewrite-clj.node.namespaced-map/apply-context","cljs.core/last","cljs.core.drop_last","rewrite-clj.node.namespaced-map/reapply-namespaced-map-context","rewrite-clj.node.protocols/tag","rewrite-clj.node.namespaced-map/namespaced-map-sexpr","rewrite_clj.node.protocols.sexpr","k31409","G__31451","p__31477","vec__31479","G__31407","this31410","other31411","G__31507","pred__31509","expr__31510","rewrite-clj.node.namespaced-map/NamespacedMapNode","G__31416","G__31527","rewrite-clj.node.namespaced-map/->NamespacedMapNode","rewrite-clj.node.namespaced-map/map->NamespacedMapNode","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","children'","rewrite-clj.node.protocols/make-printable!","rewrite-clj.node.namespaced-map/map-qualifier-node","rewrite-clj.node.namespaced-map/namespaced-map-node"]],"~:used-vars",["^U",["~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/rest","~$rewrite-clj.node.namespaced-map/map->MapQualifierNode","~$rewrite-clj.node.namespaced-map/->NamespacedMapNode","~$rewrite-clj.node.protocols/make-printable!","~$cljs.core/pr-sequential-writer","~$rewrite-clj.node.namespaced-map/map-qualifier-node","~$rewrite-clj.node.protocols/MapQualifiable","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/-assoc","~$rewrite-clj.node.protocols/tag","~$cljs.core/-write","~$rewrite-clj.node.protocols/map-context-clear","~$cljs.core/-iterator","~$rewrite-clj.node.protocols/children","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/Keyword","~$rewrite-clj.node.namespaced-map/reapply-namespaced-map-context","~$cljs.core/last","~$rewrite-clj.node.protocols/concat-strings","~$cljs.core/MapEntry","~$cljs.core/dissoc","~$cljs.core/keyword-identical?","~$cljs.core/-with-meta","~$cljs.core/concat","~$rewrite-clj.node.protocols/map-context-apply","~$rewrite-clj.node.protocols/default-auto-resolve","~$cljs.core/native-satisfies?","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/conj","~$cljs.core/-conj","~$rewrite-clj.node.namespaced-map/edit-map-children","~$rewrite-clj.node.protocols/replace-children","~$cljs.core/PersistentVector","~$cljs.core/List","~$rewrite-clj.node.namespaced-map/->MapQualifierNode","~$rewrite-clj.node.protocols/printable-only?","~$cljs.core/get","~$cljs.core/-nth","~$cljs.core/drop-last","~$cljs.core/not-empty","~$rewrite-clj.node.protocols/sexpr","~$rewrite-clj.node.namespaced-map/map->NamespacedMapNode","~$cljs.core/symbol","~$cljs.core/record?","~$cljs.core/-lookup","~$cljs.core/nth","~$rewrite-clj.node.namespaced-map/namespaced-map-sexpr","~$cljs.core/nil-iter","~$cljs.core/RecordIter","~$rewrite-clj.node.protocols/string","~$cljs.core/not","~$rewrite-clj.node.namespaced-map/MapQualifierNode","~$cljs.core/assoc","~$rewrite-clj.node.protocols/sum-lengths","~$cljs.core/hash-unordered-coll","~$cljs.core/first","~$rewrite-clj.node.namespaced-map/NamespacedMapNode","~$rewrite-clj.node.namespaced-map/apply-context-to-map","~$rewrite-clj.node.namespaced-map/namespaced-map-node","~$rewrite-clj.node.namespaced-map/apply-context"]]],"~:cache-keys",["~#cmap",[["^1A","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^U",[]],"~:deps-syms",["^14","~$goog.dom.HtmlElement"]]],["^1A","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","~$goog.string"]]],["^1A","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1A","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3A"]]],["^1A","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3B"]]],["^1A","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3B"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^1A","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3B","~$goog.reflect"]]],["^1A","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3B","~$goog.fs.blob","^3C","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3E","^3F","^3G","^3H"]]],["^1A","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3G","~$goog.html.SafeUrl","^3H","^3B","^3A"]]],["^1A","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3B","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3L","~$goog.html.SafeStyle","^3N","^3D","~$goog.html.uncheckedconversions","^3G","^3A"]]],["^1A","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3G","^3E","^3F","^3L","^3R","~$goog.html.SafeStyleSheet","^3N","~$goog.dom.TagName","^3D","^3H","^3B","~$goog.labs.userAgent.browser","^3>","^3?","^3A","~$goog.dom.tags","^3M"]]],["^1A","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3?"]]],["^1A","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","rewrite_clj/node/protocols.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^13","~$clojure.string","~$rewrite-clj.interop"]]],["^1A","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1A","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3>","^3B","~$goog.collections.maps","^3=","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1A","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",[]]],["^1A","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3>","^3?"]]],["^1A","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^13","^3=","~$goog.string.StringBuffer"]]],["^1A","rewrite_clj/node/namespaced_map.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^13","^11"]]],["^1A","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","~$goog.dom.safe","^3S","^3G","^3A"]]],["^1A","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","~$goog.labs.userAgent","^3A"]]],["^1A","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3B","^3Q","^3L","^3R","^3T","^3N","^3D","^3G","^3A","^3E"]]],["^1A","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14"]]],["^1A","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","~$goog.math.Long","~$goog.math.Integer","^3=","^3?","^3>","~$goog.Uri","^45"]]],["^1A","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3G","^3H","^3M","^3B"]]],["^1A","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3G","^3R","^3H","^3?","^3B","^3A"]]],["^1A","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3J"]]],["^1A","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3B","^3="]]],["^1A","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^3B","^3H"]]],["^1A","rewrite_clj/interop.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^38",["^ ","^39",null,"^3:",["^U",[]],"^3;",["^14","^13","^3=","~$goog.string.format"]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^7",1,"^8",14,"^9",1,"^:",45,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q","^R"],"^S",null,"^T",["^U",[]],"^V","^W","^X",["^ "],"^[",null,"^10",["^ ","^11","^11","^12","^11","^13","^13","^14","^14"],"^15",["^U",["^16"]],"^17",null,"~:defs",["^ ","~$MapQualifierNode",["^ ","~:num-fields",2,"~:protocols",["^U",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/Object","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^V","^2Y","^6","rewrite_clj/node/namespaced_map.cljc","^:",28,"~:type",true,"^8",12,"~:internal-ctor",true,"^7",6,"~:record",true,"^9",6,"~:tag","~$function","~:skip-protocol-flag",["^U",["^54","^55","^56","^57","^58","^5:","^5;","^5<","^5=","^5>","^5?","^5A","^5B","^5C","^5D"]]],"~$edit-map-children",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^7",29,"^8",8,"^9",29,"^:",25,"~:private",true,"~:arglists",["^1:",["~$quote",["^1:",[["~$children","~$f"]]]]],"~:doc","A map node's children are a list of nodes that can contain non-sexpr-able elements (ex. whitespace).\n\n  Returns `children` with `f` applied sexpressable children.\n\n  `f` is called with\n  - `n` - node\n  - `is-map-key?` true if the node is in keyword position\n  and should return `n` or a new version of `n`."],"^5M",true,"^V","^2D","^6","rewrite_clj/node/namespaced_map.cljc","^:",25,"~:method-params",["^1:",[["^5P","~$f"]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^8",1,"~:variadic?",false,"^7",29,"~:ret-tag",["^U",["~$clj","~$cljs.core/IVector"]],"^9",29,"~:max-fixed-arity",2,"~:fn-var",true,"^5N",["^1:",["^5O",["^1:",[["^5P","~$f"]]]]],"^5Q","A map node's children are a list of nodes that can contain non-sexpr-able elements (ex. whitespace).\n\n  Returns `children` with `f` applied sexpressable children.\n\n  `f` is called with\n  - `n` - node\n  - `is-map-key?` true if the node is in keyword position\n  and should return `n` or a new version of `n`."],"~$->MapQualifierNode",["^ ","^5L",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^:",28,"^8",12,"^5F",true,"~:factory","~:positional","^7",6,"^9",6,"^5N",["^1:",["^5O",["^1:",[["~$auto-resolved?","~$prefix"]]]]],"^5Q","Positional factory function for rewrite-clj.node.namespaced-map/MapQualifierNode."],"^V","^2H","^6","rewrite_clj/node/namespaced_map.cljc","^:",28,"^5R",["^1:",[["^62","^63"]]],"^5S",null,"^5T",["^1:",[null,null]],"^8",1,"^5F",true,"^5U",false,"^60","^61","^7",6,"^5V","^2Y","^9",6,"^5Y",2,"^5Z",true,"^5N",["^1:",["^5O",["^1:",[["^62","^63"]]]]],"^5Q","Positional factory function for rewrite-clj.node.namespaced-map/MapQualifierNode."],"~$namespaced-map-sexpr",["^ ","^5L",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^7",91,"^8",8,"^9",91,"^:",28,"^5M",true,"^5N",["^1:",["^5O",["^1:",[["^5P","~$opts"]]]]],"^5Q","Assumes that appropriate qualifier context has been applied to contained map."],"^5M",true,"^V","^2T","^6","rewrite_clj/node/namespaced_map.cljc","^:",28,"^5R",["^1:",[["^5P","^65"]]],"^5S",null,"^5T",["^1:",[null,null]],"^8",1,"^5U",false,"^7",91,"^5V","~$any","^9",91,"^5Y",2,"^5Z",true,"^5N",["^1:",["^5O",["^1:",[["^5P","^65"]]]]],"^5Q","Assumes that appropriate qualifier context has been applied to contained map."],"~$map-qualifier-node",["^ ","^5L",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^7",126,"^8",7,"^9",126,"^:",25,"^5N",["^1:",["^5O",["^1:",[["^62","^63"]]]]],"^5Q","Create a map qualifier node.\n   The map qualifier node is a child node of [[namespaced-map-node]].\n     \n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n   \n   ;; qualified\n   (-> (n/map-qualifier-node false \"my-prefix\")\n       n/string)\n   ;; => \":my-prefix\"\n\n   ;; auto-resolved to current ns\n   (-> (n/map-qualifier-node true nil)\n       n/string)\n   ;; => \"::\"\n\n   ;; auto-resolve to namespace with alias\n   (-> (n/map-qualifier-node true \"my-ns-alias\")\n       n/string)\n   ;; => \"::my-ns-alias\"\n   ```"],"^V","^1S","^6","rewrite_clj/node/namespaced_map.cljc","^:",25,"^5R",["^1:",[["^62","^63"]]],"^5S",null,"^5T",["^1:",[null,null]],"^8",1,"^5U",false,"^7",126,"^5V","^2Y","^9",126,"^5Y",2,"^5Z",true,"^5N",["^1:",["^5O",["^1:",[["^62","^63"]]]]],"^5Q","Create a map qualifier node.\n   The map qualifier node is a child node of [[namespaced-map-node]].\n     \n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n   \n   ;; qualified\n   (-> (n/map-qualifier-node false \"my-prefix\")\n       n/string)\n   ;; => \":my-prefix\"\n\n   ;; auto-resolved to current ns\n   (-> (n/map-qualifier-node true nil)\n       n/string)\n   ;; => \"::\"\n\n   ;; auto-resolve to namespace with alias\n   (-> (n/map-qualifier-node true \"my-ns-alias\")\n       n/string)\n   ;; => \"::my-ns-alias\"\n   ```"],"~$map->NamespacedMapNode",["^ ","^5L",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^:",29,"^8",12,"^5F",true,"^60","~:map","^7",96,"^9",96,"^5N",["^1:",["^5O",["^1:",[["~$G__31416"]]]]],"^5Q","Factory function for rewrite-clj.node.namespaced-map/NamespacedMapNode, taking a map of keywords to field values."],"^V","^2O","^6","rewrite_clj/node/namespaced_map.cljc","^:",29,"^5R",["^1:",[["^6:"]]],"^5S",null,"^5T",["^1:",[null,null]],"^8",1,"^5F",true,"^5U",false,"^60","^69","^7",96,"^5V","^32","^9",96,"^5Y",1,"^5Z",true,"^5N",["^1:",["^5O",["^1:",[["^6:"]]]]],"^5Q","Factory function for rewrite-clj.node.namespaced-map/NamespacedMapNode, taking a map of keywords to field values."],"~$map->MapQualifierNode",["^ ","^5L",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^:",28,"^8",12,"^5F",true,"^60","^69","^7",6,"^9",6,"^5N",["^1:",["^5O",["^1:",[["~$G__31281"]]]]],"^5Q","Factory function for rewrite-clj.node.namespaced-map/MapQualifierNode, taking a map of keywords to field values."],"^V","^1O","^6","rewrite_clj/node/namespaced_map.cljc","^:",28,"^5R",["^1:",[["^6<"]]],"^5S",null,"^5T",["^1:",[null,null]],"^8",1,"^5F",true,"^5U",false,"^60","^69","^7",6,"^5V","^2Y","^9",6,"^5Y",1,"^5Z",true,"^5N",["^1:",["^5O",["^1:",[["^6<"]]]]],"^5Q","Factory function for rewrite-clj.node.namespaced-map/MapQualifierNode, taking a map of keywords to field values."],"~$namespaced-map-node",["^ ","^5L",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^7",151,"^8",7,"^9",151,"^:",26,"^5N",["^1:",["^5O",["^1:",[["^5P"]]]]],"^5Q","Create a namespaced map node with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n   \n   (-> (n/namespaced-map-node [(n/map-qualifier-node true \"my-ns-alias\")\n                               (n/spaces 1)\n                               (n/map-node [(n/keyword-node :a)\n                                            (n/spaces 1)\n                                            (n/token-node 1)])])\n       n/string)\n   ;; => \"#::my-ns-alias {:a 1}\"\n   ``` \n   \n   Map qualifier context is automatically applied to map keys for sexpr support.\n\n   See also [[map-qualifier-node]] and [[map-node]]."],"^V","^34","^6","rewrite_clj/node/namespaced_map.cljc","^:",26,"^5R",["^1:",[["^5P"]]],"^5S",null,"^5T",["^1:",[null,null]],"^8",1,"^5U",false,"^7",151,"^5V","^32","^9",151,"^5Y",1,"^5Z",true,"^5N",["^1:",["^5O",["^1:",[["^5P"]]]]],"^5Q","Create a namespaced map node with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n   \n   (-> (n/namespaced-map-node [(n/map-qualifier-node true \"my-ns-alias\")\n                               (n/spaces 1)\n                               (n/map-node [(n/keyword-node :a)\n                                            (n/spaces 1)\n                                            (n/token-node 1)])])\n       n/string)\n   ;; => \"#::my-ns-alias {:a 1}\"\n   ``` \n   \n   Map qualifier context is automatically applied to map keys for sexpr support.\n\n   See also [[map-qualifier-node]] and [[map-node]]."],"~$apply-context",["^ ","^5L",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^7",70,"^8",8,"^9",70,"^:",21,"^5M",true,"^5N",["^1:",["^5O",["^1:",[["^5P"]]]]]],"^5M",true,"^V","^35","^6","rewrite_clj/node/namespaced_map.cljc","^:",21,"^5R",["^1:",[["^5P"]]],"^5S",null,"^5T",["^1:",[null,null]],"^8",1,"^5U",false,"^7",70,"^5V","~$cljs.core/LazySeq","^9",70,"^5Y",1,"^5Z",true,"^5N",["^1:",["^5O",["^1:",[["^5P"]]]]]],"~$apply-context-to-map",["^ ","^5L",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^7",56,"^8",8,"^9",56,"^:",28,"^5M",true,"^5N",["^1:",["^5O",["^1:",[["~$m-node","~$q-node"]]]]],"^5Q","Apply the context of the qualified map to the keyword keys in the map.\n\n  Strips context from keyword-nodes not in keyword position and adds context to keyword nodes in keyword position."],"^5M",true,"^V","^33","^6","rewrite_clj/node/namespaced_map.cljc","^:",28,"^5R",["^1:",[["^6A","^6B"]]],"^5S",null,"^5T",["^1:",[null,null]],"^8",1,"^5U",false,"^7",56,"^5V","^66","^9",56,"^5Y",2,"^5Z",true,"^5N",["^1:",["^5O",["^1:",[["^6A","^6B"]]]]],"^5Q","Apply the context of the qualified map to the keyword keys in the map.\n\n  Strips context from keyword-nodes not in keyword position and adds context to keyword nodes in keyword position."],"~$NamespacedMapNode",["^ ","^52",1,"^53",["^U",["^54","^55","^56","^57","^58","^59","^5:","~$rewrite-clj.node.protocols/InnerNode","^5;","^5<","^5=","^5>","^5?","^5@","^5A","^5B","^5C","^5D"]],"^V","^32","^6","rewrite_clj/node/namespaced_map.cljc","^:",29,"^5E",true,"^8",12,"^5F",true,"^7",96,"^5G",true,"^9",96,"^5H","^5I","^5J",["^U",["^54","^55","^56","^57","^58","^5:","^5;","^5<","^5=","^5>","^5?","^5A","^5B","^5C","^5D"]]],"~$->NamespacedMapNode",["^ ","^5L",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^:",29,"^8",12,"^5F",true,"^60","^61","^7",96,"^9",96,"^5N",["^1:",["^5O",["^1:",[["^5P"]]]]],"^5Q","Positional factory function for rewrite-clj.node.namespaced-map/NamespacedMapNode."],"^V","^1P","^6","rewrite_clj/node/namespaced_map.cljc","^:",29,"^5R",["^1:",[["^5P"]]],"^5S",null,"^5T",["^1:",[null,null]],"^8",1,"^5F",true,"^5U",false,"^60","^61","^7",96,"^5V","^32","^9",96,"^5Y",1,"^5Z",true,"^5N",["^1:",["^5O",["^1:",[["^5P"]]]]],"^5Q","Positional factory function for rewrite-clj.node.namespaced-map/NamespacedMapNode."],"~$reapply-namespaced-map-context",["^ ","^5L",null,"^5",["^ ","^6","rewrite_clj/node/namespaced_map.cljc","^7",76,"^8",7,"^9",76,"^:",37,"^5N",["^1:",["^5O",["^1:",[["~$n"]]]]],"^5Q","Namespaced map qualifier context is automatically applied to keyword children of contained map automatically on:\n  - [[node/namespaced-map-node]] creation (i.e. at parse time)\n  - [[node/replace-children]]\n\n  If you make changes outside these techniques, call this function to reapply the qualifier context.\n\n  This is only necessary if you need `sexpr` on map keywords to reflect the namespaced map qualifier.\n\n  Returns `n` if not a namespaced map node."],"^V","^25","^6","rewrite_clj/node/namespaced_map.cljc","^:",37,"^5R",["^1:",[["~$n"]]],"^5S",null,"^5T",["^1:",[null,null]],"^8",1,"^5U",false,"^7",76,"^5V",["^U",[null,"^66"]],"^9",76,"^5Y",1,"^5Z",true,"^5N",["^1:",["^5O",["^1:",[["~$n"]]]]],"^5Q","Namespaced map qualifier context is automatically applied to keyword children of contained map automatically on:\n  - [[node/namespaced-map-node]] creation (i.e. at parse time)\n  - [[node/replace-children]]\n\n  If you make changes outside these techniques, call this function to reapply the qualifier context.\n\n  This is only necessary if you need `sexpr` on map keywords to reflect the namespaced map qualifier.\n\n  Returns `n` if not a namespaced map node."]],"^18",["^ ","^13","^13"],"~:cljs.analyzer/constants",["^ ","^15",["^U",["~:auto-resolved?","~:children","~:namespaced-map","~:map-qualifier","^62","^5P","~:prefix","~:current","^63","~:auto-resolve"]],"~:order",["^6H","^6L","^6K","^6N","^6M","^62","^63","^6J","^6I","^5P"]],"^1=",["^ ","^16",["^U",[]]],"^1>",["^ "],"^1?",["^14","^13","^11"]],"^Z","^W","~:ns-specs",["^ "],"~:ns-spec-vars",["^U",[]],"~:compiler-options",["^37",[["^6R","~:static-fns"],true,["^6R","~:shadow-tweaks"],null,["^6R","~:source-map-inline"],null,["^6R","~:elide-asserts"],false,["^6R","~:optimize-constants"],null,["^6R","^1D"],null,["^6R","~:external-config"],null,["^6R","~:tooling-config"],null,["^6R","~:emit-constants"],null,["^6R","~:load-tests"],null,["^6R","~:form-size-threshold"],null,["^6R","~:global-goog-object&array"],null,["^6R","~:data-readers"],null,["^6R","~:infer-externs"],"~:auto",["^6R","^1F"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6R","~:fn-invoke-direct"],null,["^6R","~:source-map"],"/dev/null"]]]