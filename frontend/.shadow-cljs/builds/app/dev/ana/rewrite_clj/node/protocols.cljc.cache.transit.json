["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.node.protocols');\n\n/**\n * Protocol for EDN/Clojure/ClojureScript nodes.\n * @interface\n */\nrewrite_clj.node.protocols.Node = function(){};\n\nvar rewrite_clj$node$protocols$Node$tag$dyn_31076 = (function (node){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.tag[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5394__auto__.call(null,node));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.tag[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5392__auto__.call(null,node));\n} else {\nthrow cljs.core.missing_protocol(\"Node.tag\",node);\n}\n}\n});\n/**\n * Returns keyword representing type of `node`.\n */\nrewrite_clj.node.protocols.tag = (function rewrite_clj$node$protocols$tag(node){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$Node$tag$arity$1 == null)))))){\nreturn node.rewrite_clj$node$protocols$Node$tag$arity$1(node);\n} else {\nreturn rewrite_clj$node$protocols$Node$tag$dyn_31076(node);\n}\n});\n\nvar rewrite_clj$node$protocols$Node$node_type$dyn_31077 = (function (node){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.node_type[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5394__auto__.call(null,node));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.node_type[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5392__auto__.call(null,node));\n} else {\nthrow cljs.core.missing_protocol(\"Node.node-type\",node);\n}\n}\n});\n/**\n * Returns keyword representing the node type for `node`.\n *   Currently internal and used to support testing.\n */\nrewrite_clj.node.protocols.node_type = (function rewrite_clj$node$protocols$node_type(node){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$Node$node_type$arity$1 == null)))))){\nreturn node.rewrite_clj$node$protocols$Node$node_type$arity$1(node);\n} else {\nreturn rewrite_clj$node$protocols$Node$node_type$dyn_31077(node);\n}\n});\n\nvar rewrite_clj$node$protocols$Node$printable_only_QMARK_$dyn_31078 = (function (node){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.printable_only_QMARK_[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5394__auto__.call(null,node));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.printable_only_QMARK_[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5392__auto__.call(null,node));\n} else {\nthrow cljs.core.missing_protocol(\"Node.printable-only?\",node);\n}\n}\n});\n/**\n * Return true if `node` cannot be converted to an s-expression element.\n */\nrewrite_clj.node.protocols.printable_only_QMARK_ = (function rewrite_clj$node$protocols$printable_only_QMARK_(node){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 == null)))))){\nreturn node.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1(node);\n} else {\nreturn rewrite_clj$node$protocols$Node$printable_only_QMARK_$dyn_31078(node);\n}\n});\n\nvar rewrite_clj$node$protocols$Node$sexpr_STAR_$dyn_31079 = (function (node,opts){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.sexpr_STAR_[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(node,opts) : m__5394__auto__.call(null,node,opts));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.sexpr_STAR_[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(node,opts) : m__5392__auto__.call(null,node,opts));\n} else {\nthrow cljs.core.missing_protocol(\"Node.sexpr*\",node);\n}\n}\n});\n/**\n * Return `node` converted to form applying `opts`. Internal, use `sexpr` instead.\n */\nrewrite_clj.node.protocols.sexpr_STAR_ = (function rewrite_clj$node$protocols$sexpr_STAR_(node,opts){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$Node$sexpr_STAR_$arity$2 == null)))))){\nreturn node.rewrite_clj$node$protocols$Node$sexpr_STAR_$arity$2(node,opts);\n} else {\nreturn rewrite_clj$node$protocols$Node$sexpr_STAR_$dyn_31079(node,opts);\n}\n});\n\nvar rewrite_clj$node$protocols$Node$length$dyn_31080 = (function (node){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.length[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5394__auto__.call(null,node));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.length[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5392__auto__.call(null,node));\n} else {\nthrow cljs.core.missing_protocol(\"Node.length\",node);\n}\n}\n});\n/**\n * Return number of characters for the string version of `node`.\n */\nrewrite_clj.node.protocols.length = (function rewrite_clj$node$protocols$length(node){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$Node$length$arity$1 == null)))))){\nreturn node.rewrite_clj$node$protocols$Node$length$arity$1(node);\n} else {\nreturn rewrite_clj$node$protocols$Node$length$dyn_31080(node);\n}\n});\n\nvar rewrite_clj$node$protocols$Node$string$dyn_31081 = (function (node){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.string[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5394__auto__.call(null,node));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.string[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5392__auto__.call(null,node));\n} else {\nthrow cljs.core.missing_protocol(\"Node.string\",node);\n}\n}\n});\n/**\n * Return the string version of `node`.\n */\nrewrite_clj.node.protocols.string = (function rewrite_clj$node$protocols$string(node){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$Node$string$arity$1 == null)))))){\nreturn node.rewrite_clj$node$protocols$Node$string$arity$1(node);\n} else {\nreturn rewrite_clj$node$protocols$Node$string$dyn_31081(node);\n}\n});\n\n(rewrite_clj.node.protocols.Node[\"_\"] = true);\n\n(rewrite_clj.node.protocols.tag[\"_\"] = (function (_this){\nreturn new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881);\n}));\n\n(rewrite_clj.node.protocols.node_type[\"_\"] = (function (_this){\nreturn new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881);\n}));\n\n(rewrite_clj.node.protocols.printable_only_QMARK_[\"_\"] = (function (_this){\nreturn false;\n}));\n\n(rewrite_clj.node.protocols.sexpr_STAR_[\"_\"] = (function (this$,_opts){\nreturn this$;\n}));\n\n(rewrite_clj.node.protocols.length[\"_\"] = (function (this$){\nreturn cljs.core.count(rewrite_clj.node.protocols.string(this$));\n}));\n\n(rewrite_clj.node.protocols.string[\"_\"] = (function (this$){\nreturn cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this$], 0));\n}));\n/**\n * Return true if [[sexpr]] is supported for `node`'s element type.\n * \n * See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)\n */\nrewrite_clj.node.protocols.sexpr_able_QMARK_ = (function rewrite_clj$node$protocols$sexpr_able_QMARK_(node){\nreturn cljs.core.not(rewrite_clj.node.protocols.printable_only_QMARK_(node));\n});\n/**\n * Return `node` converted to form.\n * \n *   Optional `opts` can specify:\n *   - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n * \n *   See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\n */\nrewrite_clj.node.protocols.sexpr = (function rewrite_clj$node$protocols$sexpr(var_args){\nvar G__30999 = arguments.length;\nswitch (G__30999) {\ncase 1:\nreturn rewrite_clj.node.protocols.sexpr.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.node.protocols.sexpr.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(rewrite_clj.node.protocols.sexpr.cljs$core$IFn$_invoke$arity$1 = (function (node){\nreturn rewrite_clj.node.protocols.sexpr.cljs$core$IFn$_invoke$arity$2(node,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(rewrite_clj.node.protocols.sexpr.cljs$core$IFn$_invoke$arity$2 = (function (node,opts){\nreturn rewrite_clj.node.protocols.sexpr_STAR_(node,opts);\n}));\n\n(rewrite_clj.node.protocols.sexpr.cljs$lang$maxFixedArity = 2);\n\n/**\n * Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\n * \n *   Optional `opts` can specify:\n *   - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n * \n *   See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\n */\nrewrite_clj.node.protocols.sexprs = (function rewrite_clj$node$protocols$sexprs(var_args){\nvar G__31022 = arguments.length;\nswitch (G__31022) {\ncase 1:\nreturn rewrite_clj.node.protocols.sexprs.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.node.protocols.sexprs.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(rewrite_clj.node.protocols.sexprs.cljs$core$IFn$_invoke$arity$1 = (function (nodes){\nreturn rewrite_clj.node.protocols.sexprs.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(rewrite_clj.node.protocols.sexprs.cljs$core$IFn$_invoke$arity$2 = (function (nodes,opts){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__31016_SHARP_){\nreturn rewrite_clj.node.protocols.sexpr.cljs$core$IFn$_invoke$arity$2(p1__31016_SHARP_,opts);\n}),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.printable_only_QMARK_,nodes));\n}));\n\n(rewrite_clj.node.protocols.sexprs.cljs$lang$maxFixedArity = 2);\n\n/**\n * Return total string length for `nodes`.\n */\nrewrite_clj.node.protocols.sum_lengths = (function rewrite_clj$node$protocols$sum_lengths(nodes){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.length,nodes));\n});\n/**\n * Return string version of `nodes`.\n */\nrewrite_clj.node.protocols.concat_strings = (function rewrite_clj$node$protocols$concat_strings(nodes){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.map.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.string,nodes));\n});\n\n/**\n * Protocol for non-leaf EDN/Clojure/ClojureScript nodes.\n * @interface\n */\nrewrite_clj.node.protocols.InnerNode = function(){};\n\nvar rewrite_clj$node$protocols$InnerNode$inner_QMARK_$dyn_31084 = (function (node){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.inner_QMARK_[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5394__auto__.call(null,node));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.inner_QMARK_[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5392__auto__.call(null,node));\n} else {\nthrow cljs.core.missing_protocol(\"InnerNode.inner?\",node);\n}\n}\n});\n/**\n * Returns true if `node` can have children.\n */\nrewrite_clj.node.protocols.inner_QMARK_ = (function rewrite_clj$node$protocols$inner_QMARK_(node){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$InnerNode$inner_QMARK_$arity$1 == null)))))){\nreturn node.rewrite_clj$node$protocols$InnerNode$inner_QMARK_$arity$1(node);\n} else {\nreturn rewrite_clj$node$protocols$InnerNode$inner_QMARK_$dyn_31084(node);\n}\n});\n\nvar rewrite_clj$node$protocols$InnerNode$children$dyn_31085 = (function (node){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.children[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5394__auto__.call(null,node));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.children[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5392__auto__.call(null,node));\n} else {\nthrow cljs.core.missing_protocol(\"InnerNode.children\",node);\n}\n}\n});\n/**\n * Returns child nodes for `node`.\n */\nrewrite_clj.node.protocols.children = (function rewrite_clj$node$protocols$children(node){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$InnerNode$children$arity$1 == null)))))){\nreturn node.rewrite_clj$node$protocols$InnerNode$children$arity$1(node);\n} else {\nreturn rewrite_clj$node$protocols$InnerNode$children$dyn_31085(node);\n}\n});\n\nvar rewrite_clj$node$protocols$InnerNode$replace_children$dyn_31086 = (function (node,children){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.replace_children[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(node,children) : m__5394__auto__.call(null,node,children));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.replace_children[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(node,children) : m__5392__auto__.call(null,node,children));\n} else {\nthrow cljs.core.missing_protocol(\"InnerNode.replace-children\",node);\n}\n}\n});\n/**\n * Returns `node` replacing current children with `children`.\n */\nrewrite_clj.node.protocols.replace_children = (function rewrite_clj$node$protocols$replace_children(node,children){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$InnerNode$replace_children$arity$2 == null)))))){\nreturn node.rewrite_clj$node$protocols$InnerNode$replace_children$arity$2(node,children);\n} else {\nreturn rewrite_clj$node$protocols$InnerNode$replace_children$dyn_31086(node,children);\n}\n});\n\nvar rewrite_clj$node$protocols$InnerNode$leader_length$dyn_31088 = (function (node){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.leader_length[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5394__auto__.call(null,node));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.leader_length[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5392__auto__.call(null,node));\n} else {\nthrow cljs.core.missing_protocol(\"InnerNode.leader-length\",node);\n}\n}\n});\n/**\n * Returns number of characters before children for `node`.\n */\nrewrite_clj.node.protocols.leader_length = (function rewrite_clj$node$protocols$leader_length(node){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$InnerNode$leader_length$arity$1 == null)))))){\nreturn node.rewrite_clj$node$protocols$InnerNode$leader_length$arity$1(node);\n} else {\nreturn rewrite_clj$node$protocols$InnerNode$leader_length$dyn_31088(node);\n}\n});\n\n(rewrite_clj.node.protocols.InnerNode[\"_\"] = true);\n\n(rewrite_clj.node.protocols.inner_QMARK_[\"_\"] = (function (_this){\nreturn false;\n}));\n\n(rewrite_clj.node.protocols.children[\"_\"] = (function (_this){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"unsupported operation\",cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(rewrite_clj.node.protocols.replace_children[\"_\"] = (function (_this,_children){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"unsupported operation\",cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(rewrite_clj.node.protocols.leader_length[\"_\"] = (function (_this){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"unsupported operation\",cljs.core.PersistentArrayMap.EMPTY);\n}));\n/**\n * Returns children for `node` converted to Clojure forms.\n * \n *   Optional `opts` can specify:\n *   - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n */\nrewrite_clj.node.protocols.child_sexprs = (function rewrite_clj$node$protocols$child_sexprs(var_args){\nvar G__31033 = arguments.length;\nswitch (G__31033) {\ncase 1:\nreturn rewrite_clj.node.protocols.child_sexprs.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.node.protocols.child_sexprs.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(rewrite_clj.node.protocols.child_sexprs.cljs$core$IFn$_invoke$arity$1 = (function (node){\nreturn rewrite_clj.node.protocols.child_sexprs.cljs$core$IFn$_invoke$arity$2(node,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(rewrite_clj.node.protocols.child_sexprs.cljs$core$IFn$_invoke$arity$2 = (function (node,opts){\nif(cljs.core.truth_(rewrite_clj.node.protocols.inner_QMARK_(node))){\nreturn rewrite_clj.node.protocols.sexprs.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.children(node),opts);\n} else {\nreturn null;\n}\n}));\n\n(rewrite_clj.node.protocols.child_sexprs.cljs$lang$maxFixedArity = 2);\n\n/**\n * Returns true if `x` is a rewrite-clj created node.\n */\nrewrite_clj.node.protocols.node_QMARK_ = (function rewrite_clj$node$protocols$node_QMARK_(x){\nreturn (((!((x == null)))) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881),rewrite_clj.node.protocols.tag(x))));\n});\nrewrite_clj.node.protocols.default_auto_resolve = (function rewrite_clj$node$protocols$default_auto_resolve(alias){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"current\",\"current\",-1088038603),alias)){\nreturn new cljs.core.Symbol(null,\"?_current-ns_?\",\"?_current-ns_?\",1667571229,null);\n} else {\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([\"??_\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(alias),\"_??\"].join(''));\n}\n});\n\n/**\n * Protocol for values that can be coerced to nodes.\n * @interface\n */\nrewrite_clj.node.protocols.NodeCoerceable = function(){};\n\nvar rewrite_clj$node$protocols$NodeCoerceable$coerce$dyn_31103 = (function (form){\nvar x__5393__auto__ = (((form == null))?null:form);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.coerce[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(form) : m__5394__auto__.call(null,form));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.coerce[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(form) : m__5392__auto__.call(null,form));\n} else {\nthrow cljs.core.missing_protocol(\"NodeCoerceable.coerce\",form);\n}\n}\n});\n/**\n * Coerce `form` to node.\n */\nrewrite_clj.node.protocols.coerce = (function rewrite_clj$node$protocols$coerce(form){\nif((((!((form == null)))) && ((!((form.rewrite_clj$node$protocols$NodeCoerceable$coerce$arity$1 == null)))))){\nreturn form.rewrite_clj$node$protocols$NodeCoerceable$coerce$arity$1(form);\n} else {\nreturn rewrite_clj$node$protocols$NodeCoerceable$coerce$dyn_31103(form);\n}\n});\n\n\n/**\n * Protocol for nodes that can be namespaced map qualified\n * @interface\n */\nrewrite_clj.node.protocols.MapQualifiable = function(){};\n\nvar rewrite_clj$node$protocols$MapQualifiable$map_context_apply$dyn_31104 = (function (node,map_qualifier){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.map_context_apply[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(node,map_qualifier) : m__5394__auto__.call(null,node,map_qualifier));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.map_context_apply[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(node,map_qualifier) : m__5392__auto__.call(null,node,map_qualifier));\n} else {\nthrow cljs.core.missing_protocol(\"MapQualifiable.map-context-apply\",node);\n}\n}\n});\n/**\n * Applies `map-qualifier` context to `node`\n */\nrewrite_clj.node.protocols.map_context_apply = (function rewrite_clj$node$protocols$map_context_apply(node,map_qualifier){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$MapQualifiable$map_context_apply$arity$2 == null)))))){\nreturn node.rewrite_clj$node$protocols$MapQualifiable$map_context_apply$arity$2(node,map_qualifier);\n} else {\nreturn rewrite_clj$node$protocols$MapQualifiable$map_context_apply$dyn_31104(node,map_qualifier);\n}\n});\n\nvar rewrite_clj$node$protocols$MapQualifiable$map_context_clear$dyn_31105 = (function (node){\nvar x__5393__auto__ = (((node == null))?null:node);\nvar m__5394__auto__ = (rewrite_clj.node.protocols.map_context_clear[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5394__auto__.call(null,node));\n} else {\nvar m__5392__auto__ = (rewrite_clj.node.protocols.map_context_clear[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__5392__auto__.call(null,node));\n} else {\nthrow cljs.core.missing_protocol(\"MapQualifiable.map-context-clear\",node);\n}\n}\n});\n/**\n * Removes map-qualifier context for `node`\n */\nrewrite_clj.node.protocols.map_context_clear = (function rewrite_clj$node$protocols$map_context_clear(node){\nif((((!((node == null)))) && ((!((node.rewrite_clj$node$protocols$MapQualifiable$map_context_clear$arity$1 == null)))))){\nreturn node.rewrite_clj$node$protocols$MapQualifiable$map_context_clear$arity$1(node);\n} else {\nreturn rewrite_clj$node$protocols$MapQualifiable$map_context_clear$dyn_31105(node);\n}\n});\n\nrewrite_clj.node.protocols.node__GT_string = (function rewrite_clj$node$protocols$node__GT_string(node){\nvar n = cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(rewrite_clj.node.protocols.printable_only_QMARK_(node))?cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([rewrite_clj.node.protocols.string(node)], 0)):rewrite_clj.node.protocols.string(node)));\nvar n_SINGLEQUOTE_ = (cljs.core.truth_(cljs.core.re_find(/\\n/,n))?rewrite_clj.interop.simple_format.cljs$core$IFn$_invoke$arity$variadic(\"\\n  %s\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.string.replace(n,/\\r?\\n/,\"\\n  \")], 0)):[\" \",n].join(''));\nreturn rewrite_clj.interop.simple_format.cljs$core$IFn$_invoke$arity$variadic(\"<%s:%s>\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.name(rewrite_clj.node.protocols.tag(node)),n_SINGLEQUOTE_], 0));\n});\nrewrite_clj.node.protocols.make_printable_cljs_BANG_ = (function rewrite_clj$node$protocols$make_printable_cljs_BANG_(obj){\n(obj.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL);\n\nreturn (obj.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (o,writer,_opts){\nvar o__$1 = this;\nreturn cljs.core._write(writer,rewrite_clj.node.protocols.node__GT_string(o__$1));\n}));\n});\nrewrite_clj.node.protocols.make_printable_BANG_ = (function rewrite_clj$node$protocols$make_printable_BANG_(obj){\nreturn rewrite_clj.node.protocols.make_printable_cljs_BANG_(obj);\n});\nrewrite_clj.node.protocols.without_whitespace = (function rewrite_clj$node$protocols$without_whitespace(nodes){\nreturn cljs.core.remove.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.printable_only_QMARK_,nodes);\n});\nrewrite_clj.node.protocols.assert_sexpr_count = (function rewrite_clj$node$protocols$assert_sexpr_count(nodes,c){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(rewrite_clj.node.protocols.without_whitespace(nodes)),c)){\nreturn null;\n} else {\nthrow (new Error([\"Assert failed: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rewrite_clj.interop.simple_format.cljs$core$IFn$_invoke$arity$variadic(\"can only contain %d non-whitespace form%s.\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([c,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(c,(1)))?\"\":\"s\")], 0))),\"\\n\",\"(= (count (without-whitespace nodes)) c)\"].join('')));\n}\n});\nrewrite_clj.node.protocols.assert_single_sexpr = (function rewrite_clj$node$protocols$assert_single_sexpr(nodes){\nreturn rewrite_clj.node.protocols.assert_sexpr_count(nodes,(1));\n});\n/**\n * A node's extent is how far it moves the \"cursor\".\n * \n *   Rows are simple - if we have x newlines in the string representation, we\n *   will always move the \"cursor\" x rows.\n * \n *   Columns are strange.  If we have *any* newlines at all in the textual\n *   representation of a node, following nodes' column positions are not\n *   affected by our startting column position at all.  So the second number\n *   in the pair we return is interpreted as a relative column adjustment\n *   when the first number in the pair (rows) is zero, and as an absolute\n *   column position when rows is non-zero.\n */\nrewrite_clj.node.protocols.extent = (function rewrite_clj$node$protocols$extent(node){\nvar map__31058 = cljs.core.meta(node);\nvar map__31058__$1 = cljs.core.__destructure_map(map__31058);\nvar row = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31058__$1,new cljs.core.Keyword(null,\"row\",\"row\",-570139521));\nvar col = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31058__$1,new cljs.core.Keyword(null,\"col\",\"col\",-1959363084));\nvar next_row = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31058__$1,new cljs.core.Keyword(null,\"next-row\",\"next-row\",-408963777));\nvar next_col = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31058__$1,new cljs.core.Keyword(null,\"next-col\",\"next-col\",601697889));\nif(cljs.core.truth_((function (){var and__5043__auto__ = row;\nif(cljs.core.truth_(and__5043__auto__)){\nvar and__5043__auto____$1 = col;\nif(cljs.core.truth_(and__5043__auto____$1)){\nvar and__5043__auto____$2 = next_row;\nif(cljs.core.truth_(and__5043__auto____$2)){\nreturn next_col;\n} else {\nreturn and__5043__auto____$2;\n}\n} else {\nreturn and__5043__auto____$1;\n}\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(next_row - row),((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(row,next_row,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([row], 0)))?(next_col - col):next_col)], null);\n} else {\nvar s = rewrite_clj.node.protocols.string(node);\nvar rows = cljs.core.count(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,\"\\n\"),s));\nvar cols = (((rows === (0)))?cljs.core.count(s):(cljs.core.count(cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,\"\\n\")),cljs.core.reverse(s))) + (1)));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [rows,cols], null);\n}\n});\nrewrite_clj.node.protocols._PLUS_extent = (function rewrite_clj$node$protocols$_PLUS_extent(p__31062,p__31063){\nvar vec__31064 = p__31062;\nvar row = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31064,(0),null);\nvar col = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31064,(1),null);\nvar vec__31067 = p__31063;\nvar row_extent = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31067,(0),null);\nvar col_extent = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31067,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(row + row_extent),(function (){var G__31071 = col_extent;\nif((row_extent === (0))){\nreturn (G__31071 + col);\n} else {\nreturn G__31071;\n}\n})()], null);\n});\n/**\n * Same as `clojure.core/meta` but with positional metadata removed.\n *   Use when you want to omit reader generated metadata on forms.\n */\nrewrite_clj.node.protocols.meta_elided = (function rewrite_clj$node$protocols$meta_elided(form){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,cljs.core.meta(form),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514)], null));\n});\n/**\n * DEPRECATED: Get first child as a pair of tag/sexpr (if inner node),\n * or just the node's own sexpr. (use explicit analysis of `children`\n * `child-sexprs` instead) \n */\nrewrite_clj.node.protocols.value = (function rewrite_clj$node$protocols$value(node){\nif(cljs.core.truth_(rewrite_clj.node.protocols.inner_QMARK_(node))){\nvar G__31075 = rewrite_clj.node.protocols.children(node);\nvar G__31075__$1 = (((G__31075 == null))?null:cljs.core.first(G__31075));\nif((G__31075__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.tag,rewrite_clj.node.protocols.sexpr)(G__31075__$1);\n}\n} else {\nreturn rewrite_clj.node.protocols.sexpr.cljs$core$IFn$_invoke$arity$1(node);\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/node/protocols.cljc","~:line",1,"~:column",32,"~:end-line",1,"~:end-column",58,"~:added","0.4.0","~:no-doc",true],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.protocols","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^12","~$string","^12","~$rewrite-clj.interop","^14","~$interop","^14","~$cljs.core","^16","~$goog","^17"],"~:seen",["^V",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^16","^16"],"~:form",["~#list",["~$ns","^X",["^1=",["^19",["^12","~:as","^13"],["^14","^1?","^15"]]]]],"~:flags",["^ ","^19",["^V",[]]],"~:js-deps",["^ "],"~:deps",["^17","^16","^12","^14"]],"^[","^X","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/node/protocols.cljc"],"~:compiled-at",1666857663094,"^Y",["^ ","^12","^12","^13","^12","^14","^14","^15","^14","^16","^16","^17","^17"],"~:resource-name","rewrite_clj/node/protocols.cljc","~:warnings",[],"~:source","(ns ^:no-doc ^{:added \"0.4.0\"} rewrite-clj.node.protocols\n  (:require [clojure.string :as string]\n            [rewrite-clj.interop :as interop]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defprotocol Node\n  \"Protocol for EDN/Clojure/ClojureScript nodes.\"\n  (tag [node]\n    \"Returns keyword representing type of `node`.\")\n  (node-type [node]\n    \"Returns keyword representing the node type for `node`.\n     Currently internal and used to support testing.\")\n  (printable-only? [node]\n    \"Return true if `node` cannot be converted to an s-expression element.\")\n  (sexpr* [node opts]\n    \"Return `node` converted to form applying `opts`. Internal, use `sexpr` instead.\")\n  (length [node]\n    \"Return number of characters for the string version of `node`.\")\n  (string [node]\n    \"Return the string version of `node`.\"))\n\n(extend-protocol Node\n  #?(:clj Object :cljs default)\n  (tag [_this] :unknown)\n  (node-type [_this] :unknown)\n  (printable-only? [_this] false)\n  (sexpr* [this _opts] this)\n  (length [this] (count (string this)))\n  (string [this] (pr-str this)))\n\n(defn sexpr-able?\n  \"Return true if [[sexpr]] is supported for `node`'s element type.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)\"\n  [node]\n  (not (printable-only? node)))\n\n(defn sexpr\n  \"Return `node` converted to form.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([node] (sexpr node {}))\n  ([node opts] (sexpr* node opts)))\n\n(defn sexprs\n  \"Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([nodes]\n   (sexprs nodes {}))\n  ([nodes opts]\n   (->> nodes\n        (remove printable-only?)\n        (map #(sexpr % opts)))))\n\n(defn sum-lengths\n  \"Return total string length for `nodes`.\"\n  [nodes]\n  (reduce + (map length nodes)))\n\n(defn concat-strings\n  \"Return string version of `nodes`.\"\n  [nodes]\n  (reduce str (map string nodes)))\n\n;; ## Inner Node\n\n(defprotocol InnerNode\n  \"Protocol for non-leaf EDN/Clojure/ClojureScript nodes.\"\n  (inner? [node]\n    \"Returns true if `node` can have children.\")\n  (children [node]\n    \"Returns child nodes for `node`.\")\n  (replace-children [node children]\n    \"Returns `node` replacing current children with `children`.\")\n  (leader-length [node]\n    \"Returns number of characters before children for `node`.\"))\n\n(extend-protocol InnerNode\n  #?(:clj Object :cljs default)\n  (inner? [_this] false)\n  (children [_this]\n    (throw (ex-info \"unsupported operation\" {})))\n  (replace-children [_this _children]\n    (throw (ex-info \"unsupported operation\" {})))\n  (leader-length [_this]\n    (throw (ex-info \"unsupported operation\" {}))))\n\n(defn child-sexprs\n  \"Returns children for `node` converted to Clojure forms.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([node]\n   (child-sexprs node {}))\n  ([node opts]\n   (when (inner? node)\n     (sexprs (children node) opts))))\n\n(defn node?\n  \"Returns true if `x` is a rewrite-clj created node.\"\n  [x]\n  (and (some? x) (not= :unknown (tag x))))\n\n(defn default-auto-resolve [alias]\n  (if (= :current alias)\n    '?_current-ns_?\n    (symbol (str \"??_\" alias \"_??\"))))\n\n;; ## Coerceable\n\n(defprotocol NodeCoerceable\n  \"Protocol for values that can be coerced to nodes.\"\n  (coerce [form] \"Coerce `form` to node.\"))\n\n(defprotocol MapQualifiable\n  \"Protocol for nodes that can be namespaced map qualified\"\n  (map-context-apply [node map-qualifier]\n    \"Applies `map-qualifier` context to `node`\")\n  (map-context-clear [node]\n    \"Removes map-qualifier context for `node`\"))\n\n;; ## Print Helper\n\n(defn- node->string\n  #?(:clj ^String [node]\n     :cljs ^string [node])\n  (let [n (str (if (printable-only? node)\n                 (pr-str (string node))\n                 (string node)))\n        n' (if (re-find #\"\\n\" n)\n             (->> (string/replace n #\"\\r?\\n\" \"\\n  \")\n                  (interop/simple-format \"\\n  %s\\n\"))\n             (str \" \" n))]\n    (interop/simple-format \"<%s:%s>\" (name (tag node)) n')))\n\n#?(:clj\n   (defn write-node\n     [^java.io.Writer writer node]\n     (.write writer (node->string node))))\n\n#?(:clj\n   (defmacro make-printable-clj!\n     [class]\n     `(defmethod print-method ~class\n        [node# w#]\n        (write-node w# node#)))\n   :cljs\n   (defn ^:no-doc make-printable-cljs!\n     [obj]\n     (extend-protocol IPrintWithWriter\n       obj\n       (-pr-writer [o writer _opts]\n         (-write writer (node->string o))))))\n\n(defn make-printable! [obj]\n  #?(:clj (make-printable-clj! obj)\n     :cljs (make-printable-cljs! obj)))\n\n;; ## Helpers\n\n(defn without-whitespace\n  [nodes]\n  (remove printable-only? nodes))\n\n(defn assert-sexpr-count\n  [nodes c]\n  (assert\n   (= (count (without-whitespace nodes)) c)\n   (interop/simple-format \"can only contain %d non-whitespace form%s.\"\n                          c (if (= c 1) \"\" \"s\"))))\n\n(defn assert-single-sexpr\n  [nodes]\n  (assert-sexpr-count nodes 1))\n\n(defn extent\n  \"A node's extent is how far it moves the \\\"cursor\\\".\n\n  Rows are simple - if we have x newlines in the string representation, we\n  will always move the \\\"cursor\\\" x rows.\n\n  Columns are strange.  If we have *any* newlines at all in the textual\n  representation of a node, following nodes' column positions are not\n  affected by our startting column position at all.  So the second number\n  in the pair we return is interpreted as a relative column adjustment\n  when the first number in the pair (rows) is zero, and as an absolute\n  column position when rows is non-zero.\"\n  [node]\n  (let [{:keys [row col next-row next-col]} (meta node)]\n    (if (and row col next-row next-col)\n      [(- next-row row)\n       (if (= row next-row row)\n         (- next-col col)\n         next-col)]\n      (let [s (string node)\n            rows (->> s (filter (partial = \\newline)) count)\n            cols (if (zero? rows)\n                   (count s)\n                   (->> s\n                     reverse\n                     (take-while (complement (partial = \\newline)))\n                     count\n                     inc))]\n        [rows cols]))))\n\n(defn +extent\n  [[row col] [row-extent col-extent]]\n  [(+ row row-extent)\n   (cond-> col-extent (zero? row-extent) (+ col))])\n\n(defn meta-elided\n  \"Same as `clojure.core/meta` but with positional metadata removed.\n  Use when you want to omit reader generated metadata on forms.\"\n  [form]\n  (apply dissoc (meta form) [:line :column :end-line :end-column]))\n\n(defn value\n  \"DEPRECATED: Get first child as a pair of tag/sexpr (if inner node),\n   or just the node's own sexpr. (use explicit analysis of `children`\n   `child-sexprs` instead) \"\n  [node]\n  (if (inner? node)\n    (some-> (children node)\n            (first)\n            ((juxt tag sexpr)))\n    (sexpr node)))\n\n","~:reader-features",["^V",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj$node$protocols$Node$tag$dyn","x__5393__auto__","m__5394__auto__","rewrite-clj.node.protocols/tag","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","rewrite-clj$node$protocols$Node$node_type$dyn","rewrite-clj.node.protocols/node-type","rewrite-clj$node$protocols$Node$printable_only_QMARK_$dyn","rewrite-clj.node.protocols/printable-only?","rewrite-clj$node$protocols$Node$sexpr_STAR_$dyn","rewrite-clj.node.protocols/sexpr*","rewrite-clj$node$protocols$Node$length$dyn","rewrite-clj.node.protocols/length","rewrite-clj$node$protocols$Node$string$dyn","rewrite-clj.node.protocols/string","rewrite-clj.node.protocols/Node","node","opts","_this","this","_opts","cljs.core/count","cljs.core.pr_str","rewrite-clj.node.protocols/sexpr-able?","cljs.core/not","var_args","G__30999","rewrite-clj.node.protocols/sexpr","js/Error","rewrite_clj.node.protocols.sexpr","G__31022","rewrite-clj.node.protocols/sexprs","nodes","rewrite_clj.node.protocols.sexprs","cljs.core.remove","p1__31016#","cljs.core.map","rewrite-clj.node.protocols/sum-lengths","cljs.core.reduce","cljs.core/+","rewrite-clj.node.protocols/concat-strings","cljs.core/str","rewrite-clj$node$protocols$InnerNode$inner_QMARK_$dyn","rewrite-clj.node.protocols/inner?","rewrite-clj$node$protocols$InnerNode$children$dyn","rewrite-clj.node.protocols/children","rewrite-clj$node$protocols$InnerNode$replace_children$dyn","rewrite-clj.node.protocols/replace-children","rewrite-clj$node$protocols$InnerNode$leader_length$dyn","rewrite-clj.node.protocols/leader-length","rewrite-clj.node.protocols/InnerNode","children","cljs.core.ex_info","_children","G__31033","rewrite-clj.node.protocols/child-sexprs","rewrite_clj.node.protocols.child_sexprs","rewrite-clj.node.protocols/node?","x","cljs.core.not_EQ_","rewrite-clj.node.protocols/default-auto-resolve","alias","cljs.core._EQ_","cljs.core.symbol","rewrite-clj$node$protocols$NodeCoerceable$coerce$dyn","rewrite-clj.node.protocols/coerce","rewrite-clj.node.protocols/NodeCoerceable","form","rewrite-clj$node$protocols$MapQualifiable$map_context_apply$dyn","rewrite-clj.node.protocols/map-context-apply","rewrite-clj$node$protocols$MapQualifiable$map_context_clear$dyn","rewrite-clj.node.protocols/map-context-clear","rewrite-clj.node.protocols/MapQualifiable","map-qualifier","rewrite-clj.node.protocols/node->string","n","n'","cljs.core/re-find","clojure.string/replace","rewrite_clj.interop.simple_format","cljs.core/name","rewrite-clj.node.protocols/make-printable-cljs!","obj","cljs.core/PROTOCOL_SENTINEL","o","writer","cljs.core/-write","rewrite-clj.node.protocols/make-printable!","rewrite-clj.node.protocols/without-whitespace","rewrite-clj.node.protocols/assert-sexpr-count","c","rewrite-clj.node.protocols/assert-single-sexpr","rewrite-clj.node.protocols/extent","map__31058","cljs.core/--destructure-map","cljs.core.get","row","col","next-row","next-col","cljs.core/meta","and__5043__auto__","s","rows","cljs.core.filter","cljs.core.partial","cljs.core/=","cols","cljs.core/reverse","cljs.core.take_while","cljs.core/complement","p__31062","p__31063","vec__31064","cljs.core.nth","vec__31067","rewrite-clj.node.protocols/+extent","row-extent","col-extent","G__31071","rewrite-clj.node.protocols/meta-elided","cljs.core.apply","cljs.core/dissoc","rewrite-clj.node.protocols/value","G__31075","cljs.core/first","cljs.core.juxt"]],"~:used-vars",["^V",["~$cljs.core/--destructure-map","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/str","~$rewrite-clj.node.protocols/sexpr-able?","~$rewrite-clj.node.protocols/make-printable!","~$rewrite-clj.node.protocols/MapQualifiable","~$cljs.core/filter","~$cljs.core/=","~$rewrite-clj.node.protocols/child-sexprs","~$cljs.core/partial","~$rewrite-clj.node.protocols/tag","~$cljs.core/take-while","~$cljs.core/-write","~$rewrite-clj.node.protocols/map-context-clear","~$rewrite-clj.node.protocols/children","~$rewrite-clj.node.protocols/make-printable-cljs!","~$cljs.core/count","~$goog/typeOf","~$cljs.core/reduce","~$cljs.core/apply","~$rewrite-clj.node.protocols/assert-sexpr-count","~$cljs.core/not=","~$rewrite-clj.node.protocols/concat-strings","~$cljs.core/dissoc","~$rewrite-clj.node.protocols/leader-length","~$rewrite-clj.node.protocols/inner?","~$rewrite-clj.node.protocols/sexprs","~$cljs.core/pr-str","~$rewrite-clj.node.protocols/map-context-apply","~$rewrite-clj.node.protocols/default-auto-resolve","~$rewrite-clj.node.protocols/InnerNode","~$rewrite-clj.node.protocols/meta-elided","~$cljs.core/juxt","~$cljs.core/map","~$rewrite-clj.node.protocols/replace-children","~$rewrite-clj.node.protocols/+extent","~$rewrite-clj.node.protocols/printable-only?","~$cljs.core/get","~$rewrite-clj.node.protocols/node-type","~$cljs.core/remove","~$rewrite-clj.node.protocols/node?","~$rewrite-clj.node.protocols/NodeCoerceable","~$rewrite-clj.node.protocols/sexpr","~$rewrite-clj.node.protocols/value","~$cljs.core/symbol","~$cljs.core/missing-protocol","~$cljs.core/re-find","~$rewrite-clj.interop/simple-format","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/meta","~$rewrite-clj.node.protocols/sexpr*","~$clojure.string/replace","~$rewrite-clj.node.protocols/assert-single-sexpr","~$rewrite-clj.node.protocols/without-whitespace","~$rewrite-clj.node.protocols/coerce","~$rewrite-clj.node.protocols/string","~$cljs.core/not","~$cljs.core/complement","~$cljs.core/reverse","~$rewrite-clj.node.protocols/length","~$rewrite-clj.node.protocols/sum-lengths","~$cljs.core/first","~$rewrite-clj.node.protocols/Node","~$cljs.core/name","~$cljs.core/+","~$rewrite-clj.node.protocols/node->string","~$js/Error","~$rewrite-clj.node.protocols/extent"]]],"~:cache-keys",["~#cmap",[["^1D","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^V",[]],"~:deps-syms",["^17","~$goog.dom.HtmlElement"]]],["^1D","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","~$goog.string"]]],["^1D","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1D","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3H"]]],["^1D","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3I"]]],["^1D","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3I"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^1D","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3I","~$goog.reflect"]]],["^1D","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3I","~$goog.fs.blob","^3J","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3L","^3M","^3N","^3O"]]],["^1D","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3N","~$goog.html.SafeUrl","^3O","^3I","^3H"]]],["^1D","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3I","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3S","~$goog.html.SafeStyle","^3U","^3K","~$goog.html.uncheckedconversions","^3N","^3H"]]],["^1D","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3N","^3L","^3M","^3S","^3Y","~$goog.html.SafeStyleSheet","^3U","~$goog.dom.TagName","^3K","^3O","^3I","~$goog.labs.userAgent.browser","^3E","^3F","^3H","~$goog.dom.tags","^3T"]]],["^1D","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3F"]]],["^1D","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","rewrite_clj/node/protocols.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^16","^12","^14"]]],["^1D","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1D","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3E","^3I","~$goog.collections.maps","^3D","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1D","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",[]]],["^1D","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3E","^3F"]]],["^1D","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^16","^3D","~$goog.string.StringBuffer"]]],["^1D","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","~$goog.dom.safe","^3Z","^3N","^3H"]]],["^1D","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","~$goog.labs.userAgent","^3H"]]],["^1D","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3I","^3X","^3S","^3Y","^3[","^3U","^3K","^3N","^3H","^3L"]]],["^1D","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17"]]],["^1D","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","~$goog.math.Long","~$goog.math.Integer","^3D","^3F","^3E","~$goog.Uri","^4:"]]],["^1D","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3N","^3O","^3T","^3I"]]],["^1D","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3N","^3Y","^3O","^3F","^3I","^3H"]]],["^1D","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3Q"]]],["^1D","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3I","^3D"]]],["^1D","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^3I","^3O"]]],["^1D","rewrite_clj/interop.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3?",["^ ","^3@",null,"^3A",["^V",[]],"^3B",["^17","^16","^3D","~$goog.string.format"]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",1,"^8",32,"^9",1,"^:",58,"^;","0.4.0","^<",true],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q","^R","^S"],"~:shadow/protocol-prefixes",["^V",["rewrite-clj$node$protocols$InnerNode$","rewrite-clj$node$protocols$MapQualifiable$","rewrite-clj$node$protocols$Node$","rewrite-clj$node$protocols$NodeCoerceable$"]],"^T",null,"^U",["^V",[]],"^W","^X","^Y",["^ "],"^10",null,"^11",["^ ","^12","^12","^13","^12","^14","^14","^15","^14","^16","^16","^17","^17"],"^18",["^V",["^19"]],"~:shadow/js-access-global",["^V",["Error"]],"^1:",null,"~:defs",["^ ","~$child-sexprs",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",98,"^8",7,"^9",98,"^:",19,"~:arglists",["^1=",["~$quote",["^1=",[["~$node"],["^5<","~$opts"]]]]],"~:doc","Returns children for `node` converted to Clojure forms.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^5<"],["^5<","^5="]],"^5:",["^1=",[["^5<"],["^5<","^5="]]],"~:arglists-meta",["^1=",[null,null]]]],"^W","^1X","^6","rewrite_clj/node/protocols.cljc","^:",19,"^5?",["^ ","^5@",false,"^5A",2,"^5B",2,"^5C",[["^5<"],["^5<","^5="]],"^5:",["^1=",[["^5<"],["^5<","^5="]]],"^5D",["^1=",[null,null]]],"^5C",[["^5<"],["^5<","^5="]],"~:protocol-impl",null,"^5A",2,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"~:methods",[["^ ","^5A",1,"^5@",false,"~:tag","~$any"],["^ ","^5A",2,"^5@",false,"^5G",["^V",["~$cljs.core/LazySeq","~$clj-nil"]]]],"^7",98,"^9",98,"^5B",2,"~:fn-var",true,"^5:",["^1=",[["^5<"],["^5<","^5="]]],"^5>","Returns children for `node` converted to Clojure forms.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)"],"~$tag",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",11,"^8",4,"^9",11,"^:",7,"~:protocol","^37","^5>","Returns keyword representing type of `node`.","^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"^5M","^37","^W","^1Z","^6","rewrite_clj/node/protocols.cljc","^:",7,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",9,"~:ret-tag","^5H","^9",11,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Returns keyword representing type of `node`."],"~$MapQualifiable",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","rewrite_clj/node/protocols.cljc","^:",28,"^8",14,"^7",125,"~:protocol-info",["^ ","^5F",["^ ","~$map-context-apply",[["^5<","~$map-qualifier"]],"~$map-context-clear",[["^5<"]]]],"^9",125,"~:sigs",["^ ","~:map-context-apply",["^ ","^W","^5R","^5:",["^1=",[["^5<","^5S"]]],"^5>","Applies `map-qualifier` context to `node`"],"~:map-context-clear",["^ ","^W","^5T","^5:",["^1=",[["^5<"]]],"^5>","Removes map-qualifier context for `node`"]],"^5>","Protocol for nodes that can be namespaced map qualified","~:jsdoc",["^1=",["@interface"]]],"^5P",true,"^W","^1U","^6","rewrite_clj/node/protocols.cljc","^:",28,"^8",1,"^7",125,"^5Q",["^ ","^5F",["^ ","^5R",[["^5<","^5S"]],"^5T",[["^5<"]]]],"~:info",null,"^9",125,"^5G","^5H","^5U",["^ ","^5V",["^ ","^W","^5R","^5:",["^1=",[["^5<","^5S"]]],"^5>","Applies `map-qualifier` context to `node`"],"^5W",["^ ","^W","^5T","^5:",["^1=",[["^5<"]]],"^5>","Removes map-qualifier context for `node`"]],"~:impls",["^V",[]],"^5>","Protocol for nodes that can be namespaced map qualified","^5X",["^1=",["@interface"]]],"~$make-printable-cljs!",["^ ","^<",true,"^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",158,"^8",19,"^9",158,"^:",39,"^<",true,"^5:",["^1=",["^5;",["^1=",[["~$obj"]]]]]],"^W","^23","^6","rewrite_clj/node/protocols.cljc","^:",39,"^5C",["^1=",[["^60"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",4,"^5@",false,"^7",158,"^9",158,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^60"]]]]]],"^5T",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",129,"^8",4,"^9",129,"^:",21,"^5M","^1U","^5>","Removes map-qualifier context for `node`","^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"^5M","^1U","^W","^21","^6","rewrite_clj/node/protocols.cljc","^:",21,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",125,"^5N","^5H","^9",129,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Removes map-qualifier context for `node`"],"~$make-printable!",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",165,"^8",7,"^9",165,"^:",22,"^5:",["^1=",["^5;",["^1=",[["^60"]]]]]],"^W","^1T","^6","rewrite_clj/node/protocols.cljc","^:",22,"^5C",["^1=",[["^60"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",165,"^5N","^5H","^9",165,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^60"]]]]]],"~$without-whitespace",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",171,"^8",7,"^9",171,"^:",25,"^5:",["^1=",["^5;",["^1=",[["~$nodes"]]]]]],"^W","^2Z","^6","rewrite_clj/node/protocols.cljc","^:",25,"^5C",["^1=",[["^63"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",171,"^5N","^5I","^9",171,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^63"]]]]]],"~$default-auto-resolve",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",114,"^8",7,"^9",114,"^:",27,"^5:",["^1=",["^5;",["^1=",[["~$alias"]]]]]],"^W","^2A","^6","rewrite_clj/node/protocols.cljc","^:",27,"^5C",["^1=",[["^65"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",114,"^5N",["^V",["^5H","~$cljs.core/Symbol"]],"^9",114,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^65"]]]]]],"~$children",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",81,"^8",4,"^9",81,"^:",12,"^5M","^2B","^5>","Returns child nodes for `node`.","^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"^5M","^2B","^W","^22","^6","rewrite_clj/node/protocols.cljc","^:",12,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",77,"^5N","^5H","^9",81,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Returns child nodes for `node`."],"~$sexprs",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",51,"^8",7,"^9",51,"^:",13,"^5:",["^1=",["^5;",["^1=",[["^63"],["^63","^5="]]]]],"^5>","Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).","^5?",["^ ","^5@",false,"^5A",2,"^5B",2,"^5C",[["^63"],["^63","^5="]],"^5:",["^1=",[["^63"],["^63","^5="]]],"^5D",["^1=",[null,null]]]],"^W","^2>","^6","rewrite_clj/node/protocols.cljc","^:",13,"^5?",["^ ","^5@",false,"^5A",2,"^5B",2,"^5C",[["^63"],["^63","^5="]],"^5:",["^1=",[["^63"],["^63","^5="]]],"^5D",["^1=",[null,null]]],"^5C",[["^63"],["^63","^5="]],"^5E",null,"^5A",2,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^5F",[["^ ","^5A",1,"^5@",false,"^5G","^5H"],["^ ","^5A",2,"^5@",false,"^5G","^5I"]],"^7",51,"^9",51,"^5B",2,"^5K",true,"^5:",["^1=",[["^63"],["^63","^5="]]],"^5>","Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"~$inner?",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",79,"^8",4,"^9",79,"^:",10,"^5M","^2B","^5>","Returns true if `node` can have children.","^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"^5M","^2B","^W","^2=","^6","rewrite_clj/node/protocols.cljc","^:",10,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",77,"^5N","^5H","^9",79,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Returns true if `node` can have children."],"~$replace-children",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",83,"^8",4,"^9",83,"^:",20,"^5M","^2B","^5>","Returns `node` replacing current children with `children`.","^5:",["^1=",["^5;",["^1=",[["^5<","^67"]]]]]],"^5M","^2B","^W","^2F","^6","rewrite_clj/node/protocols.cljc","^:",20,"^5C",["^1=",[["^5<","^67"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",77,"^5N","^5H","^9",83,"^5B",2,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<","^67"]]]]],"^5>","Returns `node` replacing current children with `children`."],"~$+extent",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",216,"^8",7,"^9",216,"^:",14,"^5:",["^1=",["^5;",["^1=",[[["~$row","~$col"],["~$row-extent","~$col-extent"]]]]]]],"^W","^2G","^6","rewrite_clj/node/protocols.cljc","^:",14,"^5C",["^1=",[["~$p__31062","~$p__31063"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",216,"^5N","~$cljs.core/IVector","^9",216,"^5B",2,"^5K",true,"^5:",["^1=",["^5;",["^1=",[[["^6<","^6="],["^6>","^6?"]]]]]]],"~$InnerNode",["^ ","^5",["^ ","^5P",true,"^6","rewrite_clj/node/protocols.cljc","^:",23,"^8",14,"^7",77,"^5Q",["^ ","^5F",["^ ","^69",[["^5<"]],"^67",[["^5<"]],"^6:",[["^5<","^67"]],"~$leader-length",[["^5<"]]]],"^9",77,"^5U",["^ ","~:inner?",["^ ","^W","^69","^5:",["^1=",[["^5<"]]],"^5>","Returns true if `node` can have children."],"~:children",["^ ","^W","^67","^5:",["^1=",[["^5<"]]],"^5>","Returns child nodes for `node`."],"~:replace-children",["^ ","^W","^6:","^5:",["^1=",[["^5<","^67"]]],"^5>","Returns `node` replacing current children with `children`."],"~:leader-length",["^ ","^W","^6D","^5:",["^1=",[["^5<"]]],"^5>","Returns number of characters before children for `node`."]],"^5>","Protocol for non-leaf EDN/Clojure/ClojureScript nodes.","^5X",["^1=",["@interface"]]],"^5P",true,"^W","^2B","^6","rewrite_clj/node/protocols.cljc","^:",23,"^8",1,"^7",77,"^5Q",["^ ","^5F",["^ ","^69",[["^5<"]],"^67",[["^5<"]],"^6:",[["^5<","^67"]],"^6D",[["^5<"]]]],"^5Y",null,"^9",77,"^5G","^5H","^5U",["^ ","^6E",["^ ","^W","^69","^5:",["^1=",[["^5<"]]],"^5>","Returns true if `node` can have children."],"^6F",["^ ","^W","^67","^5:",["^1=",[["^5<"]]],"^5>","Returns child nodes for `node`."],"^6G",["^ ","^W","^6:","^5:",["^1=",[["^5<","^67"]]],"^5>","Returns `node` replacing current children with `children`."],"^6H",["^ ","^W","^6D","^5:",["^1=",[["^5<"]]],"^5>","Returns number of characters before children for `node`."]],"^5Z",["^V",["~$default"]],"^5>","Protocol for non-leaf EDN/Clojure/ClojureScript nodes.","^5X",["^1=",["@interface"]]],"~$printable-only?",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",16,"^8",4,"^9",16,"^:",19,"^5M","^37","^5>","Return true if `node` cannot be converted to an s-expression element.","^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"^5M","^37","^W","^2H","^6","rewrite_clj/node/protocols.cljc","^:",19,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",9,"^5N","^5H","^9",16,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Return true if `node` cannot be converted to an s-expression element."],"^6D",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",85,"^8",4,"^9",85,"^:",17,"^5M","^2B","^5>","Returns number of characters before children for `node`.","^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"^5M","^2B","^W","^2<","^6","rewrite_clj/node/protocols.cljc","^:",17,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",77,"^5N","^5H","^9",85,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Returns number of characters before children for `node`."],"~$sexpr-able?",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",34,"^8",7,"^9",34,"^:",18,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Return true if [[sexpr]] is supported for `node`'s element type.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)"],"^W","^1S","^6","rewrite_clj/node/protocols.cljc","^:",18,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",34,"^5N","~$boolean","^9",34,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Return true if [[sexpr]] is supported for `node`'s element type.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)"],"~$sexpr",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",41,"^8",7,"^9",41,"^:",12,"^5:",["^1=",["^5;",["^1=",[["^5<"],["^5<","^5="]]]]],"^5>","Return `node` converted to form.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).","^5?",["^ ","^5@",false,"^5A",2,"^5B",2,"^5C",[["^5<"],["^5<","^5="]],"^5:",["^1=",[["^5<"],["^5<","^5="]]],"^5D",["^1=",[null,null]]]],"^W","^2N","^6","rewrite_clj/node/protocols.cljc","^:",12,"^5?",["^ ","^5@",false,"^5A",2,"^5B",2,"^5C",[["^5<"],["^5<","^5="]],"^5:",["^1=",[["^5<"],["^5<","^5="]]],"^5D",["^1=",[null,null]]],"^5C",[["^5<"],["^5<","^5="]],"^5E",null,"^5A",2,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^5F",[["^ ","^5A",1,"^5@",false,"^5G","^5H"],["^ ","^5A",2,"^5@",false,"^5G","^5H"]],"^7",41,"^9",41,"^5B",2,"^5K",true,"^5:",["^1=",[["^5<"],["^5<","^5="]]],"^5>","Return `node` converted to form.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"~$value",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",227,"^8",7,"^9",227,"^:",12,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","DEPRECATED: Get first child as a pair of tag/sexpr (if inner node),\n   or just the node's own sexpr. (use explicit analysis of `children`\n   `child-sexprs` instead) "],"^W","^2O","^6","rewrite_clj/node/protocols.cljc","^:",12,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",227,"^5N",["^V",["^5H","^5J"]],"^9",227,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","DEPRECATED: Get first child as a pair of tag/sexpr (if inner node),\n   or just the node's own sexpr. (use explicit analysis of `children`\n   `child-sexprs` instead) "],"~$meta-elided",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",221,"^8",7,"^9",221,"^:",18,"^5:",["^1=",["^5;",["^1=",[["~$form"]]]]],"^5>","Same as `clojure.core/meta` but with positional metadata removed.\n  Use when you want to omit reader generated metadata on forms."],"^W","^2C","^6","rewrite_clj/node/protocols.cljc","^:",18,"^5C",["^1=",[["^6P"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",221,"^5N","^5H","^9",221,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^6P"]]]]],"^5>","Same as `clojure.core/meta` but with positional metadata removed.\n  Use when you want to omit reader generated metadata on forms."],"~$sexpr*",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",18,"^8",4,"^9",18,"^:",10,"^5M","^37","^5>","Return `node` converted to form applying `opts`. Internal, use `sexpr` instead.","^5:",["^1=",["^5;",["^1=",[["^5<","^5="]]]]]],"^5M","^37","^W","^2W","^6","rewrite_clj/node/protocols.cljc","^:",10,"^5C",["^1=",[["^5<","^5="]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",9,"^5N","^5H","^9",18,"^5B",2,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<","^5="]]]]],"^5>","Return `node` converted to form applying `opts`. Internal, use `sexpr` instead."],"~$concat-strings",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",70,"^8",7,"^9",70,"^:",21,"^5:",["^1=",["^5;",["^1=",[["^63"]]]]],"^5>","Return string version of `nodes`."],"^W","^2:","^6","rewrite_clj/node/protocols.cljc","^:",21,"^5C",["^1=",[["^63"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",70,"^5N","^5H","^9",70,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^63"]]]]],"^5>","Return string version of `nodes`."],"~$node-type",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",13,"^8",4,"^9",13,"^:",13,"^5M","^37","^5>","Returns keyword representing the node type for `node`.\n     Currently internal and used to support testing.","^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"^5M","^37","^W","^2J","^6","rewrite_clj/node/protocols.cljc","^:",13,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",9,"^5N","^5H","^9",13,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Returns keyword representing the node type for `node`.\n     Currently internal and used to support testing."],"^13",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",22,"^8",4,"^9",22,"^:",10,"^5M","^37","^5>","Return the string version of `node`.","^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"^5M","^37","^W","^30","^6","rewrite_clj/node/protocols.cljc","^:",10,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",9,"^5N","^5H","^9",22,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Return the string version of `node`."],"~$assert-sexpr-count",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",175,"^8",7,"^9",175,"^:",25,"^5:",["^1=",["^5;",["^1=",[["^63","~$c"]]]]]],"^W","^28","^6","rewrite_clj/node/protocols.cljc","^:",25,"^5C",["^1=",[["^63","~$c"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",175,"^5N","^5J","^9",175,"^5B",2,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^63","~$c"]]]]]],"^5R",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",127,"^8",4,"^9",127,"^:",21,"^5M","^1U","^5>","Applies `map-qualifier` context to `node`","^5:",["^1=",["^5;",["^1=",[["^5<","^5S"]]]]]],"^5M","^1U","^W","^2@","^6","rewrite_clj/node/protocols.cljc","^:",21,"^5C",["^1=",[["^5<","^5S"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",125,"^5N","^5H","^9",127,"^5B",2,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<","^5S"]]]]],"^5>","Applies `map-qualifier` context to `node`"],"~$sum-lengths",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",65,"^8",7,"^9",65,"^:",18,"^5:",["^1=",["^5;",["^1=",[["^63"]]]]],"^5>","Return total string length for `nodes`."],"^W","^35","^6","rewrite_clj/node/protocols.cljc","^:",18,"^5C",["^1=",[["^63"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",65,"^5N","^5H","^9",65,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^63"]]]]],"^5>","Return total string length for `nodes`."],"~$assert-single-sexpr",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",182,"^8",7,"^9",182,"^:",26,"^5:",["^1=",["^5;",["^1=",[["^63"]]]]]],"^W","^2Y","^6","rewrite_clj/node/protocols.cljc","^:",26,"^5C",["^1=",[["^63"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",182,"^5N","^5J","^9",182,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^63"]]]]]],"~$extent",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",186,"^8",7,"^9",186,"^:",13,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","A node's extent is how far it moves the \"cursor\".\n\n  Rows are simple - if we have x newlines in the string representation, we\n  will always move the \"cursor\" x rows.\n\n  Columns are strange.  If we have *any* newlines at all in the textual\n  representation of a node, following nodes' column positions are not\n  affected by our startting column position at all.  So the second number\n  in the pair we return is interpreted as a relative column adjustment\n  when the first number in the pair (rows) is zero, and as an absolute\n  column position when rows is non-zero."],"^W","^3<","^6","rewrite_clj/node/protocols.cljc","^:",13,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",186,"^5N","^6B","^9",186,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","A node's extent is how far it moves the \"cursor\".\n\n  Rows are simple - if we have x newlines in the string representation, we\n  will always move the \"cursor\" x rows.\n\n  Columns are strange.  If we have *any* newlines at all in the textual\n  representation of a node, following nodes' column positions are not\n  affected by our startting column position at all.  So the second number\n  in the pair we return is interpreted as a relative column adjustment\n  when the first number in the pair (rows) is zero, and as an absolute\n  column position when rows is non-zero."],"~$node->string",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",134,"^8",8,"^9",134,"^:",20,"~:private",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"^6Y",true,"^W","^3:","^6","rewrite_clj/node/protocols.cljc","^:",20,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",134,"^5N","^5H","^9",134,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"~$length",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",20,"^8",4,"^9",20,"^:",10,"^5M","^37","^5>","Return number of characters for the string version of `node`.","^5:",["^1=",["^5;",["^1=",[["^5<"]]]]]],"^5M","^37","^W","^34","^6","rewrite_clj/node/protocols.cljc","^:",10,"^5C",["^1=",[["^5<"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",9,"^5N","^5H","^9",20,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^5<"]]]]],"^5>","Return number of characters for the string version of `node`."],"~$node?",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",109,"^8",7,"^9",109,"^:",12,"^5:",["^1=",["^5;",["^1=",[["~$x"]]]]],"^5>","Returns true if `x` is a rewrite-clj created node."],"^W","^2L","^6","rewrite_clj/node/protocols.cljc","^:",12,"^5C",["^1=",[["~$x"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",109,"^5N","^6L","^9",109,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["~$x"]]]]],"^5>","Returns true if `x` is a rewrite-clj created node."],"~$NodeCoerceable",["^ ","^5",["^ ","^5P",true,"^6","rewrite_clj/node/protocols.cljc","^:",28,"^8",14,"^7",121,"^5Q",["^ ","^5F",["^ ","~$coerce",[["^6P"]]]],"^9",121,"^5U",["^ ","~:coerce",["^ ","^W","^71","^5:",["^1=",[["^6P"]]],"^5>","Coerce `form` to node."]],"^5>","Protocol for values that can be coerced to nodes.","^5X",["^1=",["@interface"]]],"^5P",true,"^W","^2M","^6","rewrite_clj/node/protocols.cljc","^:",28,"^8",1,"^7",121,"^5Q",["^ ","^5F",["^ ","^71",[["^6P"]]]],"^5Y",null,"^9",121,"^5G","^5H","^5U",["^ ","^72",["^ ","^W","^71","^5:",["^1=",[["^6P"]]],"^5>","Coerce `form` to node."]],"^5Z",["^V",[]],"^5>","Protocol for values that can be coerced to nodes.","^5X",["^1=",["@interface"]]],"~$Node",["^ ","^5",["^ ","^5P",true,"^6","rewrite_clj/node/protocols.cljc","^:",18,"^8",14,"^7",9,"^5Q",["^ ","^5F",["^ ","^5L",[["^5<"]],"^6S",[["^5<"]],"^6J",[["^5<"]],"^6Q",[["^5<","^5="]],"^6Z",[["^5<"]],"^13",[["^5<"]]]],"^9",9,"^5U",["^ ","^5G",["^ ","^W","^5L","^5:",["^1=",[["^5<"]]],"^5>","Returns keyword representing type of `node`."],"~:node-type",["^ ","^W","^6S","^5:",["^1=",[["^5<"]]],"^5>","Returns keyword representing the node type for `node`.\n     Currently internal and used to support testing."],"~:printable-only?",["^ ","^W","^6J","^5:",["^1=",[["^5<"]]],"^5>","Return true if `node` cannot be converted to an s-expression element."],"~:sexpr*",["^ ","^W","^6Q","^5:",["^1=",[["^5<","^5="]]],"^5>","Return `node` converted to form applying `opts`. Internal, use `sexpr` instead."],"~:length",["^ ","^W","^6Z","^5:",["^1=",[["^5<"]]],"^5>","Return number of characters for the string version of `node`."],"~:string",["^ ","^W","^13","^5:",["^1=",[["^5<"]]],"^5>","Return the string version of `node`."]],"^5>","Protocol for EDN/Clojure/ClojureScript nodes.","^5X",["^1=",["@interface"]]],"^5P",true,"^W","^37","^6","rewrite_clj/node/protocols.cljc","^:",18,"^8",1,"^7",9,"^5Q",["^ ","^5F",["^ ","^5L",[["^5<"]],"^6S",[["^5<"]],"^6J",[["^5<"]],"^6Q",[["^5<","^5="]],"^6Z",[["^5<"]],"^13",[["^5<"]]]],"^5Y",null,"^9",9,"^5G","^5H","^5U",["^ ","^5G",["^ ","^W","^5L","^5:",["^1=",[["^5<"]]],"^5>","Returns keyword representing type of `node`."],"^74",["^ ","^W","^6S","^5:",["^1=",[["^5<"]]],"^5>","Returns keyword representing the node type for `node`.\n     Currently internal and used to support testing."],"^75",["^ ","^W","^6J","^5:",["^1=",[["^5<"]]],"^5>","Return true if `node` cannot be converted to an s-expression element."],"^76",["^ ","^W","^6Q","^5:",["^1=",[["^5<","^5="]]],"^5>","Return `node` converted to form applying `opts`. Internal, use `sexpr` instead."],"^77",["^ ","^W","^6Z","^5:",["^1=",[["^5<"]]],"^5>","Return number of characters for the string version of `node`."],"^78",["^ ","^W","^13","^5:",["^1=",[["^5<"]]],"^5>","Return the string version of `node`."]],"^5Z",["^V",["^6I"]],"^5>","Protocol for EDN/Clojure/ClojureScript nodes.","^5X",["^1=",["@interface"]]],"^71",["^ ","^59",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljc","^7",123,"^8",4,"^9",123,"^:",10,"^5M","^2M","^5>","Coerce `form` to node.","^5:",["^1=",["^5;",["^1=",[["^6P"]]]]]],"^5M","^2M","^W","^2[","^6","rewrite_clj/node/protocols.cljc","^:",10,"^5C",["^1=",[["^6P"]]],"^5E",null,"^5D",["^1=",[null,null]],"^8",1,"^5@",false,"^7",121,"^5N","^5H","^9",123,"^5B",1,"^5K",true,"^5:",["^1=",["^5;",["^1=",[["^6P"]]]]],"^5>","Coerce `form` to node."]],"^1;",["^ ","^16","^16"],"~:cljs.analyzer/constants",["^ ","^18",["^V",["~:next-col","~:unknown","^:","^8","^7","~:col","~:current","^9","~$?_current-ns_?","~:row","~:next-row"]],"~:order",["^7;","^7=","^7>","^7?","^7<","^7@","^7:","^7","^8","^9","^:"]],"^1@",["^ ","^19",["^V",[]]],"^1A",["^ "],"^1B",["^17","^16","^12","^14"]],"^[","^X","~:ns-specs",["^ "],"~:ns-spec-vars",["^V",[]],"~:compiler-options",["^3>",[["^7D","~:static-fns"],true,["^7D","~:shadow-tweaks"],null,["^7D","~:source-map-inline"],null,["^7D","~:elide-asserts"],false,["^7D","~:optimize-constants"],null,["^7D","^1G"],null,["^7D","~:external-config"],null,["^7D","~:tooling-config"],null,["^7D","~:emit-constants"],null,["^7D","~:load-tests"],null,["^7D","~:form-size-threshold"],null,["^7D","~:global-goog-object&array"],null,["^7D","~:data-readers"],null,["^7D","~:infer-externs"],"~:auto",["^7D","^1I"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7D","~:fn-invoke-direct"],null,["^7D","~:source-map"],"/dev/null"]]]