["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.node.quote');\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {rewrite_clj.node.protocols.InnerNode}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {rewrite_clj.node.protocols.Node}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nrewrite_clj.node.quote.QuoteNode = (function (tag,prefix,sym,children,__meta,__extmap,__hash){\nthis.tag = tag;\nthis.prefix = prefix;\nthis.sym = sym;\nthis.children = children;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(rewrite_clj.node.quote.QuoteNode.prototype.toString = (function (){\nvar self__ = this;\nvar node = this;\nreturn node.rewrite_clj$node$protocols$Node$string$arity$1(null);\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__5343__auto__,k__5344__auto__){\nvar self__ = this;\nvar this__5343__auto____$1 = this;\nreturn this__5343__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__5344__auto__,null);\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__5345__auto__,k31268,else__5346__auto__){\nvar self__ = this;\nvar this__5345__auto____$1 = this;\nvar G__31282 = k31268;\nvar G__31282__$1 = (((G__31282 instanceof cljs.core.Keyword))?G__31282.fqn:null);\nswitch (G__31282__$1) {\ncase \"tag\":\nreturn self__.tag;\n\nbreak;\ncase \"prefix\":\nreturn self__.prefix;\n\nbreak;\ncase \"sym\":\nreturn self__.sym;\n\nbreak;\ncase \"children\":\nreturn self__.children;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k31268,else__5346__auto__);\n\n}\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__5363__auto__,f__5364__auto__,init__5365__auto__){\nvar self__ = this;\nvar this__5363__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__5366__auto__,p__31290){\nvar vec__31291 = p__31290;\nvar k__5367__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31291,(0),null);\nvar v__5368__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31291,(1),null);\nreturn (f__5364__auto__.cljs$core$IFn$_invoke$arity$3 ? f__5364__auto__.cljs$core$IFn$_invoke$arity$3(ret__5366__auto__,k__5367__auto__,v__5368__auto__) : f__5364__auto__.call(null,ret__5366__auto__,k__5367__auto__,v__5368__auto__));\n}),init__5365__auto__,this__5363__auto____$1);\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__5358__auto__,writer__5359__auto__,opts__5360__auto__){\nvar self__ = this;\nvar this__5358__auto____$1 = this;\nvar pr_pair__5361__auto__ = (function (keyval__5362__auto__){\nreturn cljs.core.pr_sequential_writer(writer__5359__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__5360__auto__,keyval__5362__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__5359__auto__,pr_pair__5361__auto__,\"#rewrite-clj.node.quote.QuoteNode{\",\", \",\"}\",opts__5360__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),self__.tag],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),self__.prefix],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),self__.sym],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"children\",\"children\",-940561982),self__.children],null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__31267){\nvar self__ = this;\nvar G__31267__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__31267__$1,4,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__5341__auto__){\nvar self__ = this;\nvar this__5341__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__5338__auto__){\nvar self__ = this;\nvar this__5338__auto____$1 = this;\nreturn (new rewrite_clj.node.quote.QuoteNode(self__.tag,self__.prefix,self__.sym,self__.children,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__5347__auto__){\nvar self__ = this;\nvar this__5347__auto____$1 = this;\nreturn (4 + cljs.core.count(self__.__extmap));\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__5339__auto__){\nvar self__ = this;\nvar this__5339__auto____$1 = this;\nvar h__5154__auto__ = self__.__hash;\nif((!((h__5154__auto__ == null)))){\nreturn h__5154__auto__;\n} else {\nvar h__5154__auto____$1 = (function (coll__5340__auto__){\nreturn (1712251858 ^ cljs.core.hash_unordered_coll(coll__5340__auto__));\n})(this__5339__auto____$1);\n(self__.__hash = h__5154__auto____$1);\n\nreturn h__5154__auto____$1;\n}\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this31271,other31272){\nvar self__ = this;\nvar this31271__$1 = this;\nreturn (((!((other31272 == null)))) && ((((this31271__$1.constructor === other31272.constructor)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this31271__$1.tag,other31272.tag)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this31271__$1.prefix,other31272.prefix)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this31271__$1.sym,other31272.sym)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this31271__$1.children,other31272.children)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this31271__$1.__extmap,other31272.__extmap)))))))))))));\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL);\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn self__.tag;\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$Node$node_type$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245);\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn false;\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$Node$sexpr_STAR_$arity$2 = (function (_node,opts){\nvar self__ = this;\nvar _node__$1 = this;\nreturn (new cljs.core.List(null,self__.sym,(new cljs.core.List(null,cljs.core.first(rewrite_clj.node.protocols.sexprs.cljs$core$IFn$_invoke$arity$2(self__.children,opts)),null,(1),null)),(2),null));\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn (cljs.core.count(self__.prefix) + rewrite_clj.node.protocols.sum_lengths(self__.children));\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.prefix),cljs.core.str.cljs$core$IFn$_invoke$arity$1(rewrite_clj.node.protocols.concat_strings(self__.children))].join('');\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__5353__auto__,k__5354__auto__){\nvar self__ = this;\nvar this__5353__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982),null,new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),null,new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),null,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),null], null), null),k__5354__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__5353__auto____$1),self__.__meta),k__5354__auto__);\n} else {\nreturn (new rewrite_clj.node.quote.QuoteNode(self__.tag,self__.prefix,self__.sym,self__.children,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__5354__auto__)),null));\n}\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$InnerNode$ = cljs.core.PROTOCOL_SENTINEL);\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$InnerNode$inner_QMARK_$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn true;\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$InnerNode$children$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn self__.children;\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$InnerNode$replace_children$arity$2 = (function (node,children_SINGLEQUOTE_){\nvar self__ = this;\nvar node__$1 = this;\nrewrite_clj.node.protocols.assert_single_sexpr(children_SINGLEQUOTE_);\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),children_SINGLEQUOTE_);\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.rewrite_clj$node$protocols$InnerNode$leader_length$arity$1 = (function (_node){\nvar self__ = this;\nvar _node__$1 = this;\nreturn cljs.core.count(self__.prefix);\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (this__5350__auto__,k31268){\nvar self__ = this;\nvar this__5350__auto____$1 = this;\nvar G__31321 = k31268;\nvar G__31321__$1 = (((G__31321 instanceof cljs.core.Keyword))?G__31321.fqn:null);\nswitch (G__31321__$1) {\ncase \"tag\":\ncase \"prefix\":\ncase \"sym\":\ncase \"children\":\nreturn true;\n\nbreak;\ndefault:\nreturn cljs.core.contains_QMARK_(self__.__extmap,k31268);\n\n}\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__5351__auto__,k__5352__auto__,G__31267){\nvar self__ = this;\nvar this__5351__auto____$1 = this;\nvar pred__31324 = cljs.core.keyword_identical_QMARK_;\nvar expr__31325 = k__5352__auto__;\nif(cljs.core.truth_((pred__31324.cljs$core$IFn$_invoke$arity$2 ? pred__31324.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),expr__31325) : pred__31324.call(null,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),expr__31325)))){\nreturn (new rewrite_clj.node.quote.QuoteNode(G__31267,self__.prefix,self__.sym,self__.children,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__31324.cljs$core$IFn$_invoke$arity$2 ? pred__31324.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),expr__31325) : pred__31324.call(null,new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),expr__31325)))){\nreturn (new rewrite_clj.node.quote.QuoteNode(self__.tag,G__31267,self__.sym,self__.children,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__31324.cljs$core$IFn$_invoke$arity$2 ? pred__31324.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),expr__31325) : pred__31324.call(null,new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),expr__31325)))){\nreturn (new rewrite_clj.node.quote.QuoteNode(self__.tag,self__.prefix,G__31267,self__.children,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__31324.cljs$core$IFn$_invoke$arity$2 ? pred__31324.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"children\",\"children\",-940561982),expr__31325) : pred__31324.call(null,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),expr__31325)))){\nreturn (new rewrite_clj.node.quote.QuoteNode(self__.tag,self__.prefix,self__.sym,G__31267,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new rewrite_clj.node.quote.QuoteNode(self__.tag,self__.prefix,self__.sym,self__.children,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__5352__auto__,G__31267),null));\n}\n}\n}\n}\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__5356__auto__){\nvar self__ = this;\nvar this__5356__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),self__.tag,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),self__.prefix,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),self__.sym,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"children\",\"children\",-940561982),self__.children,null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__5342__auto__,G__31267){\nvar self__ = this;\nvar this__5342__auto____$1 = this;\nreturn (new rewrite_clj.node.quote.QuoteNode(self__.tag,self__.prefix,self__.sym,self__.children,G__31267,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.quote.QuoteNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__5348__auto__,entry__5349__auto__){\nvar self__ = this;\nvar this__5348__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__5349__auto__)){\nreturn this__5348__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__5349__auto__,(0)),cljs.core._nth(entry__5349__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__5348__auto____$1,entry__5349__auto__);\n}\n}));\n\n(rewrite_clj.node.quote.QuoteNode.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"tag\",\"tag\",350170304,null),new cljs.core.Symbol(null,\"prefix\",\"prefix\",1374623062,null),new cljs.core.Symbol(null,\"sym\",\"sym\",195671222,null),new cljs.core.Symbol(null,\"children\",\"children\",699969545,null)], null);\n}));\n\n(rewrite_clj.node.quote.QuoteNode.cljs$lang$type = true);\n\n(rewrite_clj.node.quote.QuoteNode.cljs$lang$ctorPrSeq = (function (this__5389__auto__){\nreturn (new cljs.core.List(null,\"rewrite-clj.node.quote/QuoteNode\",null,(1),null));\n}));\n\n(rewrite_clj.node.quote.QuoteNode.cljs$lang$ctorPrWriter = (function (this__5389__auto__,writer__5390__auto__){\nreturn cljs.core._write(writer__5390__auto__,\"rewrite-clj.node.quote/QuoteNode\");\n}));\n\n/**\n * Positional factory function for rewrite-clj.node.quote/QuoteNode.\n */\nrewrite_clj.node.quote.__GT_QuoteNode = (function rewrite_clj$node$quote$__GT_QuoteNode(tag,prefix,sym,children){\nreturn (new rewrite_clj.node.quote.QuoteNode(tag,prefix,sym,children,null,null,null));\n});\n\n/**\n * Factory function for rewrite-clj.node.quote/QuoteNode, taking a map of keywords to field values.\n */\nrewrite_clj.node.quote.map__GT_QuoteNode = (function rewrite_clj$node$quote$map__GT_QuoteNode(G__31280){\nvar extmap__5385__auto__ = (function (){var G__31375 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__31280,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], 0));\nif(cljs.core.record_QMARK_(G__31280)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__31375);\n} else {\nreturn G__31375;\n}\n})();\nreturn (new rewrite_clj.node.quote.QuoteNode(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(G__31280),new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465).cljs$core$IFn$_invoke$arity$1(G__31280),new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305).cljs$core$IFn$_invoke$arity$1(G__31280),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(G__31280),null,cljs.core.not_empty(extmap__5385__auto__),null));\n});\n\nrewrite_clj.node.protocols.make_printable_BANG_(rewrite_clj.node.quote.QuoteNode);\nrewrite_clj.node.quote.__GT_node = (function rewrite_clj$node$quote$__GT_node(t,prefix,sym,children){\nrewrite_clj.node.protocols.assert_single_sexpr(children);\n\nreturn rewrite_clj.node.quote.__GT_QuoteNode(t,prefix,sym,children);\n});\n/**\n * Create node representing a single quoted form where `children`\n * is either a sequence of nodes or a single node.\n * \n * ```Clojure\n * (require '[rewrite-clj.node :as n]) \n * \n * (-> (n/quote-node (n/token-node 'sym))\n *     (n/string))\n * ;; => \"'sym\"\n * \n * ;; specifying a sequence allows for whitespace between the \n * ;; quote and the quoted\n * (-> (n/quote-node [(n/spaces 10)\n *                    (n/token-node 'sym1) ])\n *     n/string)\n * ;; => \"'          sym1\"\n * ```\n */\nrewrite_clj.node.quote.quote_node = (function rewrite_clj$node$quote$quote_node(children){\nwhile(true){\nif(cljs.core.sequential_QMARK_(children)){\nreturn rewrite_clj.node.quote.__GT_node(new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),\"'\",new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),children);\n} else {\nvar G__31484 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [children], null);\nchildren = G__31484;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Create node representing a single syntax-quoted form where `children`\n * is either a sequence of nodes or a single node.\n * \n * ```Clojure\n * (require '[rewrite-clj.node :as n]) \n * \n * (-> (n/syntax-quote-node (n/token-node 'map))\n *     n/string)\n * ;; => \"`map\"\n * \n * ;; specifying a sequence allows for whitespace between the \n * ;; syntax quote and the syntax quoted\n * (-> (n/syntax-quote-node [(n/spaces 3)\n *                           (n/token-node 'map)])\n *     n/string)\n * ;; => \"`   map\"\n * ```\n */\nrewrite_clj.node.quote.syntax_quote_node = (function rewrite_clj$node$quote$syntax_quote_node(children){\nwhile(true){\nif(cljs.core.sequential_QMARK_(children)){\nreturn rewrite_clj.node.quote.__GT_node(new cljs.core.Keyword(null,\"syntax-quote\",\"syntax-quote\",-1233164847),\"`\",new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),children);\n} else {\nvar G__31485 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [children], null);\nchildren = G__31485;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Create node representing a single unquoted form where `children`\n * is either a sequence of nodes or a single node.\n * \n * ```Clojure\n * (require '[rewrite-clj.node :as n]) \n * \n * (-> (n/unquote-node (n/token-node 'my-var))\n *     n/string)\n * ;; => \"~my-var\"\n * \n * ;; specifying a sequence allows for whitespace between the \n * ;; unquote and the uquoted\n * (-> (n/unquote-node [(n/spaces 4)\n *                      (n/token-node 'my-var)])\n *     n/string)\n * ;; => \"~    my-var\"\n * ```\n */\nrewrite_clj.node.quote.unquote_node = (function rewrite_clj$node$quote$unquote_node(children){\nwhile(true){\nif(cljs.core.sequential_QMARK_(children)){\nreturn rewrite_clj.node.quote.__GT_node(new cljs.core.Keyword(null,\"unquote\",\"unquote\",1649741032),\"~\",new cljs.core.Symbol(null,\"unquote\",\"unquote\",-1004694737,null),children);\n} else {\nvar G__31488 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [children], null);\nchildren = G__31488;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Create node representing a single unquote-spliced form where `children`\n * is either a sequence of nodes or a single node.\n * \n * ```Clojure\n * (require '[rewrite-clj.node :as n]) \n * \n * (-> (n/unquote-splicing-node (n/token-node 'my-var))\n *     n/string)\n * ;; => \"~@my-var\"\n * \n * ;; specifying a sequence allows for whitespace between the \n * ;; splicing unquote and the splicing unquoted\n * (-> (n/unquote-splicing-node [(n/spaces 2)\n *                               (n/token-node 'my-var)])\n *     n/string)\n * ;; => \"~@  my-var\"   \n * ```\n */\nrewrite_clj.node.quote.unquote_splicing_node = (function rewrite_clj$node$quote$unquote_splicing_node(children){\nwhile(true){\nif(cljs.core.sequential_QMARK_(children)){\nreturn rewrite_clj.node.quote.__GT_node(new cljs.core.Keyword(null,\"unquote-splicing\",\"unquote-splicing\",1295267556),\"~@\",new cljs.core.Symbol(null,\"unquote-splicing\",\"unquote-splicing\",-1359168213,null),children);\n} else {\nvar G__31489 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [children], null);\nchildren = G__31489;\ncontinue;\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/node/quote.cljc","~:line",1,"~:column",14,"~:end-line",1,"~:end-column",36,"~:no-doc",true],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.quote","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.node.protocols","^11","~$node","^11","~$cljs.core","^13","~$goog","^14"],"~:seen",["^U",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^13","^13"],"~:form",["~#list",["~$ns","^W",["^1:",["^16",["^11","~:as","^12"]]]]],"~:flags",["^ ","^16",["^U",[]]],"~:js-deps",["^ "],"~:deps",["^14","^13","^11"]],"^Z","^W","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/node/quote.cljc"],"~:compiled-at",1666857663313,"^X",["^ ","^11","^11","^12","^11","^13","^13","^14","^14"],"~:resource-name","rewrite_clj/node/quote.cljc","~:warnings",[],"~:source","(ns ^:no-doc rewrite-clj.node.quote\n  (:require [rewrite-clj.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defrecord QuoteNode [tag prefix sym children]\n  node/Node\n  (tag [_node] tag)\n  (node-type [_node] :quote)\n  (printable-only? [_node] false)\n  (sexpr* [_node opts]\n    (list sym (first (node/sexprs children opts))))\n  (length [_node]\n    (+ (count prefix) (node/sum-lengths children)))\n  (string [_node]\n    (str prefix (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_node] true)\n  (children [_node] children)\n  (replace-children [node children']\n    (node/assert-single-sexpr children')\n    (assoc node :children children'))\n  (leader-length [_node]\n    (count prefix))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! QuoteNode)\n\n;; ## Constructors\n\n(defn- ->node\n  [t prefix sym children]\n  (node/assert-single-sexpr children)\n  (->QuoteNode t prefix sym children))\n\n(defn quote-node\n  \"Create node representing a single quoted form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/quote-node (n/token-node 'sym))\n       (n/string))\n   ;; => \\\"'sym\\\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; quote and the quoted\n   (-> (n/quote-node [(n/spaces 10)\n                      (n/token-node 'sym1) ])\n       n/string)\n   ;; => \\\"'          sym1\\\"\n   ```\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :quote \"'\" 'quote\n      children)\n    (recur [children])))\n\n(defn syntax-quote-node\n  \"Create node representing a single syntax-quoted form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/syntax-quote-node (n/token-node 'map))\n       n/string)\n   ;; => \\\"`map\\\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; syntax quote and the syntax quoted\n   (-> (n/syntax-quote-node [(n/spaces 3)\n                             (n/token-node 'map)])\n       n/string)\n   ;; => \\\"`   map\\\"\n   ```\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :syntax-quote \"`\" 'quote\n      children)\n    (recur [children])))\n\n(defn unquote-node\n  \"Create node representing a single unquoted form where `children`\n   is either a sequence of nodes or a single node.\n   \n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/unquote-node (n/token-node 'my-var))\n       n/string)\n   ;; => \\\"~my-var\\\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; unquote and the uquoted\n   (-> (n/unquote-node [(n/spaces 4)\n                        (n/token-node 'my-var)])\n       n/string)\n   ;; => \\\"~    my-var\\\"\n   ```\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote \"~\" 'unquote\n      children)\n    (recur [children])))\n\n(defn unquote-splicing-node\n  \"Create node representing a single unquote-spliced form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/unquote-splicing-node (n/token-node 'my-var))\n       n/string)\n   ;; => \\\"~@my-var\\\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; splicing unquote and the splicing unquoted\n   (-> (n/unquote-splicing-node [(n/spaces 2)\n                                 (n/token-node 'my-var)])\n       n/string)\n   ;; => \\\"~@  my-var\\\"   \n   ```\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote-splicing \"~@\" 'unquote-splicing\n      children)\n    (recur [children])))\n","~:reader-features",["^U",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["this__5343__auto__","k__5344__auto__","this__5345__auto__","k31268","else__5346__auto__","G__31282","cljs.core/Keyword","tag","prefix","sym","children","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__31290","vec__31291","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__31267","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this31271","other31272","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__31321","this__5351__auto__","k__5352__auto__","pred__31324","cljs.core/keyword-identical?","expr__31325","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.quote/QuoteNode","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__31280","extmap__5385__auto__","G__31375","cljs.core/record?","rewrite-clj.node.quote/->QuoteNode","rewrite-clj.node.quote/map->QuoteNode","_node","opts","cljs.core/first","rewrite_clj.node.protocols.sexprs","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","node","children'","rewrite-clj.node.protocols/assert-single-sexpr","rewrite-clj.node.protocols/make-printable!","rewrite-clj.node.quote/->node","t","rewrite-clj.node.quote/quote-node","cljs.core/sequential?","rewrite-clj.node.quote/syntax-quote-node","rewrite-clj.node.quote/unquote-node","rewrite-clj.node.quote/unquote-splicing-node"]],"~:used-vars",["^U",["~$cljs.core/PROTOCOL_SENTINEL","~$rewrite-clj.node.quote/->node","~$cljs.core/sequential?","~$rewrite-clj.node.protocols/make-printable!","~$cljs.core/pr-sequential-writer","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/-assoc","~$cljs.core/-write","~$cljs.core/-iterator","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/Keyword","~$rewrite-clj.node.protocols/concat-strings","~$cljs.core/MapEntry","~$cljs.core/dissoc","~$cljs.core/keyword-identical?","~$cljs.core/-with-meta","~$cljs.core/concat","~$rewrite-clj.node.protocols/sexprs","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/-conj","~$cljs.core/PersistentVector","~$cljs.core/List","~$rewrite-clj.node.quote/->QuoteNode","~$cljs.core/get","~$rewrite-clj.node.quote/syntax-quote-node","~$cljs.core/-nth","~$cljs.core/not-empty","~$cljs.core/record?","~$cljs.core/-lookup","~$cljs.core/nth","~$cljs.core/nil-iter","~$rewrite-clj.node.protocols/assert-single-sexpr","~$cljs.core/RecordIter","~$rewrite-clj.node.protocols/string","~$cljs.core/not","~$cljs.core/assoc","~$rewrite-clj.node.quote/unquote-splicing-node","~$rewrite-clj.node.protocols/sum-lengths","~$cljs.core/hash-unordered-coll","~$cljs.core/first","~$rewrite-clj.node.quote/QuoteNode","~$rewrite-clj.node.quote/map->QuoteNode","~$rewrite-clj.node.quote/unquote-node","~$rewrite-clj.node.quote/quote-node"]]],"~:cache-keys",["~#cmap",[["^1A","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^U",[]],"~:deps-syms",["^14","~$goog.dom.HtmlElement"]]],["^1A","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","~$goog.string"]]],["^1A","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1A","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^30"]]],["^1A","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^31"]]],["^1A","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^31"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^1A","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^31","~$goog.reflect"]]],["^1A","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^31","~$goog.fs.blob","^32","~$goog.html.SafeScript","~$goog.html.trustedtypes","^34","^35","^36","^37"]]],["^1A","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^36","~$goog.html.SafeUrl","^37","^31","^30"]]],["^1A","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^31","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3;","~$goog.html.SafeStyle","^3=","^33","~$goog.html.uncheckedconversions","^36","^30"]]],["^1A","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^36","^34","^35","^3;","^3A","~$goog.html.SafeStyleSheet","^3=","~$goog.dom.TagName","^33","^37","^31","~$goog.labs.userAgent.browser","^2Y","^2Z","^30","~$goog.dom.tags","^3<"]]],["^1A","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^2Z"]]],["^1A","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","rewrite_clj/node/protocols.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^13","~$clojure.string","~$rewrite-clj.interop"]]],["^1A","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1A","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^2Y","^31","~$goog.collections.maps","^2X","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1A","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","rewrite_clj/node/quote.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^13","^11"]]],["^1A","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",[]]],["^1A","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^2Y","^2Z"]]],["^1A","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^13","^2X","~$goog.string.StringBuffer"]]],["^1A","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","~$goog.dom.safe","^3B","^36","^30"]]],["^1A","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","~$goog.labs.userAgent","^30"]]],["^1A","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^31","^3@","^3;","^3A","^3C","^3=","^33","^36","^30","^34"]]],["^1A","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14"]]],["^1A","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","~$goog.math.Long","~$goog.math.Integer","^2X","^2Z","^2Y","~$goog.Uri","^3P"]]],["^1A","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^36","^37","^3<","^31"]]],["^1A","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^36","^3A","^37","^2Z","^31","^30"]]],["^1A","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^39"]]],["^1A","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^31","^2X"]]],["^1A","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^31","^37"]]],["^1A","rewrite_clj/interop.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^14","^13","^2X","~$goog.string.format"]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/node/quote.cljc","^7",1,"^8",14,"^9",1,"^:",36,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q","^R"],"^S",null,"^T",["^U",[]],"^V","^W","^X",["^ "],"^[",null,"^10",["^ ","^11","^11","^12","^11","^13","^13","^14","^14"],"^15",["^U",["^16"]],"^17",null,"~:defs",["^ ","~$QuoteNode",["^ ","~:num-fields",4,"~:protocols",["^U",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/Object","~$cljs.core/ICounted","~$rewrite-clj.node.protocols/InnerNode","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^V","^2M","^6","rewrite_clj/node/quote.cljc","^:",21,"~:type",true,"^8",12,"~:internal-ctor",true,"^7",8,"~:record",true,"^9",8,"~:tag","~$function","~:skip-protocol-flag",["^U",["^4O","^4P","^4Q","^4R","^4S","^4U","^4W","^4X","^4Y","^4Z","^4[","^51","^52","^53","^54"]]],"~$->QuoteNode",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/node/quote.cljc","^:",21,"^8",12,"^56",true,"~:factory","~:positional","^7",8,"^9",8,"~:arglists",["^1:",["~$quote",["^1:",[["~$tag","~$prefix","~$sym","~$children"]]]]],"~:doc","Positional factory function for rewrite-clj.node.quote/QuoteNode."],"^V","^2;","^6","rewrite_clj/node/quote.cljc","^:",21,"~:method-params",["^1:",[["^5A","^5B","^5C","^5D"]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^8",1,"^56",true,"~:variadic?",false,"^5=","^5>","^7",8,"~:ret-tag","^2M","^9",8,"~:max-fixed-arity",4,"~:fn-var",true,"^5?",["^1:",["^5@",["^1:",[["^5A","^5B","^5C","^5D"]]]]],"^5E","Positional factory function for rewrite-clj.node.quote/QuoteNode."],"~$map->QuoteNode",["^ ","^5<",null,"^5",["^ ","^6","rewrite_clj/node/quote.cljc","^:",21,"^8",12,"^56",true,"^5=","~:map","^7",8,"^9",8,"^5?",["^1:",["^5@",["^1:",[["~$G__31280"]]]]],"^5E","Factory function for rewrite-clj.node.quote/QuoteNode, taking a map of keywords to field values."],"^V","^2N","^6","rewrite_clj/node/quote.cljc","^:",21,"^5F",["^1:",[["^5O"]]],"^5G",null,"^5H",["^1:",[null,null]],"^8",1,"^56",true,"^5I",false,"^5=","^5N","^7",8,"^5J","^2M","^9",8,"^5K",1,"^5L",true,"^5?",["^1:",["^5@",["^1:",[["^5O"]]]]],"^5E","Factory function for rewrite-clj.node.quote/QuoteNode, taking a map of keywords to field values."],"~$->node",["^ ","^5<",null,"^5",["^ ","^6","rewrite_clj/node/quote.cljc","^7",37,"^8",8,"^9",37,"^:",14,"~:private",true,"^5?",["^1:",["^5@",["^1:",[["~$t","^5B","^5C","^5D"]]]]]],"^5Q",true,"^V","^1N","^6","rewrite_clj/node/quote.cljc","^:",14,"^5F",["^1:",[["~$t","^5B","^5C","^5D"]]],"^5G",null,"^5H",["^1:",[null,null]],"^8",1,"^5I",false,"^7",37,"^5J","^2M","^9",37,"^5K",4,"^5L",true,"^5?",["^1:",["^5@",["^1:",[["~$t","^5B","^5C","^5D"]]]]]],"~$quote-node",["^ ","^5<",null,"^5",["^ ","^6","rewrite_clj/node/quote.cljc","^7",42,"^8",7,"^9",42,"^:",17,"^5?",["^1:",["^5@",["^1:",[["^5D"]]]]],"^5E","Create node representing a single quoted form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/quote-node (n/token-node 'sym))\n       (n/string))\n   ;; => \"'sym\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; quote and the quoted\n   (-> (n/quote-node [(n/spaces 10)\n                      (n/token-node 'sym1) ])\n       n/string)\n   ;; => \"'          sym1\"\n   ```"],"^V","^2P","^6","rewrite_clj/node/quote.cljc","^:",17,"^5F",["^1:",[["^5D"]]],"^5G",null,"^5H",["^1:",[null,null]],"^8",1,"^5I",false,"^7",42,"^5J","^2M","^9",42,"^5K",1,"^5L",true,"^5?",["^1:",["^5@",["^1:",[["^5D"]]]]],"^5E","Create node representing a single quoted form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/quote-node (n/token-node 'sym))\n       (n/string))\n   ;; => \"'sym\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; quote and the quoted\n   (-> (n/quote-node [(n/spaces 10)\n                      (n/token-node 'sym1) ])\n       n/string)\n   ;; => \"'          sym1\"\n   ```"],"~$syntax-quote-node",["^ ","^5<",null,"^5",["^ ","^6","rewrite_clj/node/quote.cljc","^7",67,"^8",7,"^9",67,"^:",24,"^5?",["^1:",["^5@",["^1:",[["^5D"]]]]],"^5E","Create node representing a single syntax-quoted form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/syntax-quote-node (n/token-node 'map))\n       n/string)\n   ;; => \"`map\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; syntax quote and the syntax quoted\n   (-> (n/syntax-quote-node [(n/spaces 3)\n                             (n/token-node 'map)])\n       n/string)\n   ;; => \"`   map\"\n   ```"],"^V","^2=","^6","rewrite_clj/node/quote.cljc","^:",24,"^5F",["^1:",[["^5D"]]],"^5G",null,"^5H",["^1:",[null,null]],"^8",1,"^5I",false,"^7",67,"^5J","^2M","^9",67,"^5K",1,"^5L",true,"^5?",["^1:",["^5@",["^1:",[["^5D"]]]]],"^5E","Create node representing a single syntax-quoted form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/syntax-quote-node (n/token-node 'map))\n       n/string)\n   ;; => \"`map\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; syntax quote and the syntax quoted\n   (-> (n/syntax-quote-node [(n/spaces 3)\n                             (n/token-node 'map)])\n       n/string)\n   ;; => \"`   map\"\n   ```"],"~$unquote-node",["^ ","^5<",null,"^5",["^ ","^6","rewrite_clj/node/quote.cljc","^7",92,"^8",7,"^9",92,"^:",19,"^5?",["^1:",["^5@",["^1:",[["^5D"]]]]],"^5E","Create node representing a single unquoted form where `children`\n   is either a sequence of nodes or a single node.\n   \n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/unquote-node (n/token-node 'my-var))\n       n/string)\n   ;; => \"~my-var\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; unquote and the uquoted\n   (-> (n/unquote-node [(n/spaces 4)\n                        (n/token-node 'my-var)])\n       n/string)\n   ;; => \"~    my-var\"\n   ```"],"^V","^2O","^6","rewrite_clj/node/quote.cljc","^:",19,"^5F",["^1:",[["^5D"]]],"^5G",null,"^5H",["^1:",[null,null]],"^8",1,"^5I",false,"^7",92,"^5J","^2M","^9",92,"^5K",1,"^5L",true,"^5?",["^1:",["^5@",["^1:",[["^5D"]]]]],"^5E","Create node representing a single unquoted form where `children`\n   is either a sequence of nodes or a single node.\n   \n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/unquote-node (n/token-node 'my-var))\n       n/string)\n   ;; => \"~my-var\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; unquote and the uquoted\n   (-> (n/unquote-node [(n/spaces 4)\n                        (n/token-node 'my-var)])\n       n/string)\n   ;; => \"~    my-var\"\n   ```"],"~$unquote-splicing-node",["^ ","^5<",null,"^5",["^ ","^6","rewrite_clj/node/quote.cljc","^7",117,"^8",7,"^9",117,"^:",28,"^5?",["^1:",["^5@",["^1:",[["^5D"]]]]],"^5E","Create node representing a single unquote-spliced form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/unquote-splicing-node (n/token-node 'my-var))\n       n/string)\n   ;; => \"~@my-var\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; splicing unquote and the splicing unquoted\n   (-> (n/unquote-splicing-node [(n/spaces 2)\n                                 (n/token-node 'my-var)])\n       n/string)\n   ;; => \"~@  my-var\"   \n   ```"],"^V","^2I","^6","rewrite_clj/node/quote.cljc","^:",28,"^5F",["^1:",[["^5D"]]],"^5G",null,"^5H",["^1:",[null,null]],"^8",1,"^5I",false,"^7",117,"^5J","^2M","^9",117,"^5K",1,"^5L",true,"^5?",["^1:",["^5@",["^1:",[["^5D"]]]]],"^5E","Create node representing a single unquote-spliced form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/unquote-splicing-node (n/token-node 'my-var))\n       n/string)\n   ;; => \"~@my-var\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; splicing unquote and the splicing unquoted\n   (-> (n/unquote-splicing-node [(n/spaces 2)\n                                 (n/token-node 'my-var)])\n       n/string)\n   ;; => \"~@  my-var\"   \n   ```"]],"^18",["^ ","^13","^13"],"~:cljs.analyzer/constants",["^ ","^15",["^U",["^5A","~:children","~:unquote-splicing","~:unquote","^5D","~$unquote-splicing","~:sym","~:prefix","~$unquote","~:syntax-quote","~:quote","^5C","^5B","^58","^5@"]],"~:order",["^58","^60","^5[","^5W","^63","^5A","^5B","^5C","^5D","^5@","^62","^5Y","^61","^5X","^5Z"]],"^1=",["^ ","^16",["^U",[]]],"^1>",["^ "],"^1?",["^14","^13","^11"]],"^Z","^W","~:ns-specs",["^ "],"~:ns-spec-vars",["^U",[]],"~:compiler-options",["^2R",[["^67","~:static-fns"],true,["^67","~:shadow-tweaks"],null,["^67","~:source-map-inline"],null,["^67","~:elide-asserts"],false,["^67","~:optimize-constants"],null,["^67","^1D"],null,["^67","~:external-config"],null,["^67","~:tooling-config"],null,["^67","~:emit-constants"],null,["^67","~:load-tests"],null,["^67","~:form-size-threshold"],null,["^67","~:global-goog-object&array"],null,["^67","~:data-readers"],null,["^67","~:infer-externs"],"~:auto",["^67","^1F"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^67","~:fn-invoke-direct"],null,["^67","~:source-map"],"/dev/null"]]]