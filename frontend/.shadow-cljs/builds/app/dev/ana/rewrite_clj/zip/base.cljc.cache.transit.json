["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.zip.base');\n/**\n * Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]).\n * \n *   Optional `opts` can specify:\n *   - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n *   - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n */\nrewrite_clj.zip.base.edn_STAR_ = (function rewrite_clj$zip$base$edn_STAR_(var_args){\nvar G__32422 = arguments.length;\nswitch (G__32422) {\ncase 1:\nreturn rewrite_clj.zip.base.edn_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.base.edn_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(rewrite_clj.zip.base.edn_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (node){\nreturn rewrite_clj.zip.base.edn_STAR_.cljs$core$IFn$_invoke$arity$2(node,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(rewrite_clj.zip.base.edn_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (node,opts){\nreturn rewrite_clj.zip.options.set_opts((cljs.core.truth_(new cljs.core.Keyword(null,\"track-position?\",\"track-position?\",1860535489).cljs$core$IFn$_invoke$arity$1(opts))?rewrite_clj.custom_zipper.core.custom_zipper(node):rewrite_clj.custom_zipper.core.zipper(node)),opts);\n}));\n\n(rewrite_clj.zip.base.edn_STAR_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]),\n *   and move to the first non-whitespace/non-comment child. If node is not forms node, is wrapped in forms node\n *   for a consistent root.\n * \n *   Optional `opts` can specify:\n *   - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n *   - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n */\nrewrite_clj.zip.base.edn = (function rewrite_clj$zip$base$edn(var_args){\nvar G__32429 = arguments.length;\nswitch (G__32429) {\ncase 1:\nreturn rewrite_clj.zip.base.edn.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.base.edn.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(rewrite_clj.zip.base.edn.cljs$core$IFn$_invoke$arity$1 = (function (node){\nreturn rewrite_clj.zip.base.edn.cljs$core$IFn$_invoke$arity$2(node,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(rewrite_clj.zip.base.edn.cljs$core$IFn$_invoke$arity$2 = (function (node,opts){\nvar node__$1 = node;\nvar opts__$1 = opts;\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.tag(node__$1),new cljs.core.Keyword(null,\"forms\",\"forms\",2045992350))){\nvar top = rewrite_clj.zip.base.edn_STAR_.cljs$core$IFn$_invoke$arity$2(node__$1,opts__$1);\nvar or__5045__auto__ = rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1(rewrite_clj.custom_zipper.core.down(top));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn top;\n}\n} else {\nvar G__32478 = rewrite_clj.node.forms.forms_node(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [node__$1], null));\nvar G__32479 = opts__$1;\nnode__$1 = G__32478;\nopts__$1 = G__32479;\ncontinue;\n}\nbreak;\n}\n}));\n\n(rewrite_clj.zip.base.edn.cljs$lang$maxFixedArity = 2);\n\n/**\n * Return tag of current node in `zloc`.\n */\nrewrite_clj.zip.base.tag = (function rewrite_clj$zip$base$tag(zloc){\nvar G__32435 = zloc;\nvar G__32435__$1 = (((G__32435 == null))?null:rewrite_clj.custom_zipper.core.node(G__32435));\nif((G__32435__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.node.protocols.tag(G__32435__$1);\n}\n});\n/**\n * Return true if current node's element type in `zloc` can be [[sexpr]]-ed.\n * \n * See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)\n */\nrewrite_clj.zip.base.sexpr_able_QMARK_ = (function rewrite_clj$zip$base$sexpr_able_QMARK_(zloc){\nvar G__32437 = zloc;\nvar G__32437__$1 = (((G__32437 == null))?null:rewrite_clj.custom_zipper.core.node(G__32437));\nif((G__32437__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.node.protocols.sexpr_able_QMARK_(G__32437__$1);\n}\n});\n/**\n * Return s-expression (the Clojure form) of current node in `zloc`.\n * \n *   See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\n */\nrewrite_clj.zip.base.sexpr = (function rewrite_clj$zip$base$sexpr(zloc){\nvar G__32439 = zloc;\nvar G__32439__$1 = (((G__32439 == null))?null:rewrite_clj.custom_zipper.core.node(G__32439));\nif((G__32439__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.node.protocols.sexpr.cljs$core$IFn$_invoke$arity$2(G__32439__$1,rewrite_clj.zip.options.get_opts(zloc));\n}\n});\n/**\n * Return s-expression (the Clojure forms) of children of current node in `zloc`.\n * \n *   See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\n */\nrewrite_clj.zip.base.child_sexprs = (function rewrite_clj$zip$base$child_sexprs(zloc){\nvar G__32440 = zloc;\nvar G__32440__$1 = (((G__32440 == null))?null:rewrite_clj.custom_zipper.core.node(G__32440));\nif((G__32440__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.node.protocols.child_sexprs.cljs$core$IFn$_invoke$arity$2(G__32440__$1,rewrite_clj.zip.options.get_opts(zloc));\n}\n});\n/**\n * Return length of printable [[string]] of current node in `zloc`.\n */\nrewrite_clj.zip.base.length = (function rewrite_clj$zip$base$length(zloc){\nvar or__5045__auto__ = (function (){var G__32442 = zloc;\nvar G__32442__$1 = (((G__32442 == null))?null:rewrite_clj.custom_zipper.core.node(G__32442));\nif((G__32442__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.node.protocols.length(G__32442__$1);\n}\n})();\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn (0);\n}\n});\n/**\n * DEPRECATED. Return a tag/s-expression pair for inner nodes, or\n * the s-expression itself for leaves.\n */\nrewrite_clj.zip.base.value = (function rewrite_clj$zip$base$value(zloc){\nvar G__32445 = zloc;\nvar G__32445__$1 = (((G__32445 == null))?null:rewrite_clj.custom_zipper.core.node(G__32445));\nif((G__32445__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.node.protocols.value(G__32445__$1);\n}\n});\n/**\n * Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n * \n *   Optional `opts` can specify:\n *   - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n *   - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n */\nrewrite_clj.zip.base.of_string = (function rewrite_clj$zip$base$of_string(var_args){\nvar G__32447 = arguments.length;\nswitch (G__32447) {\ncase 1:\nreturn rewrite_clj.zip.base.of_string.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.base.of_string.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(rewrite_clj.zip.base.of_string.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn rewrite_clj.zip.base.of_string.cljs$core$IFn$_invoke$arity$2(s,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(rewrite_clj.zip.base.of_string.cljs$core$IFn$_invoke$arity$2 = (function (s,opts){\nvar G__32449 = s;\nvar G__32449__$1 = (((G__32449 == null))?null:rewrite_clj.parser.parse_string_all(G__32449));\nif((G__32449__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.zip.base.edn.cljs$core$IFn$_invoke$arity$2(G__32449__$1,opts);\n}\n}));\n\n(rewrite_clj.zip.base.of_string.cljs$lang$maxFixedArity = 2);\n\n/**\n * Return string representing the current node in `zloc`.\n */\nrewrite_clj.zip.base.string = (function rewrite_clj$zip$base$string(zloc){\nvar G__32451 = zloc;\nvar G__32451__$1 = (((G__32451 == null))?null:rewrite_clj.custom_zipper.core.node(G__32451));\nif((G__32451__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.node.protocols.string(G__32451__$1);\n}\n});\n/**\n * DEPRECATED. Renamed to [[string]].\n */\nrewrite_clj.zip.base.__GT_string = (function rewrite_clj$zip$base$__GT_string(zloc){\nreturn rewrite_clj.zip.base.string(zloc);\n});\n/**\n * Return string representing the zipped-up `zloc` zipper.\n */\nrewrite_clj.zip.base.root_string = (function rewrite_clj$zip$base$root_string(zloc){\nvar G__32452 = zloc;\nvar G__32452__$1 = (((G__32452 == null))?null:rewrite_clj.custom_zipper.core.root(G__32452));\nif((G__32452__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.node.protocols.string(G__32452__$1);\n}\n});\n/**\n * DEPRECATED. Renamed to [[root-string]].\n */\nrewrite_clj.zip.base.__GT_root_string = (function rewrite_clj$zip$base$__GT_root_string(zloc){\nreturn rewrite_clj.zip.base.root_string(zloc);\n});\nrewrite_clj.zip.base.print_BANG_ = (function rewrite_clj$zip$base$print_BANG_(s,_writer){\nreturn cljs.core.string_print(s);\n});\n/**\n * Print current node in `zloc`.\n * \n * NOTE: Optional `writer` is currently ignored for ClojureScript.\n */\nrewrite_clj.zip.base.print = (function rewrite_clj$zip$base$print(var_args){\nvar G__32456 = arguments.length;\nswitch (G__32456) {\ncase 2:\nreturn rewrite_clj.zip.base.print.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn rewrite_clj.zip.base.print.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(rewrite_clj.zip.base.print.cljs$core$IFn$_invoke$arity$2 = (function (zloc,writer){\nvar G__32457 = zloc;\nvar G__32457__$1 = (((G__32457 == null))?null:rewrite_clj.zip.base.string(G__32457));\nif((G__32457__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.zip.base.print_BANG_(G__32457__$1,writer);\n}\n}));\n\n(rewrite_clj.zip.base.print.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.base.print.cljs$core$IFn$_invoke$arity$2(zloc,null);\n}));\n\n(rewrite_clj.zip.base.print.cljs$lang$maxFixedArity = 2);\n\n/**\n * Zip up and print `zloc` from root node.\n * \n * NOTE: Optional `writer` is currently ignored for ClojureScript.\n */\nrewrite_clj.zip.base.print_root = (function rewrite_clj$zip$base$print_root(var_args){\nvar G__32462 = arguments.length;\nswitch (G__32462) {\ncase 2:\nreturn rewrite_clj.zip.base.print_root.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn rewrite_clj.zip.base.print_root.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(rewrite_clj.zip.base.print_root.cljs$core$IFn$_invoke$arity$2 = (function (zloc,writer){\nvar G__32464 = zloc;\nvar G__32464__$1 = (((G__32464 == null))?null:rewrite_clj.zip.base.root_string(G__32464));\nif((G__32464__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.zip.base.print_BANG_(G__32464__$1,writer);\n}\n}));\n\n(rewrite_clj.zip.base.print_root.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.base.print_root.cljs$core$IFn$_invoke$arity$2(zloc,null);\n}));\n\n(rewrite_clj.zip.base.print_root.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/zip/base.cljc","~:line",1,"~:column",14,"~:end-line",1,"~:end-column",34,"~:no-doc",true],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",["~$print"]],"~:name","~$rewrite-clj.zip.base","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$options","~$rewrite-clj.zip.options","~$rewrite-clj.parser","^14","~$p","^14","~$rewrite-clj.custom-zipper.core","^15","~$cljs.core","^16","~$ws","~$rewrite-clj.zip.whitespace","~$goog","^19","^13","^13","^18","^18","~$node","~$rewrite-clj.node.protocols","^1;","^1;","~$zraw","^15","~$nforms","~$rewrite-clj.node.forms","^1>","^1>"],"~:seen",["^U",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^16","^16"],"~:form",["~#list",["~$ns","^X",["^1D",["~:refer-clojure","~:exclude",["^V"]]],["^1D",["^1@",["^15","~:as","^1<"],["^1>","^1H","^1="],["^1;","^1H","^1:"],["^14","^1H","~$p"],["^13","^1H","^12"],["^18","^1H","^17"]]]]],"~:flags",["^ ","^1@",["^U",[]]],"~:js-deps",["^ "],"~:deps",["^19","^16","^15","^1>","^1;","^14","^13","^18"]],"^[","^X","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/zip/base.cljc"],"~:compiled-at",1666857663976,"^Y",["^ ","^12","^13","^14","^14","~$p","^14","^15","^15","^16","^16","^17","^18","^19","^19","^13","^13","^18","^18","^1:","^1;","^1;","^1;","^1<","^15","^1=","^1>","^1>","^1>"],"~:resource-name","rewrite_clj/zip/base.cljc","~:warnings",[],"~:source","(ns ^:no-doc rewrite-clj.zip.base\n  (:refer-clojure :exclude [print])\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.node.forms :as nforms]\n            [rewrite-clj.node.protocols :as node]\n            [rewrite-clj.parser :as p]\n            [rewrite-clj.zip.options :as options]\n            [rewrite-clj.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Zipper\n\n(defn edn*\n  \"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]).\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([node]\n   (edn* node {}))\n  ([node opts]\n   (-> (if (:track-position? opts)\n         (zraw/custom-zipper node)\n         (zraw/zipper node))\n       (options/set-opts opts))))\n\n(defn edn\n  \"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]),\n  and move to the first non-whitespace/non-comment child. If node is not forms node, is wrapped in forms node\n  for a consistent root.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([node] (edn node {}))\n  ([node opts]\n   (loop [node node opts opts]\n     (if (= (node/tag node) :forms)\n       (let [top (edn* node opts)]\n         (or (-> top zraw/down ws/skip-whitespace)\n             top))\n       (recur (nforms/forms-node [node]) opts)))))\n\n;; ## Inspection\n\n(defn tag\n  \"Return tag of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc zraw/node node/tag))\n\n(defn sexpr-able?\n  \"Return true if current node's element type in `zloc` can be [[sexpr]]-ed.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)\"\n  [zloc]\n  (some-> zloc zraw/node node/sexpr-able?))\n\n(defn sexpr\n  \"Return s-expression (the Clojure form) of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([zloc]\n   (some-> zloc zraw/node (node/sexpr (options/get-opts zloc)))))\n\n(defn child-sexprs\n  \"Return s-expression (the Clojure forms) of children of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([zloc]\n   (some-> zloc zraw/node (node/child-sexprs (options/get-opts zloc)))))\n\n(defn length\n  \"Return length of printable [[string]] of current node in `zloc`.\"\n  [zloc]\n  (or (some-> zloc zraw/node node/length) 0))\n\n(defn value\n  \"DEPRECATED. Return a tag/s-expression pair for inner nodes, or\n   the s-expression itself for leaves.\"\n  [zloc]\n  (some-> zloc zraw/node node/value))\n\n;; ## Read\n(defn of-string\n  \"Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([s] (of-string s {}))\n  ([s opts]\n   (some-> s p/parse-string-all (edn opts))))\n\n#?(:clj\n   (defn of-file\n     \"Create and return zipper from all forms in Clojure/ClojureScript/EDN File `f`.\n\n     Optional `opts` can specify:\n     - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n     - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n     ([f] (of-file f {}))\n     ([f opts]\n      (some-> f p/parse-file-all (edn opts)))))\n\n;; ## Write\n\n(defn string\n  \"Return string representing the current node in `zloc`.\"\n  [zloc]\n  (some-> zloc zraw/node node/string))\n\n(defn ->string\n  \"DEPRECATED. Renamed to [[string]].\"\n  [zloc]\n  (string zloc))\n\n(defn root-string\n  \"Return string representing the zipped-up `zloc` zipper.\"\n  [zloc]\n  (some-> zloc zraw/root node/string))\n\n(defn ->root-string\n  \"DEPRECATED. Renamed to [[root-string]].\"\n  [zloc]\n  (root-string zloc))\n\n#?(:clj\n   (defn- print! [^String s writer]\n     (if writer\n       (.write ^java.io.Writer writer s)\n       (recur s *out*)))\n   :cljs\n   (defn- print! [s _writer]\n     (string-print s)))\n\n(defn print\n  \"Print current node in `zloc`.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.\"\n  ([zloc writer]\n   (some-> zloc\n           string\n           (print! writer)))\n  ([zloc] (print zloc nil)))\n\n(defn print-root\n  \"Zip up and print `zloc` from root node.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.\"\n  ([zloc writer]\n   (some-> zloc\n           root-string\n           (print! writer)))\n  ([zloc] (print-root zloc nil)))\n","~:reader-features",["^U",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__32422","rewrite-clj.zip.base/edn*","js/Error","node","rewrite_clj.zip.base.edn_STAR_","opts","rewrite-clj.custom-zipper.core/custom-zipper","rewrite-clj.custom-zipper.core/zipper","rewrite-clj.zip.options/set-opts","G__32429","rewrite-clj.zip.base/edn","rewrite_clj.zip.base.edn","cljs.core._EQ_","rewrite-clj.node.protocols/tag","top","or__5045__auto__","rewrite-clj.custom-zipper.core/down","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.node.forms/forms-node","rewrite-clj.zip.base/tag","zloc","G__32435","rewrite-clj.custom-zipper.core/node","rewrite-clj.zip.base/sexpr-able?","G__32437","rewrite-clj.node.protocols/sexpr-able?","rewrite-clj.zip.base/sexpr","G__32439","rewrite_clj.node.protocols.sexpr","rewrite-clj.zip.options/get-opts","rewrite-clj.zip.base/child-sexprs","G__32440","rewrite_clj.node.protocols.child_sexprs","rewrite-clj.zip.base/length","G__32442","rewrite-clj.node.protocols/length","rewrite-clj.zip.base/value","G__32445","rewrite-clj.node.protocols/value","G__32447","rewrite-clj.zip.base/of-string","s","rewrite_clj.zip.base.of_string","G__32449","rewrite-clj.parser/parse-string-all","rewrite-clj.zip.base/string","G__32451","rewrite-clj.node.protocols/string","rewrite-clj.zip.base/->string","rewrite-clj.zip.base/root-string","G__32452","rewrite-clj.custom-zipper.core/root","rewrite-clj.zip.base/->root-string","rewrite-clj.zip.base/print!","_writer","cljs.core/string-print","G__32456","rewrite-clj.zip.base/print","writer","G__32457","rewrite_clj.zip.base.print","G__32462","rewrite-clj.zip.base/print-root","G__32464","rewrite_clj.zip.base.print_root"]],"~:used-vars",["^U",["~$rewrite-clj.zip.base/->string","~$rewrite-clj.zip.base/of-string","~$rewrite-clj.zip.base/print-root","~$rewrite-clj.node.protocols/sexpr-able?","~$cljs.core/=","~$rewrite-clj.zip.options/set-opts","~$rewrite-clj.custom-zipper.core/root","~$rewrite-clj.node.protocols/child-sexprs","~$rewrite-clj.node.protocols/tag","~$rewrite-clj.zip.base/->root-string","~$rewrite-clj.zip.base/string","~$rewrite-clj.zip.base/length","~$cljs.core/string-print","~$rewrite-clj.zip.options/get-opts","~$rewrite-clj.zip.base/value","~$rewrite-clj.zip.base/sexpr","~$rewrite-clj.parser/parse-string-all","~$rewrite-clj.custom-zipper.core/custom-zipper","~$rewrite-clj.custom-zipper.core/zipper","~$rewrite-clj.zip.base/edn*","~$rewrite-clj.zip.base/edn","~$rewrite-clj.zip.base/print!","~$rewrite-clj.zip.base/sexpr-able?","~$rewrite-clj.node.protocols/sexpr","~$rewrite-clj.node.protocols/value","~$rewrite-clj.zip.base/child-sexprs","~$rewrite-clj.zip.base/tag","~$rewrite-clj.custom-zipper.core/node","~$rewrite-clj.custom-zipper.core/down","~$rewrite-clj.node.protocols/string","~$rewrite-clj.node.forms/forms-node","~$rewrite-clj.zip.base/print","~$rewrite-clj.node.protocols/length","~$rewrite-clj.zip.base/root-string","~$js/Error","~$rewrite-clj.zip.whitespace/skip-whitespace"]]],"~:cache-keys",["~#cmap",[["^1M","rewrite_clj/zip/options.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^U",[]],"~:deps-syms",["^19","^16","^1;"]]],["^1M","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","~$goog.dom.HtmlElement"]]],["^1M","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","~$clojure.string","~$goog.string"]]],["^1M","rewrite_clj/node/reader_macro.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1;","~$rewrite-clj.node.whitespace"]]],["^1M","rewrite_clj/parser.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1>","~$rewrite-clj.parser.core","~$rewrite-clj.reader"]]],["^1M","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^2Y"]]],["^1M","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1M","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^34"]]],["^1M","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^35"]]],["^1M","rewrite_clj/parser/whitespace.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^2Z","^30"]]],["^1M","rewrite_clj/node/regex.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1;"]]],["^1M","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^F","^J","^@","^D","~$cljs.tools.reader","^2Y","~$goog.string.StringBuffer"]]],["^1M","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16"]]],["^1M","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^J","^@","^D","^F","^31","^2Y","^3="]]],["^1M","rewrite_clj/zip/base.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^15","^1>","^1;","^14","^13","^18"]]],["^1M","rewrite_clj/parser/token.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","~$rewrite-clj.node.token","^30"]]],["^1M","rewrite_clj/node/uneval.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1;"]]],["^1M","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","rewrite_clj/parser/keyword.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","~$rewrite-clj.node.keyword","^30"]]],["^1M","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^35"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^1M","rewrite_clj/node/keyword.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1;"]]],["^1M","rewrite_clj/node/token.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1;"]]],["^1M","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^35","~$goog.reflect"]]],["^1M","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^35","~$goog.fs.blob","^36","~$goog.html.SafeScript","~$goog.html.trustedtypes","^38","^39","^3:","^3;"]]],["^1M","rewrite_clj/node/comment.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1;"]]],["^1M","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","rewrite_clj/parser/string.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^2X","~$rewrite-clj.node.stringz","^30","^3="]]],["^1M","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^3:","~$goog.html.SafeUrl","^3;","^35","^34"]]],["^1M","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^35","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3C","~$goog.html.SafeStyle","^3F","^37","~$goog.html.uncheckedconversions","^3:","^34"]]],["^1M","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16"]]],["^1M","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^3:","^38","^39","^3C","^3J","~$goog.html.SafeStyleSheet","^3F","~$goog.dom.TagName","^37","^3;","^35","~$goog.labs.userAgent.browser","^31","^32","^34","~$goog.dom.tags","^3D"]]],["^1M","rewrite_clj/node/forms.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1;"]]],["^1M","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^32"]]],["^1M","rewrite_clj/parser/core.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","~$rewrite-clj.node.comment","~$rewrite-clj.node.fn","~$rewrite-clj.node.meta","^1;","~$rewrite-clj.node.quote","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.regex","~$rewrite-clj.node.seq","^3>","~$rewrite-clj.node.uneval","~$rewrite-clj.parser.keyword","~$rewrite-clj.parser.namespaced-map","~$rewrite-clj.parser.string","~$rewrite-clj.parser.token","~$rewrite-clj.parser.whitespace","^30"]]],["^1M","rewrite_clj/node/fn.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^2X","~$clojure.walk","~$rewrite-clj.interop","^1;"]]],["^1M","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","rewrite_clj/node/protocols.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^2X","^42"]]],["^1M","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1M","rewrite_clj/zip/whitespace.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^15","^3P","~$rewrite-clj.node.extras","^2Z"]]],["^1M","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^31","^35","~$goog.collections.maps","^2Y","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1M","rewrite_clj/node/meta.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^42","^1;","^2Z"]]],["^1M","rewrite_clj/node/stringz.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^2X","^L","^1;"]]],["^1M","rewrite_clj/parser/namespaced_map.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","~$rewrite-clj.node.namespaced-map","^1;","^2Z","^30"]]],["^1M","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","rewrite_clj/node/whitespace.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1;","^30"]]],["^1M","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","rewrite_clj/node/quote.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1;"]]],["^1M","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",[]]],["^1M","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^31","^32"]]],["^1M","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^J","^2X","~$cljs.tools.reader.impl.inspect"]]],["^1M","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^2Y","^3="]]],["^1M","rewrite_clj/node/namespaced_map.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^1;"]]],["^1M","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","~$goog.dom.safe","^3K","^3:","^34"]]],["^1M","rewrite_clj/custom_zipper/core.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","~$clojure.zip","~$rewrite-clj.custom-zipper.switchable","^1;"]]],["^1M","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","~$goog.labs.userAgent","^34"]]],["^1M","clojure/zip.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16"]]],["^1M","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^@","^2Y","^3="]]],["^1M","rewrite_clj/reader.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^L","^D","^F","^@","^J","^42","^3="]]],["^1M","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^35","^3I","^3C","^3J","^3L","^3F","^37","^3:","^34","^38"]]],["^1M","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^F","^J","^@"]]],["^1M","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19"]]],["^1M","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","~$goog.math.Long","~$goog.math.Integer","^2Y","^32","^31","~$goog.Uri","^3="]]],["^1M","rewrite_clj/custom_zipper/switchable.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16"]]],["^1M","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^3:","^3;","^3D","^35"]]],["^1M","rewrite_clj/node/extras.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^3P","^2Z"]]],["^1M","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^3:","^3J","^3;","^32","^35","^34"]]],["^1M","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^3A"]]],["^1M","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^35","^2Y"]]],["^1M","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^35","^3;"]]],["^1M","rewrite_clj/interop.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^2Y","~$goog.string.format"]]],["^1M","rewrite_clj/node/seq.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2S",["^ ","^2T",null,"^2U",["^U",[]],"^2V",["^19","^16","^42","^1;"]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/reader.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/node/protocols.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/interop.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/utils.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/commons.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/node/whitespace.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/custom_zipper/switchable.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1666857280000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",1,"^8",14,"^9",1,"^:",34,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q","^R"],"^S",null,"^T",["^U",["^V"]],"^W","^X","^Y",["^ "],"^10",null,"^11",["^ ","^12","^13","^14","^14","~$p","^14","^15","^15","^16","^16","^17","^18","^19","^19","^13","^13","^18","^18","^1:","^1;","^1;","^1;","^1<","^15","^1=","^1>","^1>","^1>"],"^1?",["^U",["^1@"]],"~:shadow/js-access-global",["^U",["Error"]],"^1A",null,"~:defs",["^ ","~$child-sexprs",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",66,"^8",7,"^9",66,"^:",19,"~:arglists",["^1D",["~$quote",["^1D",[["~$zloc"]]]]],"~:doc","Return s-expression (the Clojure forms) of children of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"^W","^2F","^6","rewrite_clj/zip/base.cljc","^:",19,"~:method-params",["^1D",[["^5K"]]],"~:protocol-impl",null,"~:arglists-meta",["^1D",[null,null]],"^8",1,"~:variadic?",false,"^7",66,"~:ret-tag",["^U",["~$cljs.core/LazySeq","~$clj-nil"]],"^9",66,"~:max-fixed-arity",1,"~:fn-var",true,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return s-expression (the Clojure forms) of children of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"~$tag",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",47,"^8",7,"^9",47,"^:",10,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return tag of current node in `zloc`."],"^W","^2G","^6","rewrite_clj/zip/base.cljc","^:",10,"^5M",["^1D",[["^5K"]]],"^5N",null,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^7",47,"^5Q",["^U",["~$any","^5S"]],"^9",47,"^5T",1,"^5U",true,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return tag of current node in `zloc`."],"~$print!",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",134,"^8",11,"^9",134,"^:",17,"~:private",true,"^5I",["^1D",["^5J",["^1D",[["~$s","~$_writer"]]]]]],"^5Y",true,"^W","^2B","^6","rewrite_clj/zip/base.cljc","^:",17,"^5M",["^1D",[["~$s","^5Z"]]],"^5N",null,"^5O",["^1D",[null,null]],"^8",4,"^5P",false,"^7",134,"^5Q","^5S","^9",134,"^5T",2,"^5U",true,"^5I",["^1D",["^5J",["^1D",[["~$s","^5Z"]]]]]],"~$root-string",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",118,"^8",7,"^9",118,"^:",18,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return string representing the zipped-up `zloc` zipper."],"^W","^2N","^6","rewrite_clj/zip/base.cljc","^:",18,"^5M",["^1D",[["^5K"]]],"^5N",null,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^7",118,"^5Q",["^U",["^5W","^5S"]],"^9",118,"^5T",1,"^5U",true,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return string representing the zipped-up `zloc` zipper."],"~$->root-string",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",123,"^8",7,"^9",123,"^:",20,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","DEPRECATED. Renamed to [[root-string]]."],"^W","^26","^6","rewrite_clj/zip/base.cljc","^:",20,"^5M",["^1D",[["^5K"]]],"^5N",null,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^7",123,"^5Q",["^U",["^5W","^5S"]],"^9",123,"^5T",1,"^5U",true,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","DEPRECATED. Renamed to [[root-string]]."],"~$sexpr-able?",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",52,"^8",7,"^9",52,"^:",18,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return true if current node's element type in `zloc` can be [[sexpr]]-ed.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)"],"^W","^2C","^6","rewrite_clj/zip/base.cljc","^:",18,"^5M",["^1D",[["^5K"]]],"^5N",null,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^7",52,"^5Q",["^U",["~$boolean","^5S"]],"^9",52,"^5T",1,"^5U",true,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return true if current node's element type in `zloc` can be [[sexpr]]-ed.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)"],"~$sexpr",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",59,"^8",7,"^9",59,"^:",12,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return s-expression (the Clojure form) of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"^W","^2<","^6","rewrite_clj/zip/base.cljc","^:",12,"^5M",["^1D",[["^5K"]]],"^5N",null,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^7",59,"^5Q",["^U",["^5W","^5S"]],"^9",59,"^5T",1,"^5U",true,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return s-expression (the Clojure form) of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"~$value",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",78,"^8",7,"^9",78,"^:",12,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","DEPRECATED. Return a tag/s-expression pair for inner nodes, or\n   the s-expression itself for leaves."],"^W","^2;","^6","rewrite_clj/zip/base.cljc","^:",12,"^5M",["^1D",[["^5K"]]],"^5N",null,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^7",78,"^5Q",["^U",["^5W","^5S"]],"^9",78,"^5T",1,"^5U",true,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","DEPRECATED. Return a tag/s-expression pair for inner nodes, or\n   the s-expression itself for leaves."],"~$edn*",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",14,"^8",7,"^9",14,"^:",11,"^5I",["^1D",["^5J",["^1D",[["^1:"],["^1:","~$opts"]]]]],"^5L","Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]).\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)","~:top-fn",["^ ","^5P",false,"~:fixed-arity",2,"^5T",2,"^5M",[["^1:"],["^1:","^66"]],"^5I",["^1D",[["^1:"],["^1:","^66"]]],"^5O",["^1D",[null,null]]]],"^W","^2@","^6","rewrite_clj/zip/base.cljc","^:",11,"^67",["^ ","^5P",false,"^68",2,"^5T",2,"^5M",[["^1:"],["^1:","^66"]],"^5I",["^1D",[["^1:"],["^1:","^66"]]],"^5O",["^1D",[null,null]]],"^5M",[["^1:"],["^1:","^66"]],"^5N",null,"^68",2,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"~:methods",[["^ ","^68",1,"^5P",false,"~:tag","^5W"],["^ ","^68",2,"^5P",false,"^6:",["^U",["~$clj","~$cljs.core/MetaFn","^5S"]]]],"^7",14,"^9",14,"^5T",2,"^5U",true,"^5I",["^1D",[["^1:"],["^1:","^66"]]],"^5L","Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]).\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)"],"~$->string",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",113,"^8",7,"^9",113,"^:",15,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","DEPRECATED. Renamed to [[string]]."],"^W","^1Y","^6","rewrite_clj/zip/base.cljc","^:",15,"^5M",["^1D",[["^5K"]]],"^5N",null,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^7",113,"^5Q",["^U",["^5W","^5S"]],"^9",113,"^5T",1,"^5U",true,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","DEPRECATED. Renamed to [[string]]."],"~$print-root",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",147,"^8",7,"^9",147,"^:",17,"^5I",["^1D",["^5J",["^1D",[["^5K","~$writer"],["^5K"]]]]],"^5L","Zip up and print `zloc` from root node.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.","^67",["^ ","^5P",false,"^68",2,"^5T",2,"^5M",[["^5K","^6?"],["^5K"]],"^5I",["^1D",[["^5K","^6?"],["^5K"]]],"^5O",["^1D",[null,null]]]],"^W","^1[","^6","rewrite_clj/zip/base.cljc","^:",17,"^67",["^ ","^5P",false,"^68",2,"^5T",2,"^5M",[["^5K","^6?"],["^5K"]],"^5I",["^1D",[["^5K","^6?"],["^5K"]]],"^5O",["^1D",[null,null]]],"^5M",[["^5K","^6?"],["^5K"]],"^5N",null,"^68",2,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^69",[["^ ","^68",2,"^5P",false,"^6:","^5S"],["^ ","^68",1,"^5P",false,"^6:","^5S"]],"^7",147,"^9",147,"^5T",2,"^5U",true,"^5I",["^1D",[["^5K","^6?"],["^5K"]]],"^5L","Zip up and print `zloc` from root node.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript."],"^V",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",137,"^8",7,"^9",137,"^:",12,"^5I",["^1D",["^5J",["^1D",[["^5K","^6?"],["^5K"]]]]],"^5L","Print current node in `zloc`.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.","^67",["^ ","^5P",false,"^68",2,"^5T",2,"^5M",[["^5K","^6?"],["^5K"]],"^5I",["^1D",[["^5K","^6?"],["^5K"]]],"^5O",["^1D",[null,null]]]],"^W","^2L","^6","rewrite_clj/zip/base.cljc","^:",12,"^67",["^ ","^5P",false,"^68",2,"^5T",2,"^5M",[["^5K","^6?"],["^5K"]],"^5I",["^1D",[["^5K","^6?"],["^5K"]]],"^5O",["^1D",[null,null]]],"^5M",[["^5K","^6?"],["^5K"]],"^5N",null,"^68",2,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^69",[["^ ","^68",2,"^5P",false,"^6:","^5S"],["^ ","^68",1,"^5P",false,"^6:","^5S"]],"^7",137,"^9",137,"^5T",2,"^5U",true,"^5I",["^1D",[["^5K","^6?"],["^5K"]]],"^5L","Print current node in `zloc`.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript."],"~$string",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",108,"^8",7,"^9",108,"^:",13,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return string representing the current node in `zloc`."],"^W","^27","^6","rewrite_clj/zip/base.cljc","^:",13,"^5M",["^1D",[["^5K"]]],"^5N",null,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^7",108,"^5Q",["^U",["^5W","^5S"]],"^9",108,"^5T",1,"^5U",true,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return string representing the current node in `zloc`."],"~$edn",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",28,"^8",7,"^9",28,"^:",10,"^5I",["^1D",["^5J",["^1D",[["^1:"],["^1:","^66"]]]]],"^5L","Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]),\n  and move to the first non-whitespace/non-comment child. If node is not forms node, is wrapped in forms node\n  for a consistent root.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)","^67",["^ ","^5P",false,"^68",2,"^5T",2,"^5M",[["^1:"],["^1:","^66"]],"^5I",["^1D",[["^1:"],["^1:","^66"]]],"^5O",["^1D",[null,null]]]],"^W","^2A","^6","rewrite_clj/zip/base.cljc","^:",10,"^67",["^ ","^5P",false,"^68",2,"^5T",2,"^5M",[["^1:"],["^1:","^66"]],"^5I",["^1D",[["^1:"],["^1:","^66"]]],"^5O",["^1D",[null,null]]],"^5M",[["^1:"],["^1:","^66"]],"^5N",null,"^68",2,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^69",[["^ ","^68",1,"^5P",false,"^6:","^5W"],["^ ","^68",2,"^5P",false,"^6:",["^U",["^6;","^5W","^6<","^5S"]]]],"^7",28,"^9",28,"^5T",2,"^5U",true,"^5I",["^1D",[["^1:"],["^1:","^66"]]],"^5L","Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]),\n  and move to the first non-whitespace/non-comment child. If node is not forms node, is wrapped in forms node\n  for a consistent root.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)"],"~$length",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",73,"^8",7,"^9",73,"^:",13,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return length of printable [[string]] of current node in `zloc`."],"^W","^28","^6","rewrite_clj/zip/base.cljc","^:",13,"^5M",["^1D",[["^5K"]]],"^5N",null,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^7",73,"^5Q",["^U",["^5W","~$number"]],"^9",73,"^5T",1,"^5U",true,"^5I",["^1D",["^5J",["^1D",[["^5K"]]]]],"^5L","Return length of printable [[string]] of current node in `zloc`."],"~$of-string",["^ ","^5H",null,"^5",["^ ","^6","rewrite_clj/zip/base.cljc","^7",85,"^8",7,"^9",85,"^:",16,"^5I",["^1D",["^5J",["^1D",[["~$s"],["~$s","^66"]]]]],"^5L","Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)","^67",["^ ","^5P",false,"^68",2,"^5T",2,"^5M",[["~$s"],["~$s","^66"]],"^5I",["^1D",[["~$s"],["~$s","^66"]]],"^5O",["^1D",[null,null]]]],"^W","^1Z","^6","rewrite_clj/zip/base.cljc","^:",16,"^67",["^ ","^5P",false,"^68",2,"^5T",2,"^5M",[["~$s"],["~$s","^66"]],"^5I",["^1D",[["~$s"],["~$s","^66"]]],"^5O",["^1D",[null,null]]],"^5M",[["~$s"],["~$s","^66"]],"^5N",null,"^68",2,"^5O",["^1D",[null,null]],"^8",1,"^5P",false,"^69",[["^ ","^68",1,"^5P",false,"^6:","^5W"],["^ ","^68",2,"^5P",false,"^6:",["^U",["^6;","^5W","^6<","^5S"]]]],"^7",85,"^9",85,"^5T",2,"^5U",true,"^5I",["^1D",[["~$s"],["~$s","^66"]]],"^5L","Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)"]],"^1B",["^ ","^16","^16"],"~:cljs.analyzer/constants",["^ ","^1?",["^U",["~:track-position?","~:forms"]],"~:order",["^6F","^6G"]],"^1I",["^ ","^1@",["^U",[]]],"^1J",["^ "],"^1K",["^19","^16","^15","^1>","^1;","^14","^13","^18"]],"^[","^X","~:ns-specs",["^ "],"~:ns-spec-vars",["^U",[]],"~:compiler-options",["^2R",[["^6K","~:static-fns"],true,["^6K","~:shadow-tweaks"],null,["^6K","~:source-map-inline"],null,["^6K","~:elide-asserts"],false,["^6K","~:optimize-constants"],null,["^6K","^1P"],null,["^6K","~:external-config"],null,["^6K","~:tooling-config"],null,["^6K","~:emit-constants"],null,["^6K","~:load-tests"],null,["^6K","~:form-size-threshold"],null,["^6K","~:global-goog-object&array"],null,["^6K","~:data-readers"],null,["^6K","~:infer-externs"],"~:auto",["^6K","^1R"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6K","~:fn-invoke-direct"],null,["^6K","~:source-map"],"/dev/null"]]]