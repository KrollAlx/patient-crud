["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.zip.seqz');\n/**\n * Returns true if current node in `zloc` is a sequence.\n */\nrewrite_clj.zip.seqz.seq_QMARK_ = (function rewrite_clj$zip$seqz$seq_QMARK_(zloc){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"namespaced-map\",\"namespaced-map\",1235665380),null,new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),null,new cljs.core.Keyword(null,\"list\",\"list\",765357683),null,new cljs.core.Keyword(null,\"set\",\"set\",304602554),null,new cljs.core.Keyword(null,\"map\",\"map\",1371690461),null,new cljs.core.Keyword(null,\"forms\",\"forms\",2045992350),null], null), null),rewrite_clj.zip.base.tag(zloc));\n});\n/**\n * Returns true if current node in `zloc` is a list.\n */\nrewrite_clj.zip.seqz.list_QMARK_ = (function rewrite_clj$zip$seqz$list_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rewrite_clj.zip.base.tag(zloc),new cljs.core.Keyword(null,\"list\",\"list\",765357683));\n});\n/**\n * Returns true if current node in `zloc` is a vector.\n */\nrewrite_clj.zip.seqz.vector_QMARK_ = (function rewrite_clj$zip$seqz$vector_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rewrite_clj.zip.base.tag(zloc),new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158));\n});\n/**\n * Returns true if current node in `zloc` is a set.\n */\nrewrite_clj.zip.seqz.set_QMARK_ = (function rewrite_clj$zip$seqz$set_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rewrite_clj.zip.base.tag(zloc),new cljs.core.Keyword(null,\"set\",\"set\",304602554));\n});\n/**\n * Returns true if current node in `zloc` is a map.\n */\nrewrite_clj.zip.seqz.map_QMARK_ = (function rewrite_clj$zip$seqz$map_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rewrite_clj.zip.base.tag(zloc),new cljs.core.Keyword(null,\"map\",\"map\",1371690461));\n});\n/**\n * Returns true if the current node in `zloc` is a namespaced map.\n */\nrewrite_clj.zip.seqz.namespaced_map_QMARK_ = (function rewrite_clj$zip$seqz$namespaced_map_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rewrite_clj.zip.base.tag(zloc),new cljs.core.Keyword(null,\"namespaced-map\",\"namespaced-map\",1235665380));\n});\nrewrite_clj.zip.seqz.map_seq = (function rewrite_clj$zip$seqz$map_seq(f,zloc){\nif(rewrite_clj.zip.seqz.seq_QMARK_(zloc)){\n} else {\nthrow (new Error(\"Assert failed: (seq? zloc)\"));\n}\n\nvar temp__5802__auto__ = rewrite_clj.zip.move.down(zloc);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar zloc_n0 = temp__5802__auto__;\nvar G__38531 = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(zloc_n0) : f.call(null,zloc_n0));\nvar G__38531__$1 = (((G__38531 == null))?null:cljs.core.iterate((function (loc){\nvar temp__5804__auto__ = rewrite_clj.zip.move.right(loc);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar zloc_n = temp__5804__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(zloc_n) : f.call(null,zloc_n));\n} else {\nreturn null;\n}\n}),G__38531));\nvar G__38531__$2 = (((G__38531__$1 == null))?null:cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,G__38531__$1));\nvar G__38531__$3 = (((G__38531__$2 == null))?null:cljs.core.last(G__38531__$2));\nif((G__38531__$3 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.zip.move.up(G__38531__$3);\n}\n} else {\nreturn zloc;\n}\n});\nrewrite_clj.zip.seqz.map_vals_STAR_ = (function rewrite_clj$zip$seqz$map_vals_STAR_(f,map_loc){\nvar loc = rewrite_clj.zip.move.down(map_loc);\nvar parent = map_loc;\nwhile(true){\nif(cljs.core.not((function (){var and__5043__auto__ = loc;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn rewrite_clj.custom_zipper.core.node(loc);\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn parent;\n} else {\nvar temp__5802__auto__ = rewrite_clj.zip.move.right(loc);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar zloc_map_value = temp__5802__auto__;\nvar temp__5802__auto____$1 = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(zloc_map_value) : f.call(null,zloc_map_value));\nif(cljs.core.truth_(temp__5802__auto____$1)){\nvar new_zloc_map_value = temp__5802__auto____$1;\nvar G__38594 = rewrite_clj.zip.move.right(new_zloc_map_value);\nvar G__38595 = rewrite_clj.zip.move.up(new_zloc_map_value);\nloc = G__38594;\nparent = G__38595;\ncontinue;\n} else {\nvar G__38596 = rewrite_clj.zip.move.right(zloc_map_value);\nvar G__38597 = parent;\nloc = G__38596;\nparent = G__38597;\ncontinue;\n}\n} else {\nreturn parent;\n}\n}\nbreak;\n}\n});\nrewrite_clj.zip.seqz.map_loc = (function rewrite_clj$zip$seqz$map_loc(zloc){\nif(rewrite_clj.zip.seqz.namespaced_map_QMARK_(zloc)){\nreturn rewrite_clj.zip.move.rightmost(rewrite_clj.zip.move.down(zloc));\n} else {\nreturn zloc;\n}\n});\nrewrite_clj.zip.seqz.container_loc = (function rewrite_clj$zip$seqz$container_loc(zloc,map_loc){\nif(rewrite_clj.zip.seqz.namespaced_map_QMARK_(zloc)){\nreturn rewrite_clj.zip.move.up(map_loc);\n} else {\nreturn map_loc;\n}\n});\n/**\n * Returns `zloc` with function `f` applied to each value node of the current node.\n * Current node must be map node.\n * \n *   `zloc` location is unchanged.\n * \n *   `f` arg is zloc positioned at value node and should return:\n *   - an updated zloc with zloc positioned at value node\n *   - a falsey value to leave value node unchanged\n * \n *   Folks typically use [[rewrite-clj.zip/edit]] for `f`.\n */\nrewrite_clj.zip.seqz.map_vals = (function rewrite_clj$zip$seqz$map_vals(f,zloc){\nif(((rewrite_clj.zip.seqz.map_QMARK_(zloc)) || (rewrite_clj.zip.seqz.namespaced_map_QMARK_(zloc)))){\n} else {\nthrow (new Error(\"Assert failed: (or (map? zloc) (namespaced-map? zloc))\"));\n}\n\nreturn rewrite_clj.zip.seqz.container_loc(zloc,rewrite_clj.zip.seqz.map_vals_STAR_(f,rewrite_clj.zip.seqz.map_loc(zloc)));\n});\nrewrite_clj.zip.seqz.map_keys_STAR_ = (function rewrite_clj$zip$seqz$map_keys_STAR_(f,map_loc){\nvar loc = rewrite_clj.zip.move.down(map_loc);\nvar parent = map_loc;\nwhile(true){\nif(cljs.core.not((function (){var and__5043__auto__ = loc;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn rewrite_clj.custom_zipper.core.node(loc);\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn parent;\n} else {\nvar temp__5802__auto__ = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(loc) : f.call(null,loc));\nif(cljs.core.truth_(temp__5802__auto__)){\nvar zloc_map_key = temp__5802__auto__;\nvar G__38606 = rewrite_clj.zip.move.right(rewrite_clj.zip.move.right(zloc_map_key));\nvar G__38607 = rewrite_clj.zip.move.up(zloc_map_key);\nloc = G__38606;\nparent = G__38607;\ncontinue;\n} else {\nvar G__38608 = rewrite_clj.zip.move.right(rewrite_clj.zip.move.right(loc));\nvar G__38609 = parent;\nloc = G__38608;\nparent = G__38609;\ncontinue;\n}\n}\nbreak;\n}\n});\n/**\n * Returns `zloc` with function `f` applied to all key nodes of the current node.\n * Current node must be map node.\n * \n *   `zloc` location is unchanged.\n * \n *   `f` arg is zloc positioned at key node and should return:\n *   - an updated zloc with zloc positioned at key node\n *   - a falsey value to leave value node unchanged\n * \n *   Folks typically use [[rewrite-clj.zip/edit]] for `f`.\n */\nrewrite_clj.zip.seqz.map_keys = (function rewrite_clj$zip$seqz$map_keys(f,zloc){\nif(((rewrite_clj.zip.seqz.map_QMARK_(zloc)) || (rewrite_clj.zip.seqz.namespaced_map_QMARK_(zloc)))){\n} else {\nthrow (new Error(\"Assert failed: (or (map? zloc) (namespaced-map? zloc))\"));\n}\n\nreturn rewrite_clj.zip.seqz.container_loc(zloc,rewrite_clj.zip.seqz.map_keys_STAR_(f,rewrite_clj.zip.seqz.map_loc(zloc)));\n});\n/**\n * Returns `zloc` with function `f` applied to all nodes of the current node.\n *   Current node must be a sequence node. Equivalent to [[rewrite-clj.zip/map-vals]] for maps.\n * \n *   `zloc` location is unchanged.\n * \n *   `f` arg is zloc positioned at\n *   - value nodes for maps\n *   - each element of a seq\n *   and is should return:\n *   - an updated zloc with zloc positioned at edited node\n *   - a falsey value to leave value node unchanged\n * \n *   Folks typically use [[rewrite-clj.zip/edit]] for `f`.\n */\nrewrite_clj.zip.seqz.map = (function rewrite_clj$zip$seqz$map(f,zloc){\nif(rewrite_clj.zip.seqz.seq_QMARK_(zloc)){\n} else {\nthrow (new Error(\"Assert failed: (seq? zloc)\"));\n}\n\nif(((rewrite_clj.zip.seqz.map_QMARK_(zloc)) || (rewrite_clj.zip.seqz.namespaced_map_QMARK_(zloc)))){\nreturn rewrite_clj.zip.seqz.map_vals(f,zloc);\n} else {\nreturn rewrite_clj.zip.seqz.map_seq(f,zloc);\n}\n});\n/**\n * Returns `zloc` located to map key node's sexpr value matching `k` else `nil`.\n * \n *   `k` should be:\n *   - a key for maps\n *   - a zero-based index for sequences\n * \n *   NOTE: `k` will be compared against resolved keywords in maps.\n *   See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements).\n */\nrewrite_clj.zip.seqz.get = (function rewrite_clj$zip$seqz$get(zloc,k){\nif(((rewrite_clj.zip.seqz.map_QMARK_(zloc)) || (((rewrite_clj.zip.seqz.namespaced_map_QMARK_(zloc)) || (((rewrite_clj.zip.seqz.seq_QMARK_(zloc)) && (cljs.core.integer_QMARK_(k)))))))){\n} else {\nthrow (new Error(\"Assert failed: (or (map? zloc) (namespaced-map? zloc) (and (seq? zloc) (integer? k)))\"));\n}\n\nif(rewrite_clj.zip.seqz.map_QMARK_(zloc)){\nvar G__38582 = zloc;\nvar G__38582__$1 = (((G__38582 == null))?null:rewrite_clj.zip.move.down(G__38582));\nvar G__38582__$2 = (((G__38582__$1 == null))?null:rewrite_clj.zip.findz.find_value.cljs$core$IFn$_invoke$arity$2(G__38582__$1,k));\nif((G__38582__$2 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.zip.move.right(G__38582__$2);\n}\n} else {\nif(rewrite_clj.zip.seqz.namespaced_map_QMARK_(zloc)){\nvar G__38585 = zloc;\nvar G__38585__$1 = (((G__38585 == null))?null:rewrite_clj.zip.move.down(G__38585));\nvar G__38585__$2 = (((G__38585__$1 == null))?null:rewrite_clj.zip.move.rightmost(G__38585__$1));\nvar G__38585__$3 = (((G__38585__$2 == null))?null:rewrite_clj.zip.move.down(G__38585__$2));\nvar G__38585__$4 = (((G__38585__$3 == null))?null:rewrite_clj.zip.findz.find_value.cljs$core$IFn$_invoke$arity$2(G__38585__$3,k));\nif((G__38585__$4 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.zip.move.right(G__38585__$4);\n}\n} else {\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2((function (){var G__38587 = rewrite_clj.zip.move.down(zloc);\nvar G__38587__$1 = (((G__38587 == null))?null:cljs.core.iterate(rewrite_clj.zip.move.right,G__38587));\nif((G__38587__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,G__38587__$1);\n}\n})(),k);\n\n}\n}\n});\n/**\n * Returns `zloc` with current node's `k` set to value `v`.\n * \n *   `zloc` location is unchanged.\n * \n *   `k` should be:\n *   - a key for maps\n *   - a zero-based index for sequences, an exception is thrown if index is out of bounds\n * \n *   NOTE: `k` will be compared against resolved keywords in maps.\n *   See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements).\n */\nrewrite_clj.zip.seqz.assoc = (function rewrite_clj$zip$seqz$assoc(zloc,k,v){\nreturn rewrite_clj.zip.seqz.container_loc(zloc,(function (){var temp__5802__auto__ = rewrite_clj.zip.seqz.get(zloc,k);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar value_loc = temp__5802__auto__;\nreturn rewrite_clj.zip.move.up(rewrite_clj.zip.editz.replace(value_loc,v));\n} else {\nif(((rewrite_clj.zip.seqz.map_QMARK_(zloc)) || (rewrite_clj.zip.seqz.namespaced_map_QMARK_(zloc)))){\nreturn rewrite_clj.zip.insert.append_child(rewrite_clj.zip.insert.append_child(rewrite_clj.zip.seqz.map_loc(zloc),k),v);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"index out of bounds: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(k)].join(''),cljs.core.PersistentArrayMap.EMPTY);\n}\n}\n})());\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/zip/seqz.cljc","~:line",1,"~:column",14,"~:end-line",1,"~:end-column",34,"~:no-doc",true],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",["~$seq?","~$vector?","~$map","~$set?","~$map?","~$get","~$list?","~$assoc"]],"~:name","~$rewrite-clj.zip.seqz","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$base","~$rewrite-clj.zip.base","~$i","~$rewrite-clj.zip.insert","~$rewrite-clj.zip.findz","^1<","~$rewrite-clj.custom-zipper.core","^1=","~$cljs.core","^1>","~$goog","^1?","~$m","~$rewrite-clj.zip.move","^1;","^1;","^1@","^1@","~$e","~$rewrite-clj.zip.editz","^1A","^1A","~$zraw","^1=","^1:","^1:","~$f","^1<"],"~:seen",["^U",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^1>","^1>"],"~:form",["~#list",["~$ns","^13",["^1H",["~:refer-clojure","~:exclude",["^X","^[","^11","^V","^W","^10","^Z","^Y"]]],["^1H",["^1D",["^1=","~:as","^1B"],["^1:","^1L","^19"],["^1A","^1L","~$e"],["^1<","^1L","~$f"],["^1;","^1L","~$i"],["^1@","^1L","~$m"]]]]],"~:flags",["^ ","^1D",["^U",[]]],"~:js-deps",["^ "],"~:deps",["^1?","^1>","^1=","^1:","^1A","^1<","^1;","^1@"]],"^16","^13","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/zip/seqz.cljc"],"~:compiled-at",1666857665828,"^14",["^ ","^19","^1:","~$i","^1;","^1<","^1<","^1=","^1=","^1>","^1>","^1?","^1?","~$m","^1@","^1;","^1;","^1@","^1@","~$e","^1A","^1A","^1A","^1B","^1=","^1:","^1:","~$f","^1<"],"~:resource-name","rewrite_clj/zip/seqz.cljc","~:warnings",[],"~:source","(ns ^:no-doc rewrite-clj.zip.seqz\n  (:refer-clojure :exclude [map get assoc seq? vector? list? map? set?])\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.editz :as e]\n            [rewrite-clj.zip.findz :as f]\n            [rewrite-clj.zip.insert :as i]\n            [rewrite-clj.zip.move :as m]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Predicates\n\n(defn seq?\n  \"Returns true if current node in `zloc` is a sequence.\"\n  [zloc]\n  (contains?\n   #{:forms :list :vector :set :map :namespaced-map}\n   (base/tag zloc)))\n\n(defn list?\n  \"Returns true if current node in `zloc` is a list.\"\n  [zloc]\n  (= (base/tag zloc) :list))\n\n(defn vector?\n  \"Returns true if current node in `zloc` is a vector.\"\n  [zloc]\n  (= (base/tag zloc) :vector))\n\n(defn set?\n  \"Returns true if current node in `zloc` is a set.\"\n  [zloc]\n  (= (base/tag zloc) :set))\n\n(defn map?\n  \"Returns true if current node in `zloc` is a map.\"\n  [zloc]\n  (= (base/tag zloc) :map))\n\n(defn namespaced-map?\n  \"Returns true if the current node in `zloc` is a namespaced map.\"\n  [zloc]\n  (= (base/tag zloc) :namespaced-map))\n\n;; ## Map Operations\n\n(defn- map-seq\n  [f zloc]\n  {:pre [(seq? zloc)]}\n  (if-let [zloc-n0 (m/down zloc)]\n    (some->> (f zloc-n0)\n             (iterate\n              (fn [loc]\n                (when-let [zloc-n (m/right loc)]\n                  (f zloc-n))))\n             (take-while identity)\n             (last)\n             (m/up))\n    zloc))\n\n(defn- map-vals* [f map-loc]\n  (loop [loc (m/down map-loc)\n         parent map-loc]\n    (if-not (and loc (zraw/node loc))\n      parent\n      (if-let [zloc-map-value (m/right loc)]\n        (if-let [new-zloc-map-value (f zloc-map-value)]\n          (recur (m/right new-zloc-map-value) (m/up new-zloc-map-value))\n          (recur (m/right zloc-map-value) parent))\n        parent))))\n\n(defn- map-loc [zloc]\n  (if (namespaced-map? zloc)\n    (-> zloc m/down m/rightmost)\n    zloc))\n\n(defn- container-loc [zloc map-loc]\n  (if (namespaced-map? zloc)\n    (-> map-loc m/up)\n    map-loc))\n\n(defn map-vals\n  \"Returns `zloc` with function `f` applied to each value node of the current node.\n   Current node must be map node.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at value node and should return:\n  - an updated zloc with zloc positioned at value node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`.\"\n  [f zloc]\n  {:pre [(or (map? zloc) (namespaced-map? zloc))]}\n  (container-loc zloc\n                 (map-vals* f (map-loc zloc))))\n\n(defn- map-keys* [f map-loc]\n  (loop [loc (m/down map-loc)\n         parent map-loc]\n    (if-not (and loc (zraw/node loc))\n      parent\n      (if-let [zloc-map-key (f loc)]\n        (recur (m/right (m/right zloc-map-key)) (m/up zloc-map-key))\n        (recur (m/right (m/right loc)) parent)))))\n\n(defn map-keys\n  \"Returns `zloc` with function `f` applied to all key nodes of the current node.\n   Current node must be map node.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at key node and should return:\n  - an updated zloc with zloc positioned at key node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`.\"\n  [f zloc]\n  {:pre [(or (map? zloc) (namespaced-map? zloc))]}\n  (container-loc zloc\n                 (map-keys* f (map-loc zloc))))\n\n(defn map\n  \"Returns `zloc` with function `f` applied to all nodes of the current node.\n  Current node must be a sequence node. Equivalent to [[rewrite-clj.zip/map-vals]] for maps.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at\n  - value nodes for maps\n  - each element of a seq\n  and is should return:\n  - an updated zloc with zloc positioned at edited node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`.\"\n  [f zloc]\n  {:pre [(seq? zloc)]}\n  (if (or (map? zloc) (namespaced-map? zloc))\n    (map-vals f zloc)\n    (map-seq f zloc)))\n\n;; ## Get/Assoc\n\n(defn get\n  \"Returns `zloc` located to map key node's sexpr value matching `k` else `nil`.\n\n  `k` should be:\n  - a key for maps\n  - a zero-based index for sequences\n\n  NOTE: `k` will be compared against resolved keywords in maps.\n  See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements).\"\n  [zloc k]\n  {:pre [(or (map? zloc) (namespaced-map? zloc) (and (seq? zloc) (integer? k)))]}\n  (cond\n    (map? zloc)\n    (some-> zloc m/down (f/find-value k) m/right)\n\n    (namespaced-map? zloc)\n    (some-> zloc m/down m/rightmost m/down (f/find-value k) m/right)\n\n    :else\n    (nth\n     (some->> (m/down zloc)\n              (iterate m/right)\n              (take-while identity))\n     k)))\n\n(defn assoc\n  \"Returns `zloc` with current node's `k` set to value `v`.\n\n  `zloc` location is unchanged.\n\n  `k` should be:\n  - a key for maps\n  - a zero-based index for sequences, an exception is thrown if index is out of bounds\n\n  NOTE: `k` will be compared against resolved keywords in maps.\n  See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements).\"\n  [zloc k v]\n  (container-loc zloc\n                 (if-let [value-loc (get zloc k)]\n                   (-> value-loc (e/replace v) m/up)\n                   (if (or (map? zloc) (namespaced-map? zloc))\n                     (-> (map-loc zloc)\n                         (i/append-child k)\n                         (i/append-child v))\n                     (throw\n                      (ex-info (str \"index out of bounds: \" k) {}))))))\n","~:reader-features",["^U",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj.zip.seqz/seq?","zloc","cljs.core/contains?","rewrite-clj.zip.base/tag","rewrite-clj.zip.seqz/list?","cljs.core._EQ_","rewrite-clj.zip.seqz/vector?","rewrite-clj.zip.seqz/set?","rewrite-clj.zip.seqz/map?","rewrite-clj.zip.seqz/namespaced-map?","js/Error","rewrite-clj.zip.seqz/map-seq","f","temp__5802__auto__","zloc-n0","rewrite-clj.zip.move/down","G__38531","cljs.core/iterate","loc","temp__5804__auto__","zloc-n","rewrite-clj.zip.move/right","cljs.core.take_while","cljs.core/identity","cljs.core/last","rewrite-clj.zip.move/up","rewrite-clj.zip.seqz/map-vals*","map-loc","parent","cljs.core/not","and__5043__auto__","rewrite-clj.custom-zipper.core/node","zloc-map-value","new-zloc-map-value","rewrite-clj.zip.seqz/map-loc","rewrite-clj.zip.move/rightmost","rewrite-clj.zip.seqz/container-loc","rewrite-clj.zip.seqz/map-vals","rewrite-clj.zip.seqz/map-keys*","zloc-map-key","rewrite-clj.zip.seqz/map-keys","rewrite-clj.zip.seqz/map","rewrite-clj.zip.seqz/get","k","cljs.core/integer?","G__38582","rewrite_clj.zip.findz.find_value","G__38585","cljs.core.nth","G__38587","rewrite-clj.zip.seqz/assoc","v","value-loc","rewrite-clj.zip.editz/replace","rewrite-clj.zip.insert/append-child","cljs.core.ex_info"]],"~:used-vars",["^U",["~$rewrite-clj.zip.seqz/map?","~$cljs.core/=","~$cljs.core/take-while","~$cljs.core/identity","~$cljs.core/last","~$cljs.core/iterate","~$rewrite-clj.zip.move/rightmost","~$rewrite-clj.zip.findz/find-value","~$rewrite-clj.zip.move/right","~$rewrite-clj.zip.seqz/map-keys","~$rewrite-clj.zip.insert/append-child","~$rewrite-clj.zip.seqz/map-vals","~$rewrite-clj.zip.seqz/list?","~$cljs.core/contains?","~$cljs.core/integer?","~$rewrite-clj.zip.seqz/assoc","~$rewrite-clj.zip.seqz/set?","~$rewrite-clj.zip.seqz/map","~$rewrite-clj.zip.seqz/map-loc","~$rewrite-clj.zip.seqz/get","~$rewrite-clj.zip.base/tag","~$rewrite-clj.zip.seqz/map-vals*","~$cljs.core/nth","~$cljs.core/ex-info","~$rewrite-clj.custom-zipper.core/node","~$rewrite-clj.zip.seqz/seq?","~$rewrite-clj.zip.seqz/namespaced-map?","~$rewrite-clj.zip.editz/replace","~$cljs.core/not","~$rewrite-clj.zip.seqz/vector?","~$rewrite-clj.zip.move/up","~$rewrite-clj.zip.seqz/map-keys*","~$rewrite-clj.zip.seqz/map-seq","~$rewrite-clj.zip.seqz/container-loc","~$rewrite-clj.zip.move/down","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^1Q","rewrite_clj/zip/options.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^U",[]],"~:deps-syms",["^1?","^1>","~$rewrite-clj.node.protocols"]]],["^1Q","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","~$goog.dom.HtmlElement"]]],["^1Q","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","~$clojure.string","~$goog.string"]]],["^1Q","rewrite_clj/node/reader_macro.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^2[","~$rewrite-clj.node.whitespace"]]],["^1Q","rewrite_clj/parser.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","~$rewrite-clj.node.forms","~$rewrite-clj.parser.core","~$rewrite-clj.reader"]]],["^1Q","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^32"]]],["^1Q","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1Q","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3:"]]],["^1Q","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3;"]]],["^1Q","rewrite_clj/parser/whitespace.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^33","^36"]]],["^1Q","rewrite_clj/node/regex.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^2["]]],["^1Q","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^F","^J","^@","^D","~$cljs.tools.reader","^32","~$goog.string.StringBuffer"]]],["^1Q","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>"]]],["^1Q","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^J","^@","^D","^F","^37","^32","^3C"]]],["^1Q","rewrite_clj/zip/base.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^1=","^34","^2[","~$rewrite-clj.parser","~$rewrite-clj.zip.options","~$rewrite-clj.zip.whitespace"]]],["^1Q","rewrite_clj/zip/editz.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^1=","~$rewrite-clj.custom-zipper.utils","^2[","~$rewrite-clj.node.token","^33","^1:","^3E","~$rewrite-clj.zip.removez","^3F"]]],["^1Q","rewrite_clj/parser/token.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^3H","^36"]]],["^1Q","rewrite_clj/node/uneval.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^2["]]],["^1Q","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","rewrite_clj/parser/keyword.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","~$rewrite-clj.node.keyword","^36"]]],["^1Q","rewrite_clj/zip/seqz.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^1=","^1:","^1A","^1<","^1;","^1@"]]],["^1Q","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3;"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^1Q","rewrite_clj/node/keyword.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^2["]]],["^1Q","rewrite_clj/node/token.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^2["]]],["^1Q","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3;","~$goog.reflect"]]],["^1Q","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3;","~$goog.fs.blob","^3<","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3>","^3?","^3@","^3A"]]],["^1Q","rewrite_clj/node/comment.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^2["]]],["^1Q","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","rewrite_clj/parser/string.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^31","~$rewrite-clj.node.stringz","^36","^3C"]]],["^1Q","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3@","~$goog.html.SafeUrl","^3A","^3;","^3:"]]],["^1Q","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3;","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3N","~$goog.html.SafeStyle","^3Q","^3=","~$goog.html.uncheckedconversions","^3@","^3:"]]],["^1Q","rewrite_clj/zip/removez.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^1=","^3G","^1@","^3F"]]],["^1Q","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>"]]],["^1Q","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3@","^3>","^3?","^3N","^3U","~$goog.html.SafeStyleSheet","^3Q","~$goog.dom.TagName","^3=","^3A","^3;","~$goog.labs.userAgent.browser","^37","^38","^3:","~$goog.dom.tags","^3O"]]],["^1Q","rewrite_clj/node/forms.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^2["]]],["^1Q","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^38"]]],["^1Q","rewrite_clj/parser/core.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","~$rewrite-clj.node.comment","~$rewrite-clj.node.fn","~$rewrite-clj.node.meta","^2[","~$rewrite-clj.node.quote","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.regex","~$rewrite-clj.node.seq","^3H","~$rewrite-clj.node.uneval","~$rewrite-clj.parser.keyword","~$rewrite-clj.parser.namespaced-map","~$rewrite-clj.parser.string","~$rewrite-clj.parser.token","~$rewrite-clj.parser.whitespace","^36"]]],["^1Q","rewrite_clj/node/fn.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^31","~$clojure.walk","~$rewrite-clj.interop","^2["]]],["^1Q","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","rewrite_clj/node/protocols.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^31","^4="]]],["^1Q","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1Q","rewrite_clj/zip/whitespace.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^1=","^3[","~$rewrite-clj.node.extras","^33"]]],["^1Q","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^37","^3;","~$goog.collections.maps","^32","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1Q","rewrite_clj/node/meta.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^4=","^2[","^33"]]],["^1Q","rewrite_clj/node/stringz.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^31","^L","^2["]]],["^1Q","rewrite_clj/parser/namespaced_map.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","~$rewrite-clj.node.namespaced-map","^2[","^33","^36"]]],["^1Q","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","rewrite_clj/node/whitespace.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^2[","^36"]]],["^1Q","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","rewrite_clj/zip/move.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^1=","^3F"]]],["^1Q","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","rewrite_clj/node/quote.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^2["]]],["^1Q","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",[]]],["^1Q","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^37","^38"]]],["^1Q","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^J","^31","~$cljs.tools.reader.impl.inspect"]]],["^1Q","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^32","^3C"]]],["^1Q","rewrite_clj/zip/findz.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^1=","^1:","^1@"]]],["^1Q","rewrite_clj/zip/insert.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^1=","^2[","^33","^3F"]]],["^1Q","rewrite_clj/node/namespaced_map.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^2["]]],["^1Q","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","~$goog.dom.safe","^3V","^3@","^3:"]]],["^1Q","rewrite_clj/custom_zipper/core.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","~$clojure.zip","~$rewrite-clj.custom-zipper.switchable","^2["]]],["^1Q","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","~$goog.labs.userAgent","^3:"]]],["^1Q","clojure/zip.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>"]]],["^1Q","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^@","^32","^3C"]]],["^1Q","rewrite_clj/reader.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^L","^D","^F","^@","^J","^4=","^3C"]]],["^1Q","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","rewrite_clj/custom_zipper/utils.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^1="]]],["^1Q","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3;","^3T","^3N","^3U","^3W","^3Q","^3=","^3@","^3:","^3>"]]],["^1Q","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^F","^J","^@"]]],["^1Q","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?"]]],["^1Q","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","~$goog.math.Long","~$goog.math.Integer","^32","^38","^37","~$goog.Uri","^3C"]]],["^1Q","rewrite_clj/custom_zipper/switchable.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>"]]],["^1Q","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3@","^3A","^3O","^3;"]]],["^1Q","rewrite_clj/node/extras.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^3[","^33"]]],["^1Q","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3@","^3U","^3A","^38","^3;","^3:"]]],["^1Q","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3L"]]],["^1Q","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3;","^32"]]],["^1Q","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^3;","^3A"]]],["^1Q","rewrite_clj/interop.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^32","~$goog.string.format"]]],["^1Q","rewrite_clj/node/seq.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^2W",["^ ","^2X",null,"^2Y",["^U",[]],"^2Z",["^1?","^1>","^4=","^2["]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/reader.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/node/protocols.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/interop.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/utils.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/commons.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/node/whitespace.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/custom_zipper/switchable.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1666857280000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",1,"^8",14,"^9",1,"^:",34,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q","^R"],"^S",null,"^T",["^U",["^V","^W","^X","^Y","^Z","^[","^10","^11"]],"^12","^13","^14",["^ "],"^17",null,"^18",["^ ","^19","^1:","~$i","^1;","^1<","^1<","^1=","^1=","^1>","^1>","^1?","^1?","~$m","^1@","^1;","^1;","^1@","^1@","~$e","^1A","^1A","^1A","^1B","^1=","^1:","^1:","~$f","^1<"],"^1C",["^U",["^1D"]],"~:shadow/js-access-global",["^U",["Error"]],"^1E",null,"~:defs",["^ ","^V",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",14,"^8",7,"^9",14,"^:",11,"~:arglists",["^1H",["~$quote",["^1H",[["~$zloc"]]]]],"~:doc","Returns true if current node in `zloc` is a sequence."],"^12","^2J","^6","rewrite_clj/zip/seqz.cljc","^:",11,"~:method-params",["^1H",[["^5U"]]],"~:protocol-impl",null,"~:arglists-meta",["^1H",[null,null]],"^8",1,"~:variadic?",false,"^7",14,"~:ret-tag","~$boolean","^9",14,"~:max-fixed-arity",1,"~:fn-var",true,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if current node in `zloc` is a sequence."],"^W",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",26,"^8",7,"^9",26,"^:",14,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if current node in `zloc` is a vector."],"^12","^2N","^6","rewrite_clj/zip/seqz.cljc","^:",14,"^5W",["^1H",[["^5U"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",26,"^5[","^60","^9",26,"^61",1,"^62",true,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if current node in `zloc` is a vector."],"~$map-vals*",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",62,"^8",8,"^9",62,"^:",17,"~:private",true,"^5S",["^1H",["^5T",["^1H",[["~$f","~$map-loc"]]]]]],"^64",true,"^12","^2F","^6","rewrite_clj/zip/seqz.cljc","^:",17,"^5W",["^1H",[["~$f","^65"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",62,"^5[","~$any","^9",62,"^61",2,"^62",true,"^5S",["^1H",["^5T",["^1H",[["~$f","^65"]]]]]],"^X",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",124,"^8",7,"^9",124,"^:",10,"^5S",["^1H",["^5T",["^1H",[["~$f","^5U"]]]]],"^5V","Returns `zloc` with function `f` applied to all nodes of the current node.\n  Current node must be a sequence node. Equivalent to [[rewrite-clj.zip/map-vals]] for maps.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at\n  - value nodes for maps\n  - each element of a seq\n  and is should return:\n  - an updated zloc with zloc positioned at edited node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`."],"^12","^2B","^6","rewrite_clj/zip/seqz.cljc","^:",10,"^5W",["^1H",[["~$f","^5U"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",124,"^5[",["^U",[null,"^66","~$clj-nil"]],"^9",124,"^61",2,"^62",true,"^5S",["^1H",["^5T",["^1H",[["~$f","^5U"]]]]],"^5V","Returns `zloc` with function `f` applied to all nodes of the current node.\n  Current node must be a sequence node. Equivalent to [[rewrite-clj.zip/map-vals]] for maps.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at\n  - value nodes for maps\n  - each element of a seq\n  and is should return:\n  - an updated zloc with zloc positioned at edited node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`."],"~$map-seq",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",48,"^8",8,"^9",48,"^:",15,"^64",true,"^5S",["^1H",["^5T",["^1H",[["~$f","^5U"]]]]]],"^64",true,"^12","^2Q","^6","rewrite_clj/zip/seqz.cljc","^:",15,"^5W",["^1H",[["~$f","^5U"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",48,"^5[",["^U",[null,"^66","^67"]],"^9",48,"^61",2,"^62",true,"^5S",["^1H",["^5T",["^1H",[["~$f","^5U"]]]]]],"^Y",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",31,"^8",7,"^9",31,"^:",11,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if current node in `zloc` is a set."],"^12","^2A","^6","rewrite_clj/zip/seqz.cljc","^:",11,"^5W",["^1H",[["^5U"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",31,"^5[","^60","^9",31,"^61",1,"^62",true,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if current node in `zloc` is a set."],"^Z",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",36,"^8",7,"^9",36,"^:",11,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if current node in `zloc` is a map."],"^12","^21","^6","rewrite_clj/zip/seqz.cljc","^:",11,"^5W",["^1H",[["^5U"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",36,"^5[","^60","^9",36,"^61",1,"^62",true,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if current node in `zloc` is a map."],"^[",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",146,"^8",7,"^9",146,"^:",10,"^5S",["^1H",["^5T",["^1H",[["^5U","~$k"]]]]],"^5V","Returns `zloc` located to map key node's sexpr value matching `k` else `nil`.\n\n  `k` should be:\n  - a key for maps\n  - a zero-based index for sequences\n\n  NOTE: `k` will be compared against resolved keywords in maps.\n  See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)."],"^12","^2D","^6","rewrite_clj/zip/seqz.cljc","^:",10,"^5W",["^1H",[["^5U","~$k"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",146,"^5[",["^U",["^66","^67"]],"^9",146,"^61",2,"^62",true,"^5S",["^1H",["^5T",["^1H",[["^5U","~$k"]]]]],"^5V","Returns `zloc` located to map key node's sexpr value matching `k` else `nil`.\n\n  `k` should be:\n  - a key for maps\n  - a zero-based index for sequences\n\n  NOTE: `k` will be compared against resolved keywords in maps.\n  See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)."],"~$container-loc",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",78,"^8",8,"^9",78,"^:",21,"^64",true,"^5S",["^1H",["^5T",["^1H",[["^5U","^65"]]]]]],"^64",true,"^12","^2R","^6","rewrite_clj/zip/seqz.cljc","^:",21,"^5W",["^1H",[["^5U","^65"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",78,"^5[",["^U",[null,"^66","^67"]],"^9",78,"^61",2,"^62",true,"^5S",["^1H",["^5T",["^1H",[["^5U","^65"]]]]]],"~$map-keys*",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",99,"^8",8,"^9",99,"^:",17,"^64",true,"^5S",["^1H",["^5T",["^1H",[["~$f","^65"]]]]]],"^64",true,"^12","^2P","^6","rewrite_clj/zip/seqz.cljc","^:",17,"^5W",["^1H",[["~$f","^65"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",99,"^5[","^66","^9",99,"^61",2,"^62",true,"^5S",["^1H",["^5T",["^1H",[["~$f","^65"]]]]]],"~$map-keys",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",108,"^8",7,"^9",108,"^:",15,"^5S",["^1H",["^5T",["^1H",[["~$f","^5U"]]]]],"^5V","Returns `zloc` with function `f` applied to all key nodes of the current node.\n   Current node must be map node.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at key node and should return:\n  - an updated zloc with zloc positioned at key node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`."],"^12","^2:","^6","rewrite_clj/zip/seqz.cljc","^:",15,"^5W",["^1H",[["~$f","^5U"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",108,"^5[",["^U",[null,"^66","^67"]],"^9",108,"^61",2,"^62",true,"^5S",["^1H",["^5T",["^1H",[["~$f","^5U"]]]]],"^5V","Returns `zloc` with function `f` applied to all key nodes of the current node.\n   Current node must be map node.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at key node and should return:\n  - an updated zloc with zloc positioned at key node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`."],"~$namespaced-map?",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",41,"^8",7,"^9",41,"^:",22,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if the current node in `zloc` is a namespaced map."],"^12","^2K","^6","rewrite_clj/zip/seqz.cljc","^:",22,"^5W",["^1H",[["^5U"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",41,"^5[","^60","^9",41,"^61",1,"^62",true,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if the current node in `zloc` is a namespaced map."],"~$map-vals",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",83,"^8",7,"^9",83,"^:",15,"^5S",["^1H",["^5T",["^1H",[["~$f","^5U"]]]]],"^5V","Returns `zloc` with function `f` applied to each value node of the current node.\n   Current node must be map node.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at value node and should return:\n  - an updated zloc with zloc positioned at value node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`."],"^12","^2<","^6","rewrite_clj/zip/seqz.cljc","^:",15,"^5W",["^1H",[["~$f","^5U"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",83,"^5[",["^U",[null,"^66","^67"]],"^9",83,"^61",2,"^62",true,"^5S",["^1H",["^5T",["^1H",[["~$f","^5U"]]]]],"^5V","Returns `zloc` with function `f` applied to each value node of the current node.\n   Current node must be map node.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at value node and should return:\n  - an updated zloc with zloc positioned at value node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`."],"^10",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",21,"^8",7,"^9",21,"^:",12,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if current node in `zloc` is a list."],"^12","^2=","^6","rewrite_clj/zip/seqz.cljc","^:",12,"^5W",["^1H",[["^5U"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",21,"^5[","^60","^9",21,"^61",1,"^62",true,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]],"^5V","Returns true if current node in `zloc` is a list."],"^11",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",171,"^8",7,"^9",171,"^:",12,"^5S",["^1H",["^5T",["^1H",[["^5U","~$k","~$v"]]]]],"^5V","Returns `zloc` with current node's `k` set to value `v`.\n\n  `zloc` location is unchanged.\n\n  `k` should be:\n  - a key for maps\n  - a zero-based index for sequences, an exception is thrown if index is out of bounds\n\n  NOTE: `k` will be compared against resolved keywords in maps.\n  See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)."],"^12","^2@","^6","rewrite_clj/zip/seqz.cljc","^:",12,"^5W",["^1H",[["^5U","~$k","~$v"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",171,"^5[",["^U",[null,"^66","^67"]],"^9",171,"^61",3,"^62",true,"^5S",["^1H",["^5T",["^1H",[["^5U","~$k","~$v"]]]]],"^5V","Returns `zloc` with current node's `k` set to value `v`.\n\n  `zloc` location is unchanged.\n\n  `k` should be:\n  - a key for maps\n  - a zero-based index for sequences, an exception is thrown if index is out of bounds\n\n  NOTE: `k` will be compared against resolved keywords in maps.\n  See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)."],"^65",["^ ","^5R",null,"^5",["^ ","^6","rewrite_clj/zip/seqz.cljc","^7",73,"^8",8,"^9",73,"^:",15,"^64",true,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]]],"^64",true,"^12","^2C","^6","rewrite_clj/zip/seqz.cljc","^:",15,"^5W",["^1H",[["^5U"]]],"^5X",null,"^5Y",["^1H",[null,null]],"^8",1,"^5Z",false,"^7",73,"^5[",["^U",[null,"^66","^67"]],"^9",73,"^61",1,"^62",true,"^5S",["^1H",["^5T",["^1H",[["^5U"]]]]]]],"^1F",["^ ","^1>","^1>"],"~:cljs.analyzer/constants",["^ ","^1C",["^U",["~:namespaced-map","~:else","~:vector","~:list","~:set","~:map","~:forms"]],"~:order",["^6?","^6A","^6B","^6C","^6D","^6E","^6@"]],"^1M",["^ ","^1D",["^U",[]]],"^1N",["^ "],"^1O",["^1?","^1>","^1=","^1:","^1A","^1<","^1;","^1@"]],"^16","^13","~:ns-specs",["^ "],"~:ns-spec-vars",["^U",[]],"~:compiler-options",["^2V",[["^6I","~:static-fns"],true,["^6I","~:shadow-tweaks"],null,["^6I","~:source-map-inline"],null,["^6I","~:elide-asserts"],false,["^6I","~:optimize-constants"],null,["^6I","^1T"],null,["^6I","~:external-config"],null,["^6I","~:tooling-config"],null,["^6I","~:emit-constants"],null,["^6I","~:load-tests"],null,["^6I","~:form-size-threshold"],null,["^6I","~:global-goog-object&array"],null,["^6I","~:data-readers"],null,["^6I","~:infer-externs"],"~:auto",["^6I","^1V"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6I","~:fn-invoke-direct"],null,["^6I","~:source-map"],"/dev/null"]]]