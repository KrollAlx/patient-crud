["^ ","~:output",["^ ","~:js","goog.provide('sci.core');\n/**\n * Returns a new sci var.\n */\nsci.core.new_var = (function sci$core$new_var(var_args){\nvar G__57965 = arguments.length;\nswitch (G__57965) {\ncase 1:\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.new_var.cljs$core$IFn$_invoke$arity$1 = (function (name){\nvar G__57967 = sci.core.new_var.cljs$core$IFn$_invoke$arity$3(name,null,null);\nsci.impl.vars.unbind(G__57967);\n\nreturn G__57967;\n}));\n\n(sci.core.new_var.cljs$core$IFn$_invoke$arity$2 = (function (name,init_val){\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$3(name,init_val,cljs.core.meta(name));\n}));\n\n(sci.core.new_var.cljs$core$IFn$_invoke$arity$3 = (function (name,init_val,meta){\nreturn (new sci.impl.vars.SciVar(init_val,name,meta,false));\n}));\n\n(sci.core.new_var.cljs$lang$maxFixedArity = 3);\n\n/**\n * Same as new-var but adds :dynamic true to meta.\n */\nsci.core.new_dynamic_var = (function sci$core$new_dynamic_var(var_args){\nvar G__57984 = arguments.length;\nswitch (G__57984) {\ncase 1:\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$1 = (function (name){\nvar G__57986 = sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3(name,null,null);\nsci.impl.vars.unbind(G__57986);\n\nreturn G__57986;\n}));\n\n(sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$2 = (function (name,init_val){\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3(name,init_val,cljs.core.meta(name));\n}));\n\n(sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3 = (function (name,init_val,meta){\nreturn (new sci.impl.vars.SciVar(init_val,name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(meta,new cljs.core.Keyword(null,\"dynamic\",\"dynamic\",704819571),true),false));\n}));\n\n(sci.core.new_dynamic_var.cljs$lang$maxFixedArity = 3);\n\n/**\n * Establish thread local binding of dynamic var\n */\nsci.core.set_BANG_ = (function sci$core$set_BANG_(dynamic_var,v){\nreturn sci.impl.types.setVal(dynamic_var,v);\n});\n/**\n * Same as new-var but adds :macro true to meta as well\n *   as :sci/macro true to meta of the fn itself.\n */\nsci.core.new_macro_var = (function sci$core$new_macro_var(var_args){\nvar G__57989 = arguments.length;\nswitch (G__57989) {\ncase 2:\nreturn sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$2 = (function (name,init_val){\nreturn sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$3(name,init_val,cljs.core.meta(name));\n}));\n\n(sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$3 = (function (name,init_val,meta){\nreturn (new sci.impl.vars.SciVar(cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(init_val,cljs.core.assoc,new cljs.core.Keyword(\"sci\",\"macro\",\"sci/macro\",-868536151),true),name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(meta,new cljs.core.Keyword(null,\"macro\",\"macro\",-867863404),true),false));\n}));\n\n(sci.core.new_macro_var.cljs$lang$maxFixedArity = 3);\n\n/**\n * Sci var that represents sci's `clojure.core/*in*`\n */\nsci.core.in$ = sci.impl.io.in$;\n/**\n * Sci var that represents sci's `clojure.core/*out*`\n */\nsci.core.out = sci.impl.io.out;\n/**\n * Sci var that represents sci's `clojure.core/*err*`\n */\nsci.core.err = sci.impl.io.err;\n/**\n * Sci var that represents sci's `clojure.core/*ns*`\n */\nsci.core.ns = sci.impl.vars.current_ns;\n/**\n * Sci var that represents sci's `clojure.core/*file*`\n */\nsci.core.file = sci.impl.vars.current_file;\n/**\n * Sci var that represents sci's `clojure.core/*print-length*`\n */\nsci.core.print_length = sci.impl.io.print_length;\n/**\n * Sci var that represents sci's `clojure.core/*print-level*`\n */\nsci.core.print_level = sci.impl.io.print_level;\n/**\n * Sci var that represents sci's `clojure.core/*print-meta*`\n */\nsci.core.print_meta = sci.impl.io.print_meta;\n/**\n * Sci var that represents sci's `clojure.core/*print-readably*`\n */\nsci.core.print_readably = sci.impl.io.print_readably;\n/**\n * Sci var that represents sci's `cljs.core/*print-fn*`\n */\nsci.core.print_fn = sci.impl.io.print_fn;\n/**\n * Sci var that represents sci's `cljs.core/*print-newline*`\n */\nsci.core.print_newline = sci.impl.io.print_newline;\nsci.core._STAR_1 = sci.impl.namespaces._STAR_1;\nsci.core._STAR_2 = sci.impl.namespaces._STAR_2;\nsci.core._STAR_3 = sci.impl.namespaces._STAR_3;\nsci.core._STAR_e = sci.impl.namespaces._STAR_e;\n/**\n * Atomically alters the root binding of sci var v by applying f to its\n *   current value plus any args.\n */\nsci.core.alter_var_root = (function sci$core$alter_var_root(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___58033 = arguments.length;\nvar i__5770__auto___58034 = (0);\nwhile(true){\nif((i__5770__auto___58034 < len__5769__auto___58033)){\nargs__5775__auto__.push((arguments[i__5770__auto___58034]));\n\nvar G__58035 = (i__5770__auto___58034 + (1));\ni__5770__auto___58034 = G__58035;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\nreturn sci.core.alter_var_root.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\n});\n\n(sci.core.alter_var_root.cljs$core$IFn$_invoke$arity$variadic = (function (v,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(sci.impl.vars.alter_var_root,v,f,args);\n}));\n\n(sci.core.alter_var_root.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(sci.core.alter_var_root.cljs$lang$applyTo = (function (seq58006){\nvar G__58007 = cljs.core.first(seq58006);\nvar seq58006__$1 = cljs.core.next(seq58006);\nvar G__58008 = cljs.core.first(seq58006__$1);\nvar seq58006__$2 = cljs.core.next(seq58006__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__58007,G__58008,seq58006__$2);\n}));\n\n/**\n * Finds or creates a sci var named by the symbol name in the namespace\n *   ns (which can be a symbol or a sci namespace), setting its root\n *   binding to val if supplied. The namespace must exist in the ctx. The\n *   sci var will adopt any metadata from the name symbol.  Returns the\n *   sci var.\n */\nsci.core.intern = (function sci$core$intern(var_args){\nvar G__58010 = arguments.length;\nswitch (G__58010) {\ncase 3:\nreturn sci.core.intern.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn sci.core.intern.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.intern.cljs$core$IFn$_invoke$arity$3 = (function (ctx,sci_ns,name){\nreturn sci.impl.namespaces.sci_intern.cljs$core$IFn$_invoke$arity$3(ctx,sci_ns,name);\n}));\n\n(sci.core.intern.cljs$core$IFn$_invoke$arity$4 = (function (ctx,sci_ns,name,val){\nreturn sci.impl.namespaces.sci_intern.cljs$core$IFn$_invoke$arity$4(ctx,sci_ns,name,val);\n}));\n\n(sci.core.intern.cljs$lang$maxFixedArity = 4);\n\n/**\n * Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n * \n *   The map `opts` may contain the following:\n * \n *   - `:namespaces`: a map of symbols to namespaces, where a namespace\n *   is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n *   namespaces can be used with `require`.\n * \n *   - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n * \n *   - `:allow`: a seqable of allowed symbols. All symbols, even those\n *   brought in via `:bindings` or `:namespaces` have to be explicitly\n *   enumerated.\n * \n *   - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n *   recur]`.\n * \n *   - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n * \n *   - `:env`: an atom with a map in which state from the\n *   evaluation (defined namespaced and vars) will be persisted for\n *   re-use over multiple calls.\n * \n *   - `:disable-arity-checks`: disables arity checks for single-arity\n *   functions.\n */\nsci.core.eval_string = (function sci$core$eval_string(var_args){\nvar G__58012 = arguments.length;\nswitch (G__58012) {\ncase 1:\nreturn sci.core.eval_string.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.eval_string.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.eval_string.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn sci.core.eval_string.cljs$core$IFn$_invoke$arity$2(s,null);\n}));\n\n(sci.core.eval_string.cljs$core$IFn$_invoke$arity$2 = (function (s,opts){\nreturn sci.impl.interpreter.eval_string.cljs$core$IFn$_invoke$arity$2(s,opts);\n}));\n\n(sci.core.eval_string.cljs$lang$maxFixedArity = 2);\n\n/**\n * Creates an initial sci context from given options `opts`. The context\n *   can be used with `eval-string*`. See `eval-string` for available\n *   options. The internal organization of the context is implementation\n *   detail and may change in the future.\n */\nsci.core.init = (function sci$core$init(opts){\nreturn sci.impl.opts.init(opts);\n});\n/**\n * Updates a context with opts merged in and returns it.\n */\nsci.core.merge_opts = (function sci$core$merge_opts(ctx,opts){\nreturn sci.impl.opts.merge_opts(ctx,opts);\n});\n/**\n * Forks a context (as produced with `init`) into a new context. Any new\n *   vars created in the new context won't be visible in the original\n *   context.\n */\nsci.core.fork = (function sci$core$fork(ctx){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),(function (env){\nreturn cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(env));\n}));\n});\n/**\n * Evaluates string `s` in the context of `ctx` (as produced with\n *   `init`).\n */\nsci.core.eval_string_STAR_ = (function sci$core$eval_string_STAR_(ctx,s){\nreturn sci.impl.interpreter.eval_string_STAR_(ctx,s);\n});\n/**\n * Creates namespace object. Can be used in var metadata.\n */\nsci.core.create_ns = (function sci$core$create_ns(var_args){\nvar G__58014 = arguments.length;\nswitch (G__58014) {\ncase 1:\nreturn sci.core.create_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.create_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.create_ns.cljs$core$IFn$_invoke$arity$1 = (function (sym){\nreturn sci.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym,null);\n}));\n\n(sci.core.create_ns.cljs$core$IFn$_invoke$arity$2 = (function (sym,meta){\nreturn sci.impl.vars.__GT_SciNamespace(sym,meta);\n}));\n\n(sci.core.create_ns.cljs$lang$maxFixedArity = 2);\n\n/**\n * Parses string `s` in the context of `ctx` (as produced with\n *   `init`).\n */\nsci.core.parse_string = (function sci$core$parse_string(ctx,s){\nreturn sci.impl.parser.parse_string(ctx,s);\n});\n/**\n * Coerces x into indexing pushback-reader to be used with\n *   parse-next. Accepts: string or java.io.Reader.\n */\nsci.core.reader = (function sci$core$reader(x){\nreturn sci.impl.parser.reader(x);\n});\nsci.core.get_line_number = (function sci$core$get_line_number(reader){\nreturn sci.impl.parser.get_line_number(reader);\n});\nsci.core.get_column_number = (function sci$core$get_column_number(reader){\nreturn sci.impl.parser.get_column_number(reader);\n});\n/**\n * Parses next form from reader\n */\nsci.core.parse_next = (function sci$core$parse_next(var_args){\nvar G__58016 = arguments.length;\nswitch (G__58016) {\ncase 2:\nreturn sci.core.parse_next.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.parse_next.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.parse_next.cljs$core$IFn$_invoke$arity$2 = (function (ctx,reader){\nreturn sci.core.parse_next.cljs$core$IFn$_invoke$arity$3(ctx,reader,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(sci.core.parse_next.cljs$core$IFn$_invoke$arity$3 = (function (ctx,reader,opts){\nvar v = sci.impl.parser.parse_next.cljs$core$IFn$_invoke$arity$3(ctx,reader,opts);\nif(cljs.core.truth_((sci.impl.utils.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? sci.impl.utils.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),v) : sci.impl.utils.kw_identical_QMARK_.call(null,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),v)))){\nvar or__5045__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(\"sci.core\",\"eof\",\"sci.core/eof\",-808584945);\n}\n} else {\nreturn v;\n}\n}));\n\n(sci.core.parse_next.cljs$lang$maxFixedArity = 3);\n\n/**\n * Evaluates form (as produced by `parse-string` or `parse-next`) in the\n *   context of `ctx` (as produced with `init`). To allow namespace\n *   switches, establish root binding of `sci/ns` with `sci/binding` or\n *   `sci/with-bindings.`\n */\nsci.core.eval_form = (function sci$core$eval_form(ctx,form){\nvar ctx__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();\n}\n})());\nreturn sci.impl.interpreter.eval_form(ctx__$1,form);\n});\n/**\n * Returns list of stacktrace element maps from exception, if available.\n */\nsci.core.stacktrace = (function sci$core$stacktrace(ex){\nvar G__58017 = ex;\nvar G__58017__$1 = (((G__58017 == null))?null:cljs.core.ex_data(G__58017));\nvar G__58017__$2 = (((G__58017__$1 == null))?null:new cljs.core.Keyword(\"sci.impl\",\"callstack\",\"sci.impl/callstack\",-1621010557).cljs$core$IFn$_invoke$arity$1(G__58017__$1));\nif((G__58017__$2 == null)){\nreturn null;\n} else {\nreturn sci.impl.callstack.stacktrace(G__58017__$2);\n}\n});\n/**\n * Returns a list of formatted stack trace elements as strings from stacktrace.\n */\nsci.core.format_stacktrace = (function sci$core$format_stacktrace(stacktrace){\nreturn sci.impl.callstack.format_stacktrace(stacktrace);\n});\n/**\n * Returns name of SCI ns as symbol.\n */\nsci.core.ns_name = (function sci$core$ns_name(sci_ns){\nreturn sci.impl.namespaces.sci_ns_name(sci_ns);\n});\nsci.core._copy_ns = (function sci$core$_copy_ns(ns_publics_map,sci_ns){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ns_map,p__58018){\nvar vec__58019 = p__58018;\nvar var_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__58019,(0),null);\nvar var$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__58019,(1),null);\nvar m = new cljs.core.Keyword(null,\"meta\",\"meta\",1499536964).cljs$core$IFn$_invoke$arity$1(var$);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ns_map,var_name,sci.core.new_var.cljs$core$IFn$_invoke$arity$3(cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(var_name),new cljs.core.Keyword(null,\"val\",\"val\",128701612).cljs$core$IFn$_invoke$arity$1(var$),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),sci_ns)));\n}),cljs.core.PersistentArrayMap.EMPTY,ns_publics_map);\n});\nsci.core.process_publics = (function sci$core$process_publics(publics,p__58022){\nvar map__58023 = p__58022;\nvar map__58023__$1 = cljs.core.__destructure_map(map__58023);\nvar exclude = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__58023__$1,new cljs.core.Keyword(null,\"exclude\",\"exclude\",-1230250334));\nvar publics__$1 = (cljs.core.truth_(exclude)?cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,publics,exclude):publics);\nreturn publics__$1;\n});\nsci.core.exclude_when_meta = (function sci$core$exclude_when_meta(publics_map,meta_fn,key_fn,val_fn,skip_keys){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ns_map,p__58024){\nvar vec__58025 = p__58024;\nvar var_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__58025,(0),null);\nvar var$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__58025,(1),null);\nvar m = (meta_fn.cljs$core$IFn$_invoke$arity$1 ? meta_fn.cljs$core$IFn$_invoke$arity$1(var$) : meta_fn.call(null,var$));\nif(cljs.core.truth_(cljs.core.some(m,skip_keys))){\nreturn ns_map;\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ns_map,(key_fn.cljs$core$IFn$_invoke$arity$1 ? key_fn.cljs$core$IFn$_invoke$arity$1(var_name) : key_fn.call(null,var_name)),(val_fn.cljs$core$IFn$_invoke$arity$2 ? val_fn.cljs$core$IFn$_invoke$arity$2(var$,m) : val_fn.call(null,var$,m)));\n}\n}),cljs.core.PersistentArrayMap.EMPTY,publics_map);\n});\nsci.core.meta_fn = (function sci$core$meta_fn(opts){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"all\",\"all\",892129742),opts)){\nreturn cljs.core.identity;\n} else {\nif(cljs.core.truth_(opts)){\nreturn (function (p1__58028_SHARP_){\nreturn cljs.core.select_keys(p1__58028_SHARP_,opts);\n});\n} else {\nreturn (function (p1__58029_SHARP_){\nreturn cljs.core.select_keys(p1__58029_SHARP_,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"no-doc\",\"no-doc\",1559921891),new cljs.core.Keyword(null,\"macro\",\"macro\",-867863404),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891)], null));\n});\n\n}\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","sci/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",13],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",["^ ","~$with-bindings","~$sci.core","~$with-out-str","^T","~$copy-var","^T","~$copy-ns","^T"],"~:excludes",["~#set",["^S","~$*2","~$pmap","~$alter-var-root","~$future","~$*1","~$create-ns","~$ns","~$*e","~$ns-name","^U","~$intern","~$with-in-str","~$binding","~$set!","~$*3","~$with-redefs"]],"~:macros",["^ ","^W",["^ ","~:arglists",["~#list",[["~$ns-sym","~$sci-ns"],["^1@","^1A","~$opts"]]],"~:doc","Returns map of names to SCI vars as a result of copying public\n  Clojure vars from ns-sym (a symbol). Attaches sci-ns (result of\n  sci/create-ns) to meta. Copies :name, :macro :doc, :no-doc\n  and :argslists metadata.\n\n  Options:\n\n  - :exclude: a seqable of names to exclude from the\n  namespace. Defaults to none.\n\n  - :copy-meta: a seqable of keywords to copy from the original var\n  meta.  Use :all instead of a seqable to copy all. Defaults\n  to [:doc :arglists :macro].\n\n  - :exclude-when-meta: seqable of keywords; vars with meta matching\n  these keys are excluded.  Defaults to [:no-doc :skip-wiki]\n\n  The selection of vars is done at compile time which is mostly\n  important for ClojureScript to not pull in vars into the compiled\n  JS. Any additional vars can be added after the fact with sci/copy-var\n  manually.\n","^7",337,"^8",3,"^6","sci/core.cljc","~:name","~$sci.core/copy-ns","~:ns","^T","~:macro",true],"^S",["^ ","^1>",["^1?",[["~$bindings-map","~$&","~$body"]]],"^1C","Macro for binding sci vars. Must be called with map of sci dynamic\n  vars to values. Used in babashka.","^7",72,"^8",3,"^6","sci/core.cljc","^1D","~$sci.core/with-bindings","^1F","^T","^1G",true],"^V",["^ ","^1>",["^1?",[["~$sym","^14"]]],"^1C","Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`.","^7",50,"^8",1,"^6","sci/core.cljc","^1D","~$sci.core/copy-var","^1F","^T","^1G",true],"^11",["^ ","^1>",["^1?",[["~$&","^1I"]]],"^1C","Like clojure.core/future but also conveys sci bindings to the thread.","^7",143,"^8",3,"^6","sci/core.cljc","^1D","~$sci.core/future","^1F","^T","^1G",true],"^U",["^ ","^1>",["^1?",[["~$&","^1I"]]],"^1C","Evaluates exprs in a context in which sci's *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.","^7",124,"^8",3,"^6","sci/core.cljc","^1D","~$sci.core/with-out-str","^1F","^T","^1G",true],"^18",["^ ","^1>",["^1?",[["~$s","~$&","^1I"]]],"^1C","Evaluates body in a context in which sci's *in* is bound to a fresh\n  StringReader initialized with the string s.","^7",114,"^8",3,"^6","sci/core.cljc","^1D","~$sci.core/with-in-str","^1F","^T","^1G",true],"^19",["^ ","^1>",["^1?",[["~$bindings","~$&","^1I"]]],"^1C","Macro for binding sci vars. Must be called with a vector of sci\n  dynamic vars to values.","^7",83,"^8",3,"^6","sci/core.cljc","^1D","~$sci.core/binding","^1F","^T","^1G",true]],"^1D","^T","~:reader-aliases",["^ "],"~:op","^1F","~:imports",null,"~:requires",["^ ","~$sci.impl.opts","^1V","~$t","~$sci.impl.types","~$sci.impl.macros","^1X","^1W","^1W","~$i","~$sci.impl.interpreter","~$vars","~$sci.impl.vars","~$sci.impl.parser","^20","~$cljs.core","^21","~$namespaces","~$sci.impl.namespaces","~$goog","^24","~$macros","^1X","^1Y","^1Y","~$sci.impl.io","^26","~$cs","~$sci.impl.callstack","^28","^28","^1[","^1[","~$sci.impl.utils","^29","~$sio","^26","~$parser","^20","~$utils","^29","^23","^23","^1B","^1V"],"~:seen",["^Y",["~:require","~:require-macros"]],"~:uses",null,"^2?",["^ ","^T","^T","^21","^21","^1X","^1X","^1Z","^1[","^22","^23","^25","^1X","^1[","^1[","^23","^23"],"~:form",["^1?",["^14","^T",["^1?",["~:refer-clojure","~:exclude",["^S","^18","^U","^1<","^19","^11","^[","^10","^17","^14","^13","^1:","^12","^Z","^1;","^15","^16"]]],["^1?",["^2>",["^28","~:as","^27"],["^1Y","^2D","~$i"],["^26","^2D","^2:"],["^1X","^2D","^25"],["^23","^2D","^22"],["^1V","^2D","^1B"],["^20","^2D","^2;"],["^1W","^2D","~$t"],["^29","^2D","^2<"],["^1[","^2D","^1Z"]]],["^1?",["^2?",["^T","~:refer",["^S","^U","^V","^W"]]]]]],"~:flags",["^ ","^2>",["^Y",[]],"^2?",["^Y",[]]],"~:js-deps",["^ "],"~:deps",["^24","^21","^28","^1Y","^26","^1X","^23","^1V","^20","^1W","^29","^1["]],"^1F","^T","~:resource-id",["~:shadow.build.classpath/resource","sci/core.cljc"],"~:compiled-at",1666857673019,"^1R",["^ ","^1V","^1V","~$t","^1W","^1X","^1X","^1W","^1W","~$i","^1Y","^1Z","^1[","^20","^20","^21","^21","^22","^23","^24","^24","^25","^1X","^1Y","^1Y","^26","^26","^27","^28","^28","^28","^1[","^1[","^29","^29","^2:","^26","^2;","^20","^2<","^29","^23","^23","^T","^T","^1B","^1V"],"~:resource-name","sci/core.cljc","~:warnings",[],"~:source","(ns sci.core\n  (:refer-clojure :exclude [with-bindings with-in-str with-out-str\n                            with-redefs binding future pmap alter-var-root\n                            intern ns create-ns set! *1 *2 *3 *e\n                            ns-name])\n  (:require\n   [sci.impl.callstack :as cs]\n   [sci.impl.interpreter :as i]\n   [sci.impl.io :as sio]\n   [sci.impl.macros :as macros]\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.opts :as opts]\n   [sci.impl.parser :as parser]\n   [sci.impl.types :as t]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars])\n  #?(:cljs (:require-macros\n            [sci.core :refer [with-bindings with-out-str copy-var copy-ns]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn new-var\n  \"Returns a new sci var.\"\n  ([name] (doto (new-var name nil nil)\n            (vars/unbind)))\n  ([name init-val] (new-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar. init-val name meta false)))\n\n(defn new-dynamic-var\n  \"Same as new-var but adds :dynamic true to meta.\"\n  ([name] (doto (new-dynamic-var name nil nil)\n            (vars/unbind)))\n  ([name init-val] (new-dynamic-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar. init-val name (assoc meta :dynamic true) false)))\n\n(defn set!\n  \"Establish thread local binding of dynamic var\"\n  [dynamic-var v]\n  (t/setVal dynamic-var v))\n\n(defn new-macro-var\n  \"Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself.\"\n  ([name init-val] (new-macro-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar.\n                         (vary-meta init-val\n                                    assoc :sci/macro true)\n                         name (assoc meta :macro true) false)))\n\n(defmacro copy-var\n  \"Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`.\"\n  ([sym ns]\n   `(let [ns# ~ns\n          var# (var ~sym)\n          val# (deref var#)\n          m# (-> var# meta)\n          ns-name# (vars/getName ns#)\n          name# (:name m#)\n          name-sym# (symbol (str ns-name#) (str name#))\n          new-m# {:doc (:doc m#)\n                  :name name#\n                  :arglists (:arglists m#)\n                  :ns ns#}]\n      (cond (:dynamic m#)\n            (new-dynamic-var name# val# new-m#)\n            (:macro m#)\n            (new-macro-var name# val# new-m#)\n            :else (new-var name# val# new-m#)))))\n\n(macros/deftime\n  (defmacro with-bindings\n    \"Macro for binding sci vars. Must be called with map of sci dynamic\n  vars to values. Used in babashka.\"\n    [bindings-map & body]\n    `(let [bm# ~bindings-map]\n       (assert (map? bm#))\n       (vars/push-thread-bindings bm#) ;; important: outside try\n       (try\n         (do ~@body)\n         (finally (vars/pop-thread-bindings)))))\n\n  (defmacro binding\n    \"Macro for binding sci vars. Must be called with a vector of sci\n  dynamic vars to values.\"\n    [bindings & body]\n    (assert (vector? bindings))\n    (assert (even? (count bindings)))\n    `(with-bindings ~(apply hash-map bindings)\n       (do ~@body))))\n\n;; I/O\n(def in \"Sci var that represents sci's `clojure.core/*in*`\" sio/in)\n(def out \"Sci var that represents sci's `clojure.core/*out*`\" sio/out)\n(def err \"Sci var that represents sci's `clojure.core/*err*`\" sio/err)\n(def ns \"Sci var that represents sci's `clojure.core/*ns*`\" vars/current-ns)\n(def file \"Sci var that represents sci's `clojure.core/*file*`\" vars/current-file)\n(def print-length \"Sci var that represents sci's `clojure.core/*print-length*`\" sio/print-length)\n(def print-level \"Sci var that represents sci's `clojure.core/*print-level*`\" sio/print-level)\n(def print-meta \"Sci var that represents sci's `clojure.core/*print-meta*`\" sio/print-meta)\n(def print-readably \"Sci var that represents sci's `clojure.core/*print-readably*`\" sio/print-readably)\n#?(:cljs (def print-fn \"Sci var that represents sci's `cljs.core/*print-fn*`\" sio/print-fn))\n#?(:cljs (def print-newline \"Sci var that represents sci's `cljs.core/*print-newline*`\" sio/print-newline))\n\n(def *1 namespaces/*1)\n(def *2 namespaces/*2)\n(def *3 namespaces/*3)\n(def *e namespaces/*e)\n\n;; REPL variables\n\n\n(macros/deftime\n  (defmacro with-in-str\n    \"Evaluates body in a context in which sci's *in* is bound to a fresh\n  StringReader initialized with the string s.\"\n    [s & body]\n    `(let [in# (-> (java.io.StringReader. ~s)\n                   (clojure.lang.LineNumberingPushbackReader.))]\n       (with-bindings {in in#}\n         (do ~@body)))))\n\n(macros/deftime\n  (defmacro with-out-str\n    \"Evaluates exprs in a context in which sci's *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.\"\n    [& body]\n    (macros/? :clj\n              `(let [out# (java.io.StringWriter.)]\n                 (with-bindings {out out#}\n                   (do ~@body)\n                   (str out#)))\n              :cljs\n              `(let [sb# (goog.string/StringBuffer.)]\n                 (cljs.core/binding []\n                   (with-bindings {sci.core/print-newline true\n                                   sci.core/print-fn (fn [x#] (.append sb# x#))}\n                     (do ~@body)\n                     (str sb#)))))))\n\n(macros/deftime\n  (defmacro future\n    \"Like clojure.core/future but also conveys sci bindings to the thread.\"\n    [& body]\n    `(let [f# (-> (fn [] ~@body)\n                  (vars/binding-conveyor-fn))]\n       (future-call f#))))\n\n#?(:clj (defn pmap\n          \"Like clojure.core/pmap but also conveys sci bindings to the threads.\"\n          ([f coll]\n           (let [n (+ 2 (.. Runtime getRuntime availableProcessors))\n                 rets (map #(future (f %)) coll)\n                 step (fn step [[x & xs :as vs] fs]\n                        (lazy-seq\n                         (if-let [s (seq fs)]\n                           (cons (deref x) (step xs (rest s)))\n                           (map deref vs))))]\n             (step rets (drop n rets))))\n          ([f coll & colls]\n           (let [step (fn step [cs]\n                        (lazy-seq\n                         (let [ss (map seq cs)]\n                           (when (every? identity ss)\n                             (cons (map first ss) (step (map rest ss)))))))]\n             (pmap #(apply f %) (step (cons coll colls)))))))\n\n(defn alter-var-root\n  \"Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args.\"\n  [v f & args]\n  (apply vars/alter-var-root v f args))\n\n(defn intern\n  \"Finds or creates a sci var named by the symbol name in the namespace\n  ns (which can be a symbol or a sci namespace), setting its root\n  binding to val if supplied. The namespace must exist in the ctx. The\n  sci var will adopt any metadata from the name symbol.  Returns the\n  sci var.\"\n  ([ctx sci-ns name]\n   (namespaces/sci-intern ctx sci-ns name))\n  ([ctx sci-ns name val]\n   (namespaces/sci-intern ctx sci-ns name val)))\n\n(defn eval-string\n  \"Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions.\"\n  ([s] (eval-string s nil))\n  ([s opts]\n   (i/eval-string s opts)))\n\n(defn init\n  \"Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future.\"\n  [opts]\n  (opts/init opts))\n\n(defn merge-opts\n  \"Updates a context with opts merged in and returns it.\"\n  [ctx opts]\n  (opts/merge-opts ctx opts))\n\n(defn fork\n  \"Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context.\"\n  [ctx]\n  (update ctx :env (fn [env] (atom @env))))\n\n(defn eval-string*\n  \"Evaluates string `s` in the context of `ctx` (as produced with\n  `init`).\"\n  [ctx s]\n  (sci.impl.interpreter/eval-string* ctx s))\n\n(defn create-ns\n  \"Creates namespace object. Can be used in var metadata.\"\n  ([sym] (create-ns sym nil))\n  ([sym meta]\n   (vars/->SciNamespace sym meta)))\n\n(defn parse-string\n  \"Parses string `s` in the context of `ctx` (as produced with\n  `init`).\"\n  ([ctx s]\n   (parser/parse-string ctx s)))\n\n(defn reader\n  \"Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader.\"\n  [x]\n  (parser/reader x))\n\n(defn get-line-number [reader]\n  (parser/get-line-number reader))\n\n(defn get-column-number [reader]\n  (parser/get-column-number reader))\n\n(defn parse-next\n  \"Parses next form from reader\"\n  ([ctx reader] (parse-next ctx reader {}))\n  ([ctx reader opts]\n   (let [v (parser/parse-next ctx reader opts)]\n     (if (utils/kw-identical? parser/eof v)\n       (or (get opts :eof)\n           ::eof)\n       v))))\n\n(defn eval-form\n  \"Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`\"\n  [ctx form]\n  (let [ctx (assoc ctx :id (or (:id ctx) (gensym)))]\n    (i/eval-form ctx form)))\n\n(defn stacktrace\n  \"Returns list of stacktrace element maps from exception, if available.\"\n  [ex]\n  (some-> ex ex-data :sci.impl/callstack cs/stacktrace))\n\n(defn format-stacktrace\n  \"Returns a list of formatted stack trace elements as strings from stacktrace.\"\n  [stacktrace]\n  (cs/format-stacktrace stacktrace))\n\n(defn ns-name\n  \"Returns name of SCI ns as symbol.\"\n  [sci-ns]\n  (namespaces/sci-ns-name sci-ns))\n\n(defn -copy-ns\n  {:no-doc true}\n  [ns-publics-map sci-ns]\n  (reduce (fn [ns-map [var-name var]]\n            (let [m (:meta var)]\n              (assoc ns-map var-name\n                     (new-var (symbol var-name) (:val var)\n                              (assoc m :ns sci-ns)))))\n          {}\n          ns-publics-map))\n\n(defn- process-publics [publics {:keys [exclude]}]\n  (let [publics (if exclude (apply dissoc publics exclude) publics)]\n    publics))\n\n(defn- exclude-when-meta [publics-map meta-fn key-fn val-fn skip-keys ]\n  (reduce (fn [ns-map [var-name var]]\n            (let [m (meta-fn var)]\n              (if (some m skip-keys)\n                ns-map\n                (assoc ns-map (key-fn var-name) (val-fn var m)))))\n          {}\n          publics-map))\n\n(defn- meta-fn [opts]\n  (cond (= :all opts) identity\n        opts #(select-keys %  opts)\n        :else #(select-keys % [:arglists\n                               :no-doc\n                               :macro\n                               :doc])))\n\n(macros/deftime\n  (def ^:private cljs-ns-publics\n    (try (resolve 'cljs.analyzer.api/ns-publics)\n         (catch #?(:clj Exception\n                   :cljs :default) _ nil)))\n  (defmacro copy-ns\n    \"Returns map of names to SCI vars as a result of copying public\n  Clojure vars from ns-sym (a symbol). Attaches sci-ns (result of\n  sci/create-ns) to meta. Copies :name, :macro :doc, :no-doc\n  and :argslists metadata.\n\n  Options:\n\n  - :exclude: a seqable of names to exclude from the\n  namespace. Defaults to none.\n\n  - :copy-meta: a seqable of keywords to copy from the original var\n  meta.  Use :all instead of a seqable to copy all. Defaults\n  to [:doc :arglists :macro].\n\n  - :exclude-when-meta: seqable of keywords; vars with meta matching\n  these keys are excluded.  Defaults to [:no-doc :skip-wiki]\n\n  The selection of vars is done at compile time which is mostly\n  important for ClojureScript to not pull in vars into the compiled\n  JS. Any additional vars can be added after the fact with sci/copy-var\n  manually.\n\"\n    ([ns-sym sci-ns] `(copy-ns ~ns-sym ~sci-ns nil))\n    ([ns-sym sci-ns opts]\n     (macros/? :clj (let [publics-map (ns-publics ns-sym)\n                          publics-map (process-publics publics-map opts)\n                          mf (meta-fn (:copy-meta opts))\n                          publics-map (exclude-when-meta\n                                       publics-map\n                                       meta\n                                       (fn [k]\n                                         (list 'quote k))\n                                       (fn [var m]\n                                         {:name (list 'quote (:name m))\n                                          :val (deref var)\n                                          :meta (list 'quote (mf m))})\n                                       (or (:exclude-when-meta opts)\n                                           [:no-doc :skip-wiki]))]\n                      `(-copy-ns ~publics-map ~sci-ns))\n               :cljs (let [publics-map (cljs-ns-publics ns-sym)\n                           publics-map (process-publics publics-map opts)\n                           mf (meta-fn (:copy-meta opts))\n                           publics-map (exclude-when-meta\n                                        publics-map\n                                        :meta\n                                        (fn [k]\n                                          (list 'quote k))\n                                        (fn [var m]\n                                          {:name (list 'quote (:name var))\n                                           :val (:name var)\n                                           :meta (mf m)})\n                                        (or (:exclude-when-meta opts)\n                                            [:no-doc :skip-wiki]))]\n                       `(-copy-ns ~publics-map ~sci-ns))))))\n\n;;;; Scratch\n","~:reader-features",["^Y",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__57965","sci.core/new-var","js/Error","name","G__57967","sci.core.new_var","sci.impl.vars/unbind","init-val","cljs.core/meta","meta","sci.impl.vars/SciVar","G__57984","sci.core/new-dynamic-var","G__57986","sci.core.new_dynamic_var","cljs.core.assoc","sci.core/set!","dynamic-var","v","sci.impl.types/setVal","G__57989","sci.core/new-macro-var","sci.core.new_macro_var","cljs.core.vary_meta","cljs.core/assoc","sci.core/in","sci.impl.io/in","sci.core/out","sci.impl.io/out","sci.core/err","sci.impl.io/err","sci.core/ns","sci.impl.vars/current-ns","sci.core/file","sci.impl.vars/current-file","sci.core/print-length","sci.impl.io/print-length","sci.core/print-level","sci.impl.io/print-level","sci.core/print-meta","sci.impl.io/print-meta","sci.core/print-readably","sci.impl.io/print-readably","sci.core/print-fn","sci.impl.io/print-fn","sci.core/print-newline","sci.impl.io/print-newline","sci.core/*1","sci.impl.namespaces/*1","sci.core/*2","sci.impl.namespaces/*2","sci.core/*3","sci.impl.namespaces/*3","sci.core/*e","sci.impl.namespaces/*e","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.core/alter-var-root","seq58006","G__58007","cljs.core/first","cljs.core/next","G__58008","self__5754__auto__","f","args","cljs.core.apply","sci.impl.vars/alter-var-root","G__58010","sci.core/intern","ctx","sci-ns","sci.impl.namespaces.sci_intern","val","G__58012","sci.core/eval-string","s","sci.core.eval_string","opts","sci.impl.interpreter.eval_string","sci.core/init","sci.impl.opts/init","sci.core/merge-opts","sci.impl.opts/merge-opts","sci.core/fork","cljs.core.update","env","cljs.core/deref","cljs.core.atom","sci.core/eval-string*","sci.impl.interpreter/eval-string*","G__58014","sci.core/create-ns","sym","sci.core.create_ns","sci.impl.vars/->SciNamespace","sci.core/parse-string","sci.impl.parser/parse-string","sci.core/reader","x","sci.impl.parser/reader","sci.core/get-line-number","reader","sci.impl.parser/get-line-number","sci.core/get-column-number","sci.impl.parser/get-column-number","G__58016","sci.core/parse-next","sci.core.parse_next","sci.impl.parser.parse_next","sci.impl.utils/kw-identical?","sci.impl.parser/eof","or__5045__auto__","cljs.core.get","sci.core/eval-form","form","cljs.core.gensym","sci.impl.interpreter/eval-form","sci.core/stacktrace","ex","G__58017","cljs.core/ex-data","sci.impl.callstack/stacktrace","sci.core/format-stacktrace","stacktrace","sci.impl.callstack/format-stacktrace","sci.core/ns-name","sci.impl.namespaces/sci-ns-name","sci.core/-copy-ns","ns-publics-map","cljs.core.reduce","p__58018","vec__58019","cljs.core.nth","ns-map","var-name","var","m","cljs.core.symbol","p__58022","map__58023","cljs.core/--destructure-map","sci.core/process-publics","publics","exclude","cljs.core/dissoc","sci.core/exclude-when-meta","publics-map","meta-fn","key-fn","val-fn","skip-keys","p__58024","vec__58025","cljs.core/some","sci.core/meta-fn","p1__58028#","p1__58029#","cljs.core._EQ_","cljs.core/identity","cljs.core/select-keys"]],"~:used-vars",["^Y",["~$cljs.core/--destructure-map","~$sci.core/ns-name","~$sci.impl.parser/parse-next","~$sci.impl.io/print-newline","~$sci.impl.namespaces/sci-intern","~$sci.core/eval-string","~$sci.core/new-dynamic-var","~$sci.core/print-fn","~$sci.core/ns","~$sci.impl.namespaces/*e","~$cljs.core/=","~$sci.impl.vars/alter-var-root","~$sci.core/*3","~$sci.core/meta-fn","~$sci.impl.vars/current-ns","~$sci.impl.parser/get-line-number","~$sci.core/err","~$cljs.core/IndexedSeq","~$cljs.core/deref","~$sci.impl.vars/current-file","~$sci.impl.io/in","~$cljs.core/reduce","~$cljs.core/apply","~$sci.core/exclude-when-meta","~$cljs.core/identity","~$sci.impl.namespaces/*3","~$sci.impl.callstack/format-stacktrace","~$sci.impl.vars/->SciNamespace","~$cljs.core/dissoc","~$cljs.core/atom","~$sci.impl.namespaces/*2","~$sci.impl.parser/parse-string","~$sci.core/eval-string*","~$sci.impl.parser/get-column-number","~$sci.core/get-line-number","~$sci.impl.opts/init","~$sci.core/*2","~$sci.core/-copy-ns","~$sci.impl.types/setVal","~$sci.impl.io/print-meta","~$sci.core/parse-next","~$sci.core/set!","~$sci.core/print-level","~$sci.core/get-column-number","~$sci.impl.callstack/stacktrace","~$sci.core/parse-string","~$sci.impl.io/print-readably","~$cljs.core/vary-meta","~$cljs.core/update","~$sci.core/print-length","~$sci.core/eval-form","~$sci.core/new-var","~$sci.core/*1","~$sci.core/reader","~$sci.core/print-meta","~$sci.core/init","~$sci.core/stacktrace","~$cljs.core/get","~$sci.impl.io/print-level","~$sci.impl.vars/SciVar","~$sci.core/print-readably","~$sci.impl.namespaces/*1","~$sci.impl.io/err","~$sci.impl.parser/reader","~$cljs.core/symbol","~$sci.impl.vars/unbind","~$sci.core/print-newline","~$sci.core/format-stacktrace","~$sci.core/alter-var-root","~$cljs.core/nth","~$cljs.core/meta","~$sci.impl.opts/merge-opts","~$sci.core/out","~$cljs.core/next","~$sci.impl.interpreter/eval-string","~$cljs.core/select-keys","~$sci.impl.io/out","~$cljs.core/assoc","~$sci.impl.parser/eof","~$sci.impl.io/print-length","~$sci.core/in","~$sci.core/create-ns","~$sci.core/intern","~$cljs.core/ex-data","~$sci.impl.utils/kw-identical?","~$sci.core/merge-opts","~$sci.impl.namespaces/sci-ns-name","~$cljs.core/gensym","~$sci.impl.interpreter/eval-form","~$cljs.core/first","~$sci.core/file","~$sci.core/*e","~$sci.core/fork","~$js/Error","~$sci.core/new-macro-var","~$cljs.core/some","~$sci.impl.interpreter/eval-string*","~$sci.impl.io/print-fn","~$sci.core/process-publics"]]],"~:cache-keys",["~#cmap",[["^2J","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^Y",[]],"~:deps-syms",["^24","~$goog.dom.HtmlElement"]]],["^2J","edamame/core.cljc"],["b54bd287c84a2627384be29d09c4652c7631d9fa","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^I","~$edamame.impl.parser"]]],["^2J","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","~$clojure.string","~$goog.string"]]],["^2J","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^2J","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5B"]]],["^2J","sci/impl/reify.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^1W"]]],["^2J","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5C"]]],["^2J","sci/impl/unrestrict.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21"]]],["^2J","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","sci/impl/namespaces.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","~$cljs.reader","~$clojure.set","^5=","~$clojure.walk","~$sci.impl.core-protocols","~$sci.impl.hierarchies","^26","^1X","~$sci.impl.for-macro","~$sci.impl.doseq-macro","~$sci.impl.multimethods","^20","~$sci.impl.protocols","~$sci.impl.read","~$sci.impl.records","~$sci.impl.reify","^1W","^29","^1["]]],["^2J","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^E","^I","^?","^C","~$cljs.tools.reader","^5>","~$goog.string.StringBuffer"]]],["^2J","sci/impl/io.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5>","~$sci.impl.unrestrict","^29","^1["]]],["^2J","sci/impl/parser.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^I","~$edamame.core","~$sci.impl.interop","^29","^1["]]],["^2J","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21"]]],["^2J","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^I","^?","^C","^E","^5?","^5>","^5W"]]],["^2J","edamame/impl/parser.cljc"],["b54bd287c84a2627384be29d09c4652c7631d9fa","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^K","^I","~$cljs.tools.reader.impl.inspect","^?","^C","~$cljs.tagged-literals","^5=","~$edamame.impl.read-fn","~$edamame.impl.syntax-quote","^5W"]]],["^2J","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","sci/impl/destructure.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21"]]],["^2J","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5C"]]],["^2J","sci/impl/macros.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^2J","edamame/impl/syntax_quote.cljc"],["b54bd287c84a2627384be29d09c4652c7631d9fa","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5="]]],["^2J","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5C","~$goog.reflect"]]],["^2J","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5C","~$goog.fs.blob","^5D","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5F","^5G","^5H","^5I"]]],["^2J","sci/impl/doseq_macro.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^29"]]],["^2J","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5H","~$goog.html.SafeUrl","^5I","^5C","^5B"]]],["^2J","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5C","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^66","~$goog.html.SafeStyle","^68","^5E","~$goog.html.uncheckedconversions","^5H","^5B"]]],["^2J","sci/impl/read.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^I","^26","^20","^29","^1["]]],["^2J","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21"]]],["^2J","sci/impl/for_macro.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^29"]]],["^2J","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5H","^5F","^5G","^66","^6<","~$goog.html.SafeStyleSheet","^68","~$goog.dom.TagName","^5E","^5I","^5C","~$goog.labs.userAgent.browser","^5?","^5@","^5B","~$goog.dom.tags","^67"]]],["^2J","sci/impl/types.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21"]]],["^2J","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5@"]]],["^2J","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","cljs/reader.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5@","^5V","^K","^5W"]]],["^2J","sci/impl/hierarchies.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^1["]]],["^2J","sci/impl/fns.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","~$sci.impl.evaluator","~$sci.impl.faster","^1X","^1W","^29","^1["]]],["^2J","sci/impl/load.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5=","^29","^1["]]],["^2J","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^2J","sci/impl/vars.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^1X","^1W","^5X","~$sci.lang"]]],["^2J","cljs/tagged_literals.cljc"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5J"]]],["^2J","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5?","^5C","~$goog.collections.maps","^5>","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^2J","edamame/impl/read_fn.cljc"],["b54bd287c84a2627384be29d09c4652c7631d9fa","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21"]]],["^2J","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","sci/impl/resolve.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5=","^6B","^6C","^5Z","^5T","^29","^1["]]],["^2J","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","sci/impl/interpreter.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^I","~$sci.impl.analyzer","^6B","^1V","^20","^1W","^29","^1["]]],["^2J","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","sci/impl/core_protocols.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^1W","^1["]]],["^2J","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",[]]],["^2J","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5?","^5@"]]],["^2J","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^I","^5=","^5["]]],["^2J","sci/impl/faster.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^1X"]]],["^2J","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5>","^5W"]]],["^2J","sci/impl/callstack.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5=","^1["]]],["^2J","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","~$goog.dom.safe","^6=","^5H","^5B"]]],["^2J","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","~$goog.labs.userAgent","^5B"]]],["^2J","sci/core.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^28","^1Y","^26","^1X","^23","^1V","^20","^1W","^29","^1["]]],["^2J","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^?","^5>","^5W"]]],["^2J","sci/impl/multimethods.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5N"]]],["^2J","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","sci/impl/opts.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5>","^23","^29","^1[","^1W","^6F"]]],["^2J","sci/impl/utils.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5=","^1W","^1["]]],["^2J","sci/impl/protocols.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5Q","^1W","^29","^1["]]],["^2J","sci/impl/evaluator.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5=","^6C","^5Z","^1X","^5T","^1W","^29","^1["]]],["^2J","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5C","^6;","^66","^6<","^6>","^68","^5E","^5H","^5B","^5F"]]],["^2J","sci/lang.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21"]]],["^2J","sci/impl/analyzer.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5=","^5@","~$sci.impl.destructure","^6B","^6C","~$sci.impl.fns","^5Z","~$sci.impl.load","^5T","~$sci.impl.resolve","^1W","^29","^1[","^60"]]],["^2J","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^E","^I","^?"]]],["^2J","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24"]]],["^2J","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","~$goog.math.Long","~$goog.math.Integer","^5>","^5@","^5?","~$goog.Uri","^5W"]]],["^2J","sci/impl/records.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5=","^1W","^29","^1["]]],["^2J","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5H","^5I","^67","^5C"]]],["^2J","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5H","^6<","^5I","^5@","^5C","^5B"]]],["^2J","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^64"]]],["^2J","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21"]]],["^2J","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5C","^5>"]]],["^2J","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^5C","^5I"]]],["^2J","sci/impl/interop.cljc"],["cbcc4315d53fbc459974b9d4c5427cac9f667b74","^57",["^ ","^58",null,"^59",["^Y",[]],"^5:",["^24","^21","^5@","^5=","^1["]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/namespaces.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/core.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/interop.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/vars.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/load.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/doseq_macro.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/for_macro.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/macros.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/callstack.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/proxy.clj",1666857315000,"jar:file:/Users/aleksey/.m2/repository/borkdude/edamame/0.0.18/edamame-0.0.18.jar!/edamame/core.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/protocols.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/fns.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/records.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/io.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/faster.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/analyzer.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/opts.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/multimethods.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/resolve.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/commons.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/borkdude/edamame/0.0.18/edamame-0.0.18.jar!/edamame/impl/parser.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/read.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/evaluator.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/utils.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/hierarchies.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/core_protocols.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/types.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/parser.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/interpreter.cljc",1666857315000,"jar:file:/Users/aleksey/.m2/repository/org/babashka/sci/0.2.8/sci-0.2.8.jar!/sci/impl/reify.cljc",1666857315000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","sci/core.cljc","^7",1,"^8",5,"^9",1,"^:",13],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q"],"^R",["^ ","^S","^T","^U","^T","^V","^T","^W","^T"],"^X",["^Y",["^S","^Z","^[","^10","^11","^12","^13","^14","^15","^16","^U","^17","^18","^19","^1:","^1;","^1<"]],"^1=",["^ ","^W",["^ ","^1>",["^1?",[["^1@","^1A"],["^1@","^1A","^1B"]]],"^1C","Returns map of names to SCI vars as a result of copying public\n  Clojure vars from ns-sym (a symbol). Attaches sci-ns (result of\n  sci/create-ns) to meta. Copies :name, :macro :doc, :no-doc\n  and :argslists metadata.\n\n  Options:\n\n  - :exclude: a seqable of names to exclude from the\n  namespace. Defaults to none.\n\n  - :copy-meta: a seqable of keywords to copy from the original var\n  meta.  Use :all instead of a seqable to copy all. Defaults\n  to [:doc :arglists :macro].\n\n  - :exclude-when-meta: seqable of keywords; vars with meta matching\n  these keys are excluded.  Defaults to [:no-doc :skip-wiki]\n\n  The selection of vars is done at compile time which is mostly\n  important for ClojureScript to not pull in vars into the compiled\n  JS. Any additional vars can be added after the fact with sci/copy-var\n  manually.\n","^7",337,"^8",3,"^6","sci/core.cljc","^1D","^1E","^1F","^T","^1G",true],"^S",["^ ","^1>",["^1?",[["^1H","~$&","^1I"]]],"^1C","Macro for binding sci vars. Must be called with map of sci dynamic\n  vars to values. Used in babashka.","^7",72,"^8",3,"^6","sci/core.cljc","^1D","^1J","^1F","^T","^1G",true],"^V",["^ ","^1>",["^1?",[["^1K","^14"]]],"^1C","Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`.","^7",50,"^8",1,"^6","sci/core.cljc","^1D","^1L","^1F","^T","^1G",true],"^11",["^ ","^1>",["^1?",[["~$&","^1I"]]],"^1C","Like clojure.core/future but also conveys sci bindings to the thread.","^7",143,"^8",3,"^6","sci/core.cljc","^1D","^1M","^1F","^T","^1G",true],"^U",["^ ","^1>",["^1?",[["~$&","^1I"]]],"^1C","Evaluates exprs in a context in which sci's *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.","^7",124,"^8",3,"^6","sci/core.cljc","^1D","^1N","^1F","^T","^1G",true],"^18",["^ ","^1>",["^1?",[["~$s","~$&","^1I"]]],"^1C","Evaluates body in a context in which sci's *in* is bound to a fresh\n  StringReader initialized with the string s.","^7",114,"^8",3,"^6","sci/core.cljc","^1D","^1O","^1F","^T","^1G",true],"^19",["^ ","^1>",["^1?",[["^1P","~$&","^1I"]]],"^1C","Macro for binding sci vars. Must be called with a vector of sci\n  dynamic vars to values.","^7",83,"^8",3,"^6","sci/core.cljc","^1D","^1Q","^1F","^T","^1G",true]],"^1D","^T","^1R",["^ "],"^1T",null,"^1U",["^ ","^1V","^1V","~$t","^1W","^1X","^1X","^1W","^1W","~$i","^1Y","^1Z","^1[","^20","^20","^21","^21","^22","^23","^24","^24","^25","^1X","^1Y","^1Y","^26","^26","^27","^28","^28","^28","^1[","^1[","^29","^29","^2:","^26","^2;","^20","^2<","^29","^23","^23","^1B","^1V"],"^2=",["^Y",["^2>","^2?"]],"~:shadow/js-access-global",["^Y",["Error"]],"^2@",null,"~:defs",["^ ","~$print-newline",["^ ","^5",["^ ","^6","sci/core.cljc","^7",103,"^8",15,"^9",103,"^:",28],"^1D","^4@","^6","sci/core.cljc","^:",28,"^8",10,"^7",103,"^9",103,"~:tag","^49","^1C","Sci var that represents sci's `cljs.core/*print-newline*`"],"~$fork",["^ ","~:protocol-inline",null,"^5",["^ ","^6","sci/core.cljc","^7",229,"^8",7,"^9",229,"^:",11,"^1>",["^1?",["~$quote",["^1?",[["~$ctx"]]]]],"^1C","Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context."],"^1D","^4Z","^6","sci/core.cljc","^:",11,"~:method-params",["^1?",[["^8K"]]],"~:protocol-impl",null,"~:arglists-meta",["^1?",[null,null]],"^8",1,"~:variadic?",false,"^7",229,"~:ret-tag",["^Y",["~$clj","~$any"]],"^9",229,"~:max-fixed-arity",1,"~:fn-var",true,"^1>",["^1?",["^8J",["^1?",[["^8K"]]]]],"^1C","Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context."],"~$parse-string",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",248,"^8",7,"^9",248,"^:",19,"^1>",["^1?",["^8J",["^1?",[["^8K","~$s"]]]]],"^1C","Parses string `s` in the context of `ctx` (as produced with\n  `init`)."],"^1D","^3W","^6","sci/core.cljc","^:",19,"^8L",["^1?",[["^8K","~$s"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",248,"^8P",["^Y",["^8R","~$clj-nil"]],"^9",248,"^8S",2,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^8K","~$s"]]]]],"^1C","Parses string `s` in the context of `ctx` (as produced with\n  `init`)."],"~$new-var",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",22,"^8",7,"^9",22,"^:",14,"^1>",["^1?",["^8J",["^1?",[["~$name"],["^8X","~$init-val"],["^8X","^8Y","~$meta"]]]]],"^1C","Returns a new sci var.","~:top-fn",["^ ","^8O",false,"~:fixed-arity",3,"^8S",3,"^8L",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]],"^1>",["^1?",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]]],"^8N",["^1?",[null,null,null]]]],"^1D","^41","^6","sci/core.cljc","^:",14,"^8[",["^ ","^8O",false,"^90",3,"^8S",3,"^8L",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]],"^1>",["^1?",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]]],"^8N",["^1?",[null,null,null]]],"^8L",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]],"^8M",null,"^90",3,"^8N",["^1?",[null,null,null]],"^8",1,"^8O",false,"~:methods",[["^ ","^90",1,"^8O",false,"^8G","^8R"],["^ ","^90",2,"^8O",false,"^8G","^8R"],["^ ","^90",3,"^8O",false,"^8G","^49"]],"^7",22,"^9",22,"^8S",3,"^8T",true,"^1>",["^1?",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]]],"^1C","Returns a new sci var."],"^Z",["^ ","^1D","^3N","^6","sci/core.cljc","^7",106,"^8",1,"^9",106,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",106,"^8",6,"^9",106,"^:",8],"^8G","^49"],"~$-copy-ns",["^ ","~:no-doc",true,"^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",300,"^8",7,"^9",300,"^:",15,"^1>",["^1?",["^8J",["^1?",[["~$ns-publics-map","^1A"]]]]],"^93",true],"^1D","^3O","^6","sci/core.cljc","^:",15,"^8L",["^1?",[["^94","^1A"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",300,"^8P",["^Y",[null,"^8R"]],"^9",300,"^8S",2,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^94","^1A"]]]]]],"~$in",["^ ","^1D","^4N","^6","sci/core.cljc","^7",93,"^8",1,"^9",93,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",93,"^8",6,"^9",93,"^:",8],"^1C","Sci var that represents sci's `clojure.core/*in*`"],"^10",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",169,"^8",7,"^9",169,"^:",21,"^1>",["^1?",["^8J",["^1?",[["~$v","~$f","~$&","~$args"]]]]],"^1C","Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args.","^8[",["^ ","^8O",true,"^90",2,"^8S",2,"^8L",[["^1?",["~$v","~$f","^96"]]],"^1>",["^1?",[["~$v","~$f","~$&","^96"]]],"^8N",["^1?",[null]]]],"^1D","^4B","^6","sci/core.cljc","^:",21,"^8[",["^ ","^8O",true,"^90",2,"^8S",2,"^8L",[["^1?",["~$v","~$f","^96"]]],"^1>",["^1?",[["~$v","~$f","~$&","^96"]]],"^8N",["^1?",[null]]],"^8L",[["^1?",["~$v","~$f","^96"]]],"^8M",null,"^90",2,"^8N",["^1?",[null]],"^8",1,"^8O",true,"^91",[["^ ","^90",2,"^8O",true,"^8G","^8R"]],"^7",169,"^8P","^8R","^9",169,"^8S",2,"^8T",true,"^1>",["^1?",[["~$v","~$f","~$&","^96"]]],"^1C","Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args."],"~$new-macro-var",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",41,"^8",7,"^9",41,"^:",20,"^1>",["^1?",["^8J",["^1?",[["^8X","^8Y"],["^8X","^8Y","^8Z"]]]]],"^1C","Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself.","^8[",["^ ","^8O",false,"^90",3,"^8S",3,"^8L",[["^8X","^8Y"],["^8X","^8Y","^8Z"]],"^1>",["^1?",[["^8X","^8Y"],["^8X","^8Y","^8Z"]]],"^8N",["^1?",[null,null]]]],"^1D","^50","^6","sci/core.cljc","^:",20,"^8[",["^ ","^8O",false,"^90",3,"^8S",3,"^8L",[["^8X","^8Y"],["^8X","^8Y","^8Z"]],"^1>",["^1?",[["^8X","^8Y"],["^8X","^8Y","^8Z"]]],"^8N",["^1?",[null,null]]],"^8L",[["^8X","^8Y"],["^8X","^8Y","^8Z"]],"^8M",null,"^90",3,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^91",[["^ ","^90",2,"^8O",false,"^8G","^8R"],["^ ","^90",3,"^8O",false,"^8G","^49"]],"^7",41,"^9",41,"^8S",3,"^8T",true,"^1>",["^1?",[["^8X","^8Y"],["^8X","^8Y","^8Z"]]],"^1C","Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself."],"~$exclude-when-meta",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",315,"^8",8,"^9",315,"^:",25,"~:private",true,"^1>",["^1?",["^8J",["^1?",[["~$publics-map","~$meta-fn","~$key-fn","~$val-fn","~$skip-keys"]]]]]],"^99",true,"^1D","^3A","^6","sci/core.cljc","^:",25,"^8L",["^1?",[["^9:","^9;","^9<","^9=","^9>"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",315,"^8P",["^Y",[null,"^8R"]],"^9",315,"^8S",5,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^9:","^9;","^9<","^9=","^9>"]]]]]],"^12",["^ ","^1D","^42","^6","sci/core.cljc","^7",105,"^8",1,"^9",105,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",105,"^8",6,"^9",105,"^:",8],"^8G","^49"],"~$print-meta",["^ ","^5",["^ ","^6","sci/core.cljc","^7",100,"^8",6,"^9",100,"^:",16],"^1D","^44","^6","sci/core.cljc","^:",16,"^8",1,"^7",100,"^9",100,"^8G","^49","^1C","Sci var that represents sci's `clojure.core/*print-meta*`"],"~$init",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",216,"^8",7,"^9",216,"^:",11,"^1>",["^1?",["^8J",["^1?",[["^1B"]]]]],"^1C","Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future."],"^1D","^45","^6","sci/core.cljc","^:",11,"^8L",["^1?",[["^1B"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",216,"^8P",["^Y",["^8Q","^8R"]],"^9",216,"^8S",1,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^1B"]]]]],"^1C","Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future."],"^13",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",242,"^8",7,"^9",242,"^:",16,"^1>",["^1?",["^8J",["^1?",[["^1K"],["^1K","^8Z"]]]]],"^1C","Creates namespace object. Can be used in var metadata.","^8[",["^ ","^8O",false,"^90",2,"^8S",2,"^8L",[["^1K"],["^1K","^8Z"]],"^1>",["^1?",[["^1K"],["^1K","^8Z"]]],"^8N",["^1?",[null,null]]]],"^1D","^4O","^6","sci/core.cljc","^:",16,"^8[",["^ ","^8O",false,"^90",2,"^8S",2,"^8L",[["^1K"],["^1K","^8Z"]],"^1>",["^1?",[["^1K"],["^1K","^8Z"]]],"^8N",["^1?",[null,null]]],"^8L",[["^1K"],["^1K","^8Z"]],"^8M",null,"^90",2,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^91",[["^ ","^90",1,"^8O",false,"^8G","^8R"],["^ ","^90",2,"^8O",false,"^8G","~$sci.impl.vars/SciNamespace"]],"^7",242,"^9",242,"^8S",2,"^8T",true,"^1>",["^1?",[["^1K"],["^1K","^8Z"]]],"^1C","Creates namespace object. Can be used in var metadata."],"^14",["^ ","^5",["^ ","^6","sci/core.cljc","^7",96,"^8",6,"^9",96,"^:",8],"^1D","^32","^6","sci/core.cljc","^:",8,"^8",1,"^7",96,"^9",96,"^8G","^49","^1C","Sci var that represents sci's `clojure.core/*ns*`"],"~$print-readably",["^ ","^5",["^ ","^6","sci/core.cljc","^7",101,"^8",6,"^9",101,"^:",20],"^1D","^4:","^6","sci/core.cljc","^:",20,"^8",1,"^7",101,"^9",101,"^8G","^49","^1C","Sci var that represents sci's `clojure.core/*print-readably*`"],"~$merge-opts",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",224,"^8",7,"^9",224,"^:",17,"^1>",["^1?",["^8J",["^1?",[["^8K","^1B"]]]]],"^1C","Updates a context with opts merged in and returns it."],"^1D","^4S","^6","sci/core.cljc","^:",17,"^8L",["^1?",[["^8K","^1B"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",224,"^8P",["^Y",["^8Q","^8R"]],"^9",224,"^8S",2,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^8K","^1B"]]]]],"^1C","Updates a context with opts merged in and returns it."],"~$file",["^ ","^5",["^ ","^6","sci/core.cljc","^7",97,"^8",6,"^9",97,"^:",10],"^1D","^4X","^6","sci/core.cljc","^:",10,"^8",1,"^7",97,"^9",97,"^8G","^49","^1C","Sci var that represents sci's `clojure.core/*file*`"],"~$err",["^ ","^1D","^3:","^6","sci/core.cljc","^7",95,"^8",1,"^9",95,"^:",9,"^5",["^ ","^6","sci/core.cljc","^7",95,"^8",6,"^9",95,"^:",9],"^1C","Sci var that represents sci's `clojure.core/*err*`"],"~$print-level",["^ ","^5",["^ ","^6","sci/core.cljc","^7",99,"^8",6,"^9",99,"^:",17],"^1D","^3T","^6","sci/core.cljc","^:",17,"^8",1,"^7",99,"^9",99,"^8G","^8R","^1C","Sci var that represents sci's `clojure.core/*print-level*`"],"^15",["^ ","^1D","^4Y","^6","sci/core.cljc","^7",108,"^8",1,"^9",108,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",108,"^8",6,"^9",108,"^:",8],"^8G","^49"],"~$get-column-number",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",263,"^8",7,"^9",263,"^:",24,"^1>",["^1?",["^8J",["^1?",[["~$reader"]]]]]],"^1D","^3U","^6","sci/core.cljc","^:",24,"^8L",["^1?",[["^9H"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",263,"^8P","^8R","^9",263,"^8S",1,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^9H"]]]]]],"~$process-publics",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",311,"^8",8,"^9",311,"^:",23,"^99",true,"^1>",["^1?",["^8J",["^1?",[["~$publics",["^ ","~:keys",["~$exclude"]]]]]]]],"^99",true,"^1D","^54","^6","sci/core.cljc","^:",23,"^8L",["^1?",[["^9J","~$p__58022"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",311,"^8P",["^Y",[null,"^8R"]],"^9",311,"^8S",2,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^9J",["^ ","^9K",["^9L"]]]]]]]],"^16",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",295,"^8",7,"^9",295,"^:",14,"^1>",["^1?",["^8J",["^1?",[["^1A"]]]]],"^1C","Returns name of SCI ns as symbol."],"^1D","^2W","^6","sci/core.cljc","^:",14,"^8L",["^1?",[["^1A"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",295,"^8P","^8R","^9",295,"^8S",1,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^1A"]]]]],"^1C","Returns name of SCI ns as symbol."],"~$eval-string",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",186,"^8",7,"^9",186,"^:",18,"^1>",["^1?",["^8J",["^1?",[["~$s"],["~$s","^1B"]]]]],"^1C","Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions.","^8[",["^ ","^8O",false,"^90",2,"^8S",2,"^8L",[["~$s"],["~$s","^1B"]],"^1>",["^1?",[["~$s"],["~$s","^1B"]]],"^8N",["^1?",[null,null]]]],"^1D","^2[","^6","sci/core.cljc","^:",18,"^8[",["^ ","^8O",false,"^90",2,"^8S",2,"^8L",[["~$s"],["~$s","^1B"]],"^1>",["^1?",[["~$s"],["~$s","^1B"]]],"^8N",["^1?",[null,null]]],"^8L",[["~$s"],["~$s","^1B"]],"^8M",null,"^90",2,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^91",[["^ ","^90",1,"^8O",false,"^8G","^8R"],["^ ","^90",2,"^8O",false,"^8G","^8R"]],"^7",186,"^9",186,"^8S",2,"^8T",true,"^1>",["^1?",[["~$s"],["~$s","^1B"]]],"^1C","Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions."],"^17",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",175,"^8",7,"^9",175,"^:",13,"^1>",["^1?",["^8J",["^1?",[["^8K","^1A","^8X"],["^8K","^1A","^8X","~$val"]]]]],"^1C","Finds or creates a sci var named by the symbol name in the namespace\n  ns (which can be a symbol or a sci namespace), setting its root\n  binding to val if supplied. The namespace must exist in the ctx. The\n  sci var will adopt any metadata from the name symbol.  Returns the\n  sci var.","^8[",["^ ","^8O",false,"^90",4,"^8S",4,"^8L",[["^8K","^1A","^8X"],["^8K","^1A","^8X","^9O"]],"^1>",["^1?",[["^8K","^1A","^8X"],["^8K","^1A","^8X","^9O"]]],"^8N",["^1?",[null,null]]]],"^1D","^4P","^6","sci/core.cljc","^:",13,"^8[",["^ ","^8O",false,"^90",4,"^8S",4,"^8L",[["^8K","^1A","^8X"],["^8K","^1A","^8X","^9O"]],"^1>",["^1?",[["^8K","^1A","^8X"],["^8K","^1A","^8X","^9O"]]],"^8N",["^1?",[null,null]]],"^8L",[["^8K","^1A","^8X"],["^8K","^1A","^8X","^9O"]],"^8M",null,"^90",4,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^91",[["^ ","^90",3,"^8O",false,"^8G",["^Y",[null,"^8R","^49"]]],["^ ","^90",4,"^8O",false,"^8G",["^Y",["^8R","^49"]]]],"^7",175,"^9",175,"^8S",4,"^8T",true,"^1>",["^1?",[["^8K","^1A","^8X"],["^8K","^1A","^8X","^9O"]]],"^1C","Finds or creates a sci var named by the symbol name in the namespace\n  ns (which can be a symbol or a sci namespace), setting its root\n  binding to val if supplied. The namespace must exist in the ctx. The\n  sci var will adopt any metadata from the name symbol.  Returns the\n  sci var."],"~$parse-next",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",266,"^8",7,"^9",266,"^:",17,"^1>",["^1?",["^8J",["^1?",[["^8K","^9H"],["^8K","^9H","^1B"]]]]],"^1C","Parses next form from reader","^8[",["^ ","^8O",false,"^90",3,"^8S",3,"^8L",[["^8K","^9H"],["^8K","^9H","^1B"]],"^1>",["^1?",[["^8K","^9H"],["^8K","^9H","^1B"]]],"^8N",["^1?",[null,null]]]],"^1D","^3R","^6","sci/core.cljc","^:",17,"^8[",["^ ","^8O",false,"^90",3,"^8S",3,"^8L",[["^8K","^9H"],["^8K","^9H","^1B"]],"^1>",["^1?",[["^8K","^9H"],["^8K","^9H","^1B"]]],"^8N",["^1?",[null,null]]],"^8L",[["^8K","^9H"],["^8K","^9H","^1B"]],"^8M",null,"^90",3,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^91",[["^ ","^90",2,"^8O",false,"^8G","^8R"],["^ ","^90",3,"^8O",false,"^8G",["^Y",["^8R","~$cljs.core/Keyword"]]]],"^7",266,"^9",266,"^8S",3,"^8T",true,"^1>",["^1?",[["^8K","^9H"],["^8K","^9H","^1B"]]],"^1C","Parses next form from reader"],"~$format-stacktrace",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",290,"^8",7,"^9",290,"^:",24,"^1>",["^1?",["^8J",["^1?",[["~$stacktrace"]]]]],"^1C","Returns a list of formatted stack trace elements as strings from stacktrace."],"^1D","^4A","^6","sci/core.cljc","^:",24,"^8L",["^1?",[["^9S"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",290,"^8P","~$cljs.core/LazySeq","^9",290,"^8S",1,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^9S"]]]]],"^1C","Returns a list of formatted stack trace elements as strings from stacktrace."],"^1:",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",36,"^8",7,"^9",36,"^:",11,"^1>",["^1?",["^8J",["^1?",[["~$dynamic-var","~$v"]]]]],"^1C","Establish thread local binding of dynamic var"],"^1D","^3S","^6","sci/core.cljc","^:",11,"^8L",["^1?",[["^9U","~$v"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",36,"^8P","^8R","^9",36,"^8S",2,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^9U","~$v"]]]]],"^1C","Establish thread local binding of dynamic var"],"^9;",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",324,"^8",8,"^9",324,"^:",15,"^99",true,"^1>",["^1?",["^8J",["^1?",[["^1B"]]]]]],"^99",true,"^1D","^37","^6","sci/core.cljc","^:",15,"^8L",["^1?",[["^1B"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",324,"^8P",["^Y",[null,"~$function"]],"^9",324,"^8S",1,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^1B"]]]]]],"^1;",["^ ","^1D","^36","^6","sci/core.cljc","^7",107,"^8",1,"^9",107,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",107,"^8",6,"^9",107,"^:",8],"^8G","^49"],"~$out",["^ ","^1D","^4F","^6","sci/core.cljc","^7",94,"^8",1,"^9",94,"^:",9,"^5",["^ ","^6","sci/core.cljc","^7",94,"^8",6,"^9",94,"^:",9],"^1C","Sci var that represents sci's `clojure.core/*out*`"],"~$print-length",["^ ","^5",["^ ","^6","sci/core.cljc","^7",98,"^8",6,"^9",98,"^:",18],"^1D","^3[","^6","sci/core.cljc","^:",18,"^8",1,"^7",98,"^9",98,"^8G","^8R","^1C","Sci var that represents sci's `clojure.core/*print-length*`"],"~$eval-form",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",276,"^8",7,"^9",276,"^:",16,"^1>",["^1?",["^8J",["^1?",[["^8K","~$form"]]]]],"^1C","Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`"],"^1D","^40","^6","sci/core.cljc","^:",16,"^8L",["^1?",[["^8K","^9Z"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",276,"^8P",["^Y",["^8R","^8V"]],"^9",276,"^8S",2,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^8K","^9Z"]]]]],"^1C","Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`"],"^9H",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",254,"^8",7,"^9",254,"^:",13,"^1>",["^1?",["^8J",["^1?",[["~$x"]]]]],"^1C","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"^1D","^43","^6","sci/core.cljc","^:",13,"^8L",["^1?",[["~$x"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",254,"^8P","^8R","^9",254,"^8S",1,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["~$x"]]]]],"^1C","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"^9S",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",285,"^8",7,"^9",285,"^:",17,"^1>",["^1?",["^8J",["^1?",[["~$ex"]]]]],"^1C","Returns list of stacktrace element maps from exception, if available."],"^1D","^46","^6","sci/core.cljc","^:",17,"^8L",["^1?",[["^9["]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",285,"^8P",["^Y",["^8Q","^8V"]],"^9",285,"^8S",1,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^9["]]]]],"^1C","Returns list of stacktrace element maps from exception, if available."],"~$print-fn",["^ ","^1D","^31","^6","sci/core.cljc","^7",102,"^8",10,"^9",102,"^:",23,"^5",["^ ","^6","sci/core.cljc","^7",102,"^8",15,"^9",102,"^:",23],"^1C","Sci var that represents sci's `cljs.core/*print-fn*`"],"~$get-line-number",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",260,"^8",7,"^9",260,"^:",22,"^1>",["^1?",["^8J",["^1?",[["^9H"]]]]]],"^1D","^3L","^6","sci/core.cljc","^:",22,"^8L",["^1?",[["^9H"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",260,"^8P","^8R","^9",260,"^8S",1,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^9H"]]]]]],"~$eval-string*",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",236,"^8",7,"^9",236,"^:",19,"^1>",["^1?",["^8J",["^1?",[["^8K","~$s"]]]]],"^1C","Evaluates string `s` in the context of `ctx` (as produced with\n  `init`)."],"^1D","^3J","^6","sci/core.cljc","^:",19,"^8L",["^1?",[["^8K","~$s"]]],"^8M",null,"^8N",["^1?",[null,null]],"^8",1,"^8O",false,"^7",236,"^8P","^8R","^9",236,"^8S",2,"^8T",true,"^1>",["^1?",["^8J",["^1?",[["^8K","~$s"]]]]],"^1C","Evaluates string `s` in the context of `ctx` (as produced with\n  `init`)."],"~$new-dynamic-var",["^ ","^8I",null,"^5",["^ ","^6","sci/core.cljc","^7",29,"^8",7,"^9",29,"^:",22,"^1>",["^1?",["^8J",["^1?",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]]]]],"^1C","Same as new-var but adds :dynamic true to meta.","^8[",["^ ","^8O",false,"^90",3,"^8S",3,"^8L",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]],"^1>",["^1?",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]]],"^8N",["^1?",[null,null,null]]]],"^1D","^30","^6","sci/core.cljc","^:",22,"^8[",["^ ","^8O",false,"^90",3,"^8S",3,"^8L",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]],"^1>",["^1?",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]]],"^8N",["^1?",[null,null,null]]],"^8L",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]],"^8M",null,"^90",3,"^8N",["^1?",[null,null,null]],"^8",1,"^8O",false,"^91",[["^ ","^90",1,"^8O",false,"^8G","^8R"],["^ ","^90",2,"^8O",false,"^8G","^8R"],["^ ","^90",3,"^8O",false,"^8G","^49"]],"^7",29,"^9",29,"^8S",3,"^8T",true,"^1>",["^1?",[["^8X"],["^8X","^8Y"],["^8X","^8Y","^8Z"]]],"^1C","Same as new-var but adds :dynamic true to meta."]],"^2?",["^ ","^T","^T","^21","^21","^1X","^1X","^1Z","^1[","^22","^23","^25","^1X","^1[","^1[","^23","^23"],"~:cljs.analyzer/constants",["^ ","^2=",["^Y",["^2C","^93","~:sci.impl/callstack","^5","~:else","^1F","~:sci/macro","~:val","~:env","~:all","~:sci.core/eof","~:dynamic","^1G","~:id","^1>","~:eof","^1C"]],"~:order",["^:<","^:7","^1G","^:9","^:>","^:;","^:=","^:5","^5","^:8","^1F","^2C","^::","^:6","^1>","^93","^1C"]],"^2F",["^ ","^2>",["^Y",[]],"^2?",["^Y",[]]],"^2G",["^ "],"^2H",["^24","^21","^28","^1Y","^26","^1X","^23","^1V","^20","^1W","^29","^1["]],"^1F","^T","~:ns-specs",["^ "],"~:ns-spec-vars",["^Y",[]],"~:compiler-options",["^56",[["^:B","~:static-fns"],true,["^:B","~:shadow-tweaks"],null,["^:B","~:source-map-inline"],null,["^:B","~:elide-asserts"],false,["^:B","~:optimize-constants"],null,["^:B","^2M"],null,["^:B","~:external-config"],null,["^:B","~:tooling-config"],null,["^:B","~:emit-constants"],null,["^:B","~:load-tests"],null,["^:B","~:form-size-threshold"],null,["^:B","~:global-goog-object&array"],null,["^:B","~:data-readers"],null,["^:B","~:infer-externs"],"~:auto",["^:B","^2O"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^:B","~:fn-invoke-direct"],null,["^:B","~:source-map"],"/dev/null"]]]