["^ ","~:output",["^ ","~:js","goog.provide('zprint.guide');\n/**\n * Given a structure which starts with defn, create a guide for the\n *   'rules of defn', an alternative approach to formatting a defn.\n */\nzprint.guide.rodguide = (function zprint$guide$rodguide(var_args){\nvar G__41855 = arguments.length;\nswitch (G__41855) {\ncase 0:\nreturn zprint.guide.rodguide.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn zprint.guide.rodguide.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn zprint.guide.rodguide.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn zprint.guide.rodguide.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.rodguide.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"rodguide\";\n}));\n\n(zprint.guide.rodguide.cljs$core$IFn$_invoke$arity$1 = (function (rod_options){\nreturn \"rodguide\";\n}));\n\n(zprint.guide.rodguide.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nreturn zprint.guide.rodguide.cljs$core$IFn$_invoke$arity$4(cljs.core.PersistentArrayMap.EMPTY,options,len,sexpr);\n}));\n\n(zprint.guide.rodguide.cljs$core$IFn$_invoke$arity$4 = (function (rod_options,options,len,sexpr){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(sexpr)),\"defn\")){\nvar multi_arity_nl_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(rod_options,new cljs.core.Keyword(null,\"multi-arity-nl?\",\"multi-arity-nl?\",-1175171752),true);\nvar docstring_QMARK_ = typeof cljs.core.nth.cljs$core$IFn$_invoke$arity$2(sexpr,(2)) === 'string';\nvar rest = cljs.core.nthnext(sexpr,((docstring_QMARK_)?(3):(2)));\nvar multi_arity_QMARK_ = (!(cljs.core.vector_QMARK_(cljs.core.first(rest))));\nvar rest__$1 = ((multi_arity_QMARK_)?rest:cljs.core.next(rest));\nvar rest_guide = cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((cljs.core.count(rest__$1) - (1)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749));\nvar rest_guide__$1 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,(cljs.core.truth_((function (){var and__5043__auto__ = multi_arity_QMARK_;\nif(and__5043__auto__){\nreturn multi_arity_nl_QMARK_;\n} else {\nreturn and__5043__auto__;\n}\n})())?cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(rest_guide,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))], 0)):cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(rest_guide,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)))));\nvar rest_guide__$2 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(rest_guide__$1,new cljs.core.Keyword(null,\"element\",\"element\",1974019749));\nvar guide = (function (){var G__41864 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null);\nvar G__41864__$1 = ((docstring_QMARK_)?cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__41864,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], 0)):G__41864);\nvar G__41864__$2 = (((!(multi_arity_QMARK_)))?cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__41864__$1,new cljs.core.Keyword(null,\"element\",\"element\",1974019749),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], 0)):G__41864__$1);\nvar G__41864__$3 = ((((multi_arity_QMARK_) && ((!(docstring_QMARK_)))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__41864__$2,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)):G__41864__$2);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__41864__$3,rest_guide__$2);\n\n})();\nvar option_map = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),guide,new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null)], null);\nif(multi_arity_QMARK_){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(option_map,new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null),new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826)], null),new cljs.core.Keyword(null,\"next-inner-restore\",\"next-inner-restore\",876759733),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146),new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158)], null)], null)], null));\n} else {\nreturn option_map;\n}\n} else {\nreturn null;\n}\n}));\n\n(zprint.guide.rodguide.cljs$lang$maxFixedArity = 4);\n\n/**\n * Return true if a constant or vector.\n */\nzprint.guide.constant_or_vector_QMARK_ = (function zprint$guide$constant_or_vector_QMARK_(element){\nreturn ((typeof element === 'number') || (((typeof element === 'string') || (((cljs.core.vector_QMARK_(element)) || ((((element instanceof cljs.core.Keyword)) || (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(element,true)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(element,false)))))))))));\n});\nzprint.guide.count_constants = (function zprint$guide$count_constants(p__41866,element){\nvar vec__41867 = p__41866;\nvar constant_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41867,(0),null);\nvar possible_constant_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41867,(1),null);\nif(cljs.core.truth_(possible_constant_QMARK_)){\nif(zprint.guide.constant_or_vector_QMARK_(element)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(constant_count + (1)),cljs.core.not(possible_constant_QMARK_)], null);\n} else {\nreturn cljs.core.reduced(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [constant_count,possible_constant_QMARK_], null));\n}\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [constant_count,cljs.core.not(possible_constant_QMARK_)], null);\n}\n});\n/**\n * Reimplement :style :moustache with guides.\n */\nzprint.guide.moustacheguide = (function zprint$guide$moustacheguide(var_args){\nvar G__41885 = arguments.length;\nswitch (G__41885) {\ncase 0:\nreturn zprint.guide.moustacheguide.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 3:\nreturn zprint.guide.moustacheguide.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.moustacheguide.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"moustacheguide\";\n}));\n\n(zprint.guide.moustacheguide.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nvar rev_sexpr = cljs.core.reverse(sexpr);\nvar vec__41894 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.guide.count_constants,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),false], null),rev_sexpr);\nvar constant_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41894,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41894,(1),null);\nvar pair_count = (constant_count * (2));\nvar pair_guide = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(pair_count,new cljs.core.Keyword(null,\"element\",\"element\",1974019749)));\nvar pair_guide__$1 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(pair_guide,new cljs.core.Keyword(null,\"group-end\",\"group-end\",-574931147));\nvar pair_guide__$2 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(pair_guide__$1,new cljs.core.Keyword(null,\"element-pair-group\",\"element-pair-group\",2021364237));\nvar non_pair_count = (cljs.core.count(sexpr) - pair_count);\nvar non_pair_guide = cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(non_pair_count,new cljs.core.Keyword(null,\"element\",\"element\",1974019749));\nvar non_pair_guide__$1 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),non_pair_guide));\nvar guide = cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(non_pair_guide__$1,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"group-begin\",\"group-begin\",447482475)], 0));\nvar guide__$1 = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(guide,pair_guide__$2);\nif(cljs.core.truth_((function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"dbg-s\",\"dbg-s\",986366408).cljs$core$IFn$_invoke$arity$1(options));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options);\n}\n})())){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"moustacheguide: sexpr\",sexpr,\"pair-count:\",pair_count,\"output:\",guide__$1], 0));\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),guide__$1,new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148),true], null),new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148),false], null),new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null)], null);\n}));\n\n(zprint.guide.moustacheguide.cljs$lang$maxFixedArity = 3);\n\n/**\n * Given two arguments, an s-expression and a string, if the s-expression\n *   is actually a string, add a double quote on to the beginning and end of\n *   the string.\n */\nzprint.guide.add_double_quotes = (function zprint$guide$add_double_quotes(sexpr,s){\nif(typeof sexpr === 'string'){\nreturn [\"\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),\"\\\"\"].join('');\n} else {\nreturn s;\n}\n});\n/**\n * Format are test functions.  Call it with (partial {} areguide), where\n *   the map can be {:justify? true} to justify the various rows. It will\n *   use {:pair {:justify {:max-variance n}}} for the variance, but you can\n *   give it a variance to use with {:max-variance n} in the map which is\n *   its first argument.\n */\nzprint.guide.areguide = (function zprint$guide$areguide(var_args){\nvar G__41919 = arguments.length;\nswitch (G__41919) {\ncase 0:\nreturn zprint.guide.areguide.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn zprint.guide.areguide.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn zprint.guide.areguide.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn zprint.guide.areguide.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.areguide.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"areguide\";\n}));\n\n(zprint.guide.areguide.cljs$core$IFn$_invoke$arity$1 = (function (are_options){\nreturn \"areguide\";\n}));\n\n(zprint.guide.areguide.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nreturn zprint.guide.areguide.cljs$core$IFn$_invoke$arity$4(cljs.core.PersistentArrayMap.EMPTY,options,len,sexpr);\n}));\n\n(zprint.guide.areguide.cljs$core$IFn$_invoke$arity$4 = (function (are_options,options,len,sexpr){\nvar justify_QMARK_ = new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148).cljs$core$IFn$_invoke$arity$1(are_options);\nvar max_variance = (cljs.core.truth_(justify_QMARK_)?(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"max-variance\",\"max-variance\",-899998186).cljs$core$IFn$_invoke$arity$1(are_options);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"max-variance\",\"max-variance\",-899998186).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"justify\",\"justify\",-722524056).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312).cljs$core$IFn$_invoke$arity$1(options)));\n}\n})():null);\nvar caller_options = (function (){var fexpr__41938 = new cljs.core.Keyword(null,\"caller\",\"caller\",-1275362879).cljs$core$IFn$_invoke$arity$1(options);\nreturn (fexpr__41938.cljs$core$IFn$_invoke$arity$1 ? fexpr__41938.cljs$core$IFn$_invoke$arity$1(options) : fexpr__41938.call(null,options));\n})();\nvar current_indent = (function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"indent-arg\",\"indent-arg\",58691874).cljs$core$IFn$_invoke$arity$1(caller_options);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125).cljs$core$IFn$_invoke$arity$1(caller_options);\n}\n})();\nvar are_indent = new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125).cljs$core$IFn$_invoke$arity$1(are_options);\nvar table_indent = (current_indent + (function (){var or__5045__auto__ = are_indent;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn current_indent;\n}\n})());\nvar arg_vec_len = cljs.core.count(cljs.core.second(sexpr));\nvar test_len = (cljs.core.count(sexpr) - (3));\nvar rows = (test_len / arg_vec_len);\nvar excess_tests = (test_len - (rows * arg_vec_len));\nvar alignment_vec = (cljs.core.truth_(justify_QMARK_)?(function (){var zfn_map = new cljs.core.Keyword(null,\"zfn-map\",\"zfn-map\",1068295789).cljs$core$IFn$_invoke$arity$1(options);\nvar zloc_seq_nc = (function (){var G__41944 = cljs.core.identity;\nvar G__41945 = new cljs.core.Keyword(null,\"zloc\",\"zloc\",-2123059767).cljs$core$IFn$_invoke$arity$1(options);\nvar fexpr__41943 = new cljs.core.Keyword(null,\"zmap-no-comment\",\"zmap-no-comment\",1484161325).cljs$core$IFn$_invoke$arity$1(zfn_map);\nreturn (fexpr__41943.cljs$core$IFn$_invoke$arity$2 ? fexpr__41943.cljs$core$IFn$_invoke$arity$2(G__41944,G__41945) : fexpr__41943.call(null,G__41944,G__41945));\n})();\nvar args = cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),zloc_seq_nc);\nvar arg_strs = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"zstring\",\"zstring\",-1532582237).cljs$core$IFn$_invoke$arity$1(zfn_map),args);\nvar seq_of_seqs = cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arg_vec_len,arg_vec_len,cljs.core.PersistentVector.EMPTY,arg_strs);\nvar max_width_vec = zprint.util.column_alignment.cljs$core$IFn$_invoke$arity$4(max_variance,seq_of_seqs,null,new cljs.core.Keyword(null,\"no-string-adj?\",\"no-string-adj?\",-147285501));\nvar alignment_vec = zprint.util.cumulative_alignment(max_width_vec);\nreturn alignment_vec;\n})():null);\nvar mark_guide = cljs.core.vec(cljs.core.flatten(cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(cljs.core.vector,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"mark-at-indent\",\"mark-at-indent\",-126657684)),cljs.core.range.cljs$core$IFn$_invoke$arity$0(),alignment_vec)));\nvar new_row_guide = (function (){var G__41946 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),table_indent], null);\nvar G__41946__$1 = (((!(cljs.core.empty_QMARK_(alignment_vec))))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__41946,cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"align\",\"align\",1964212802)),cljs.core.range.cljs$core$IFn$_invoke$arity$1(cljs.core.count(alignment_vec)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"element\",\"element\",1974019749))], 0))):G__41946);\nvar G__41946__$2 = ((cljs.core.empty_QMARK_(alignment_vec))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__41946__$1,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((arg_vec_len - (1)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749))):G__41946__$1);\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__41946__$2,new cljs.core.Keyword(null,\"indent-reset\",\"indent-reset\",900463610),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], 0));\n\n})();\nvar multi_row_guide = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(rows,new_row_guide));\nvar guide = (function (){var G__41948 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element-best\",\"element-best\",1084358317),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null),mark_guide),multi_row_guide);\nif((excess_tests > (0))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__41948,new cljs.core.Keyword(null,\"element-*\",\"element-*\",-948937262));\n} else {\nreturn G__41948;\n}\n})();\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),guide,new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null)], null);\n}));\n\n(zprint.guide.areguide.cljs$lang$maxFixedArity = 4);\n\n/**\n * Format are test functions, no justification.\n */\nzprint.guide.areguide_basic = (function zprint$guide$areguide_basic(var_args){\nvar G__41958 = arguments.length;\nswitch (G__41958) {\ncase 0:\nreturn zprint.guide.areguide_basic.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 3:\nreturn zprint.guide.areguide_basic.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.areguide_basic.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"areguide\";\n}));\n\n(zprint.guide.areguide_basic.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nvar arg_vec_len = cljs.core.count(cljs.core.second(sexpr));\nvar beginning = cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),sexpr);\nvar test_len = (cljs.core.count(sexpr) - (3));\nvar rows = (test_len / arg_vec_len);\nvar excess_tests = (test_len - (rows * arg_vec_len));\nvar single_row = cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null),cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arg_vec_len,new cljs.core.Keyword(null,\"element\",\"element\",1974019749)));\nvar row_guide = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(rows,single_row));\nvar guide = (function (){var G__41979 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element-best\",\"element-best\",1084358317)], null),row_guide);\nif((excess_tests > (0))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__41979,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"element-*\",\"element-*\",-948937262)], 0));\n} else {\nreturn G__41979;\n}\n})();\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),guide,new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null)], null);\n}));\n\n(zprint.guide.areguide_basic.cljs$lang$maxFixedArity = 3);\n\n/**\n * Justify the first things in a variety of settings.  The first argument\n *   is the things to recognize, and can be :require, :require-macros, or \n *   :import. :require and :require-macros are handled the same, and :import\n *   is handled differently since it has the values all in the same expression.\n *   Handles sequences with lists or vectors.\n */\nzprint.guide.jrequireguide = (function zprint$guide$jrequireguide(var_args){\nvar G__41991 = arguments.length;\nswitch (G__41991) {\ncase 0:\nreturn zprint.guide.jrequireguide.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn zprint.guide.jrequireguide.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 4:\nreturn zprint.guide.jrequireguide.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.jrequireguide.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"jrequireguide\";\n}));\n\n(zprint.guide.jrequireguide.cljs$core$IFn$_invoke$arity$1 = (function (keyword){\nreturn \"jrequireguide\";\n}));\n\n(zprint.guide.jrequireguide.cljs$core$IFn$_invoke$arity$4 = (function (keyword,options,len,sexpr){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(sexpr),keyword)){\nvar vectors_PLUS_lists = cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__41980_SHARP_){\nreturn ((cljs.core.vector_QMARK_(p1__41980_SHARP_)) || (cljs.core.list_QMARK_(p1__41980_SHARP_)));\n}),sexpr);\nif((!(cljs.core.empty_QMARK_(vectors_PLUS_lists)))){\nvar max_width_vec = zprint.util.column_alignment.cljs$core$IFn$_invoke$arity$3(new cljs.core.Keyword(null,\"max-variance\",\"max-variance\",-899998186).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"justify\",\"justify\",-722524056).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312).cljs$core$IFn$_invoke$arity$1(options))),vectors_PLUS_lists,(1));\nvar _ = (cljs.core.truth_((function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"dbg-s\",\"dbg-s\",986366408).cljs$core$IFn$_invoke$arity$1(options));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options);\n}\n})())?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"jrequireguide max-width-vec:\",max_width_vec], 0)):null);\nvar max_first = cljs.core.first(max_width_vec);\nvar element_guide = new cljs.core.Keyword(null,\"element-pair-*\",\"element-pair-*\",281146227);\nvar vector_guide = (cljs.core.truth_(max_first)?((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(sexpr),new cljs.core.Keyword(null,\"import\",\"import\",-1399500709)))?new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"mark-at\",\"mark-at\",-1321655498),(0),(max_first + (1)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"align\",\"align\",1964212802),(0),new cljs.core.Keyword(null,\"indent-here\",\"indent-here\",1856277408),new cljs.core.Keyword(null,\"element-*\",\"element-*\",-948937262)], null):new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"mark-at\",\"mark-at\",-1321655498),(0),(max_first + (1)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"align\",\"align\",1964212802),(0),element_guide], null)):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),element_guide], null));\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),(function (___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),vector_guide], null);\n}),new cljs.core.Keyword(null,\"wrap-multi?\",\"wrap-multi?\",1447434774),true,new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null),new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),(function (___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),vector_guide], null);\n}),new cljs.core.Keyword(null,\"wrap-multi?\",\"wrap-multi?\",1447434774),true,new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148),true], null),new cljs.core.Keyword(null,\"next-inner-restore\",\"next-inner-restore\",876759733),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.Keyword(null,\"wrap-multi?\",\"wrap-multi?\",1447434774)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.Keyword(null,\"wrap-multi?\",\"wrap-multi?\",1447434774)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148)], null)], null)], null)], null);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n}));\n\n(zprint.guide.jrequireguide.cljs$lang$maxFixedArity = 4);\n\n/**\n * Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n *   with guides using :spaces.  For guide testing, do not use this as a model\n *   for how to write a guide.\n */\nzprint.guide.rumguide = (function zprint$guide$rumguide(var_args){\nvar G__42009 = arguments.length;\nswitch (G__42009) {\ncase 0:\nreturn zprint.guide.rumguide.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 3:\nreturn zprint.guide.rumguide.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.rumguide.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"rumguide\";\n}));\n\n(zprint.guide.rumguide.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nvar docstring_QMARK_ = typeof cljs.core.nth.cljs$core$IFn$_invoke$arity$2(sexpr,(2)) === 'string';\nvar vec__42011 = cljs.core.split_with((function (p1__42005_SHARP_){\nreturn (!(((cljs.core.vector_QMARK_(p1__42005_SHARP_)) || (((cljs.core.list_QMARK_(p1__42005_SHARP_)) && (cljs.core.vector_QMARK_(cljs.core.first(p1__42005_SHARP_))))))));\n}),sexpr);\nvar up_to_arguments = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42011,(0),null);\nvar args_and_after = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42011,(1),null);\nif(cljs.core.empty_QMARK_(args_and_after)){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null);\n} else {\nvar lt = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(sexpr,((docstring_QMARK_)?(3):(2)));\nvar lt_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(lt),\"<\");\nvar mixin_indent = ((lt_QMARK_)?(2):(1));\nvar beginning_guide = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null);\nvar beginning_guide__$1 = ((docstring_QMARK_)?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(beginning_guide,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)):beginning_guide);\nvar middle_element_count = (((cljs.core.count(up_to_arguments) - (2)) - ((docstring_QMARK_)?(1):(0))) - ((lt_QMARK_)?(1):(0)));\nvar middle_guide = (((middle_element_count > (0)))?((lt_QMARK_)?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)):cljs.core.PersistentVector.EMPTY);\nvar middle_guide__$1 = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(middle_guide,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((middle_element_count - (1)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"spaces\",\"spaces\",365984563),mixin_indent,new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)));\nvar end_element_count = cljs.core.count(args_and_after);\nvar end_guide = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((end_element_count - (1)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null))], null);\nvar guide = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(beginning_guide__$1,middle_guide__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([end_guide], 0));\nvar guide__$1 = cljs.core.flatten(guide);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),guide__$1,new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null)], null);\n}\n}));\n\n(zprint.guide.rumguide.cljs$lang$maxFixedArity = 3);\n\n/**\n * Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n *   with guides using :align.  For guide testing, do not use this as a model\n *   for how to write a guide.\n */\nzprint.guide.rumguide_1 = (function zprint$guide$rumguide_1(var_args){\nvar G__42029 = arguments.length;\nswitch (G__42029) {\ncase 0:\nreturn zprint.guide.rumguide_1.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 3:\nreturn zprint.guide.rumguide_1.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.rumguide_1.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"rumguide\";\n}));\n\n(zprint.guide.rumguide_1.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nvar docstring_QMARK_ = typeof cljs.core.nth.cljs$core$IFn$_invoke$arity$2(sexpr,(2)) === 'string';\nvar vec__42041 = cljs.core.split_with((function (p1__42020_SHARP_){\nreturn (!(((cljs.core.vector_QMARK_(p1__42020_SHARP_)) || (((cljs.core.list_QMARK_(p1__42020_SHARP_)) && (cljs.core.vector_QMARK_(cljs.core.first(p1__42020_SHARP_))))))));\n}),sexpr);\nvar up_to_arguments = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42041,(0),null);\nvar args_and_after = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42041,(1),null);\nif(cljs.core.empty_QMARK_(args_and_after)){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null);\n} else {\nvar lt = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(sexpr,((docstring_QMARK_)?(3):(2)));\nvar lt_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(lt),\"<\");\nvar beginning_guide = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null);\nvar beginning_guide__$1 = ((docstring_QMARK_)?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(beginning_guide,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)):beginning_guide);\nvar middle_element_count = (((cljs.core.count(up_to_arguments) - (2)) - ((docstring_QMARK_)?(1):(0))) - ((lt_QMARK_)?(1):(0)));\nvar middle_guide = (((middle_element_count > (0)))?((lt_QMARK_)?new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"mark\",\"mark\",-373816345),(1),new cljs.core.Keyword(null,\"align\",\"align\",1964212802),(1),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null):new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"mark\",\"mark\",-373816345),(1),new cljs.core.Keyword(null,\"align\",\"align\",1964212802),(1),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)):cljs.core.PersistentVector.EMPTY);\nvar middle_guide__$1 = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(middle_guide,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((middle_element_count - (1)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"align\",\"align\",1964212802),(1),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)));\nvar end_element_count = cljs.core.count(args_and_after);\nvar end_guide = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((end_element_count - (1)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null))], null);\nvar guide = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(beginning_guide__$1,middle_guide__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([end_guide], 0));\nvar guide__$1 = cljs.core.flatten(guide);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),guide__$1,new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null)], null);\n}\n}));\n\n(zprint.guide.rumguide_1.cljs$lang$maxFixedArity = 3);\n\n/**\n * Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n *   with guides using :indent.  This is probably the simplest and therefore the\n *   best of them all.  For guide testing, do not use this as a model for how\n *   to write a guide.\n */\nzprint.guide.rumguide_2 = (function zprint$guide$rumguide_2(var_args){\nvar G__42069 = arguments.length;\nswitch (G__42069) {\ncase 0:\nreturn zprint.guide.rumguide_2.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 3:\nreturn zprint.guide.rumguide_2.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.rumguide_2.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"rumguide\";\n}));\n\n(zprint.guide.rumguide_2.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nvar docstring_QMARK_ = typeof cljs.core.nth.cljs$core$IFn$_invoke$arity$2(sexpr,(2)) === 'string';\nvar vec__42070 = cljs.core.split_with((function (p1__42063_SHARP_){\nreturn (!(((cljs.core.vector_QMARK_(p1__42063_SHARP_)) || (((cljs.core.list_QMARK_(p1__42063_SHARP_)) && (cljs.core.vector_QMARK_(cljs.core.first(p1__42063_SHARP_))))))));\n}),sexpr);\nvar up_to_arguments = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42070,(0),null);\nvar args_and_after = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42070,(1),null);\nif(cljs.core.empty_QMARK_(args_and_after)){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null);\n} else {\nvar lt = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(sexpr,((docstring_QMARK_)?(3):(2)));\nvar lt_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(lt),\"<\");\nvar beginning_guide = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null);\nvar beginning_guide__$1 = ((docstring_QMARK_)?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(beginning_guide,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)):beginning_guide);\nvar middle_element_count = (((cljs.core.count(up_to_arguments) - (2)) - ((docstring_QMARK_)?(1):(0))) - ((lt_QMARK_)?(1):(0)));\nvar middle_guide = (((middle_element_count > (0)))?((lt_QMARK_)?new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(4),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null):new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(4),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)):cljs.core.PersistentVector.EMPTY);\nvar middle_guide__$1 = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(middle_guide,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((middle_element_count - (1)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)));\nvar end_element_count = cljs.core.count(args_and_after);\nvar end_guide = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"indent-reset\",\"indent-reset\",900463610),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((end_element_count - (1)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null))], null);\nvar guide = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(beginning_guide__$1,middle_guide__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([end_guide], 0));\nvar guide__$1 = cljs.core.flatten(guide);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),guide__$1,new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null)], null);\n}\n}));\n\n(zprint.guide.rumguide_2.cljs$lang$maxFixedArity = 3);\n\n/**\n * Justify O'Doyles Rules\n */\nzprint.guide.odrguide = (function zprint$guide$odrguide(var_args){\nvar G__42087 = arguments.length;\nswitch (G__42087) {\ncase 0:\nreturn zprint.guide.odrguide.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 3:\nreturn zprint.guide.odrguide.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.odrguide.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"odrguide\";\n}));\n\n(zprint.guide.odrguide.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(sexpr),new cljs.core.Keyword(null,\"what\",\"what\",987290269))){\nvar vec__42099 = cljs.core.split_with(cljs.core.vector_QMARK_,cljs.core.next(sexpr));\nvar vectors = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42099,(0),null);\nvar beyond = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42099,(1),null);\nvar max_width_vec = zprint.util.column_alignment.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"max-variance\",\"max-variance\",-899998186).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"justify\",\"justify\",-722524056).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312).cljs$core$IFn$_invoke$arity$1(options))),vectors);\nvar alignment_vec = zprint.util.cumulative_alignment(max_width_vec);\nvar mark_guide = cljs.core.vec(cljs.core.flatten(cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(cljs.core.vector,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"mark-at\",\"mark-at\",-1321655498)),cljs.core.range.cljs$core$IFn$_invoke$arity$0(),alignment_vec)));\nvar alignment_guide = cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"align\",\"align\",1964212802)),cljs.core.range.cljs$core$IFn$_invoke$arity$1(cljs.core.count(alignment_vec)));\nvar vector_guide = cljs.core.into.cljs$core$IFn$_invoke$arity$2(mark_guide,cljs.core.flatten(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"element\",\"element\",1974019749)),alignment_guide),new cljs.core.Keyword(null,\"element-*\",\"element-*\",-948937262)], null)));\nvar keyword_1 = cljs.core.first(beyond);\nvar vec__42102 = cljs.core.split_with(cljs.core.list_QMARK_,cljs.core.next(beyond));\nvar keyword_1_lists = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42102,(0),null);\nvar beyond__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42102,(1),null);\nvar keyword_2 = cljs.core.first(beyond__$1);\nvar vec__42105 = cljs.core.split_with(cljs.core.list_QMARK_,cljs.core.next(beyond__$1));\nvar keyword_2_lists = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42105,(0),null);\nvar beyond__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42105,(1),null);\nvar _ = (cljs.core.truth_((function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"dbg-s\",\"dbg-s\",986366408).cljs$core$IFn$_invoke$arity$1(options));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options);\n}\n})())?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"odrguide alignment-vec:\",alignment_vec,\"mark-guide:\",mark_guide,\"alignment-guide:\",alignment_guide,\"vector-guide:\",vector_guide,\"keyword-1:\",keyword_1,\"keyword-1-lists:\",keyword_1_lists,\"keyword-2:\",keyword_2,\"keyword-2-lists:\",keyword_2_lists], 0)):null);\nvar guide = (function (){var G__42119 = cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(2),new cljs.core.Keyword(null,\"options\",\"options\",99638489),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),vector_guide,new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"wrap-multi?\",\"wrap-multi?\",1447434774),true,new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null)], null),new cljs.core.Keyword(null,\"group-begin\",\"group-begin\",447482475)], null),cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(cljs.core.count(vectors),new cljs.core.Keyword(null,\"element\",\"element\",1974019749))),new cljs.core.Keyword(null,\"group-end\",\"group-end\",-574931147),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"element-newline-best-group\",\"element-newline-best-group\",1028915328),new cljs.core.Keyword(null,\"options-reset\",\"options-reset\",610833739),new cljs.core.Keyword(null,\"options\",\"options\",99638489),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"wrap-multi?\",\"wrap-multi?\",1447434774),true,new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null)], null),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(1)], 0));\nvar G__42119__$1 = (cljs.core.truth_(keyword_1)?cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__42119,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], 0)):G__42119);\nvar G__42119__$2 = (((!(cljs.core.empty_QMARK_(keyword_1_lists))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__42119__$1,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(2),new cljs.core.Keyword(null,\"group-begin\",\"group-begin\",447482475)], 0)),cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(cljs.core.count(keyword_1_lists),new cljs.core.Keyword(null,\"element\",\"element\",1974019749))),new cljs.core.Keyword(null,\"group-end\",\"group-end\",-574931147),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"element-newline-best-group\",\"element-newline-best-group\",1028915328),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(1)], 0)):G__42119__$1);\nvar G__42119__$3 = (cljs.core.truth_(keyword_2)?cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__42119__$2,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], 0)):G__42119__$2);\nif((!(cljs.core.empty_QMARK_(keyword_2_lists)))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__42119__$3,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(2),new cljs.core.Keyword(null,\"group-begin\",\"group-begin\",447482475)], 0)),cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(cljs.core.count(keyword_2_lists),new cljs.core.Keyword(null,\"element\",\"element\",1974019749))),new cljs.core.Keyword(null,\"group-end\",\"group-end\",-574931147),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"element-newline-best-group\",\"element-newline-best-group\",1028915328)], 0));\n} else {\nreturn G__42119__$3;\n}\n})();\nif(cljs.core.truth_((function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"dbg-s\",\"dbg-s\",986366408).cljs$core$IFn$_invoke$arity$1(options));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options);\n}\n})())){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"odrguide:\",guide], 0));\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),guide], null);\n} else {\nreturn null;\n}\n}));\n\n(zprint.guide.odrguide.cljs$lang$maxFixedArity = 3);\n\nzprint.guide.guide_arg_count = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"element-newline-best-group\",\"element-newline-best-group\",1028915328),new cljs.core.Keyword(null,\"align\",\"align\",1964212802),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element-binding-*\",\"element-binding-*\",2057085893),new cljs.core.Keyword(null,\"mark\",\"mark\",-373816345),new cljs.core.Keyword(null,\"options-reset\",\"options-reset\",610833739),new cljs.core.Keyword(null,\"group-begin\",\"group-begin\",447482475),new cljs.core.Keyword(null,\"element-binding-vec\",\"element-binding-vec\",936510284),new cljs.core.Keyword(null,\"mark-at-indent\",\"mark-at-indent\",-126657684),new cljs.core.Keyword(null,\"element-pair-group\",\"element-pair-group\",2021364237),new cljs.core.Keyword(null,\"element-best\",\"element-best\",1084358317),new cljs.core.Keyword(null,\"element-guide\",\"element-guide\",384986063),new cljs.core.Keyword(null,\"element-newline-best-*\",\"element-newline-best-*\",-1915830000),new cljs.core.Keyword(null,\"element-*\",\"element-*\",-948937262),new cljs.core.Keyword(null,\"spaces\",\"spaces\",365984563),new cljs.core.Keyword(null,\"element-pair-*\",\"element-pair-*\",281146227),new cljs.core.Keyword(null,\"group-end\",\"group-end\",-574931147),new cljs.core.Keyword(null,\"mark-at\",\"mark-at\",-1321655498),new cljs.core.Keyword(null,\"options\",\"options\",99638489),new cljs.core.Keyword(null,\"element-best-*\",\"element-best-*\",-572827078),new cljs.core.Keyword(null,\"indent-reset\",\"indent-reset\",900463610),new cljs.core.Keyword(null,\"element-binding-group\",\"element-binding-group\",146550043),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)],[(0),(1),(1),(0),(0),(1),(0),(0),(0),(2),(0),(0),(1),(0),(0),(1),(0),(0),(2),(1),(0),(0),(0),(0)]);\nzprint.guide.guide_insert = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"group-begin\",\"group-begin\",447482475),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(3)], null)], null),new cljs.core.Keyword(null,\"group-end\",\"group-end\",-574931147),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(1)], null)], null)], null);\n/**\n * Figure out the arg-count for a guide.\n */\nzprint.guide.handle_args = (function zprint$guide$handle_args(p__42127,command){\nvar vec__42161 = p__42127;\nvar guide = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42161,(0),null);\nvar running_arg_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42161,(1),null);\nif((running_arg_count === (0))){\nvar command_arg_count = (function (){var or__5045__auto__ = (zprint.guide.guide_arg_count.cljs$core$IFn$_invoke$arity$1 ? zprint.guide.guide_arg_count.cljs$core$IFn$_invoke$arity$1(command) : zprint.guide.guide_arg_count.call(null,command));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn (0);\n}\n})();\nvar before = new cljs.core.Keyword(null,\"before\",\"before\",-1633692388).cljs$core$IFn$_invoke$arity$1((zprint.guide.guide_insert.cljs$core$IFn$_invoke$arity$1 ? zprint.guide.guide_insert.cljs$core$IFn$_invoke$arity$1(command) : zprint.guide.guide_insert.call(null,command)));\nvar after = new cljs.core.Keyword(null,\"after\",\"after\",594996914).cljs$core$IFn$_invoke$arity$1((zprint.guide.guide_insert.cljs$core$IFn$_invoke$arity$1 ? zprint.guide.guide_insert.cljs$core$IFn$_invoke$arity$1(command) : zprint.guide.guide_insert.call(null,command)));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__42277 = guide;\nvar G__42277__$1 = (cljs.core.truth_(before)?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__42277,before):G__42277);\nvar G__42277__$2 = ((cljs.core.empty_QMARK_(guide))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__42277__$1,new cljs.core.Keyword(null,\"element\",\"element\",1974019749)):G__42277__$1);\nvar G__42277__$3 = (((!(cljs.core.empty_QMARK_(guide))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__42277__$2,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], 0)):G__42277__$2);\nif(cljs.core.truth_(after)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__42277__$3,after);\n} else {\nreturn G__42277__$3;\n}\n})(),command_arg_count], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.cljs$core$IFn$_invoke$arity$2(guide,new cljs.core.Keyword(null,\"element\",\"element\",1974019749)),(running_arg_count - (1))], null);\n}\n});\n/**\n * Print out a guide\n */\nzprint.guide.guideguide = (function zprint$guide$guideguide(var_args){\nvar G__42280 = arguments.length;\nswitch (G__42280) {\ncase 0:\nreturn zprint.guide.guideguide.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 3:\nreturn zprint.guide.guideguide.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.guideguide.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"guideguide\";\n}));\n\n(zprint.guide.guideguide.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nif(cljs.core.truth_((function (){var G__42287 = cljs.core.first(sexpr);\nreturn (zprint.guide.guide_arg_count.cljs$core$IFn$_invoke$arity$1 ? zprint.guide.guide_arg_count.cljs$core$IFn$_invoke$arity$1(G__42287) : zprint.guide.guide_arg_count.call(null,G__42287));\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),cljs.core.first(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.guide.handle_args,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,(0)], null),sexpr))], null);\n} else {\nreturn null;\n}\n}));\n\n(zprint.guide.guideguide.cljs$lang$maxFixedArity = 3);\n\n/**\n * Handle defprotocol with options.\n */\nzprint.guide.defprotocolguide = (function zprint$guide$defprotocolguide(var_args){\nvar G__42297 = arguments.length;\nswitch (G__42297) {\ncase 0:\nreturn zprint.guide.defprotocolguide.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 3:\nreturn zprint.guide.defprotocolguide.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.defprotocolguide.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"defprotocolguide\";\n}));\n\n(zprint.guide.defprotocolguide.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(sexpr),new cljs.core.Symbol(null,\"defprotocol\",\"defprotocol\",1388695348,null))){\nvar third = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(sexpr,(2),null);\nvar fourth = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(sexpr,(3),null);\nvar fifth = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(sexpr,(4),null);\nvar vec__42300 = ((((typeof third === 'string') && ((fourth instanceof cljs.core.Keyword))))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [third,fourth,fifth], null):((typeof third === 'string')?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [third,null,null], null):(((third instanceof cljs.core.Keyword))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,third,fourth], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,null], null)\n)));\nvar docstring = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42300,(0),null);\nvar option = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42300,(1),null);\nvar option_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42300,(2),null);\nvar guide = (function (){var G__42313 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element-best\",\"element-best\",1084358317),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null);\nvar G__42313__$1 = (cljs.core.truth_(docstring)?cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__42313,new cljs.core.Keyword(null,\"element\",\"element\",1974019749),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], 0)):G__42313);\nvar G__42313__$2 = (cljs.core.truth_(option)?cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__42313__$1,new cljs.core.Keyword(null,\"element\",\"element\",1974019749),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], 0)):G__42313__$1);\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__42313__$2,new cljs.core.Keyword(null,\"element-newline-best-*\",\"element-newline-best-*\",-1915830000));\n\n})();\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),guide,new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456),null], null)], null)], null);\n} else {\nreturn null;\n}\n}));\n\n(zprint.guide.defprotocolguide.cljs$lang$maxFixedArity = 3);\n\n/**\n * Handle defprotocol signatures with arities and doc string on their \n *   own lines.\n */\nzprint.guide.signatureguide1 = (function zprint$guide$signatureguide1(var_args){\nvar G__42320 = arguments.length;\nswitch (G__42320) {\ncase 0:\nreturn zprint.guide.signatureguide1.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 3:\nreturn zprint.guide.signatureguide1.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.guide.signatureguide1.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn \"signatureguide1\";\n}));\n\n(zprint.guide.signatureguide1.cljs$core$IFn$_invoke$arity$3 = (function (options,len,sexpr){\nvar vectors = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.vector_QMARK_,sexpr);\nvar guide = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"group-begin\",\"group-begin\",447482475)], null);\nvar guide__$1 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,guide,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(cljs.core.count(vectors),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)));\nvar guide__$2 = cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(guide__$1,new cljs.core.Keyword(null,\"group-end\",\"group-end\",-574931147),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"element-newline-best-group\",\"element-newline-best-group\",1028915328),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),new cljs.core.Keyword(null,\"element-*\",\"element-*\",-948937262)], 0));\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"guide\",\"guide\",-935563924),guide__$2], null);\n}));\n\n(zprint.guide.signatureguide1.cljs$lang$maxFixedArity = 3);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","zprint/guide.cljc","~:line",1,"~:column",14,"~:end-line",1,"~:end-column",26,"~:no-doc",true],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.tools.reader.impl.utils","~$cljs.tools.reader.impl.utils","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.impl.commons","~$cljs.tools.reader.impl.commons","~$clojure.tools.reader.impl.errors","~$cljs.tools.reader.impl.errors","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.tools.reader.edn","~$cljs.tools.reader.edn","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl"],"~:use-macros",["^ ","~$dbg","~$zprint.macros","~$dbg-s","^U","~$dbg-pr","^U","~$dbg-s-pr","^U","~$dbg-form","^U","~$dbg-print","^U","~$zfuture","^U"],"~:excludes",["~#set",[]],"~:name","~$zprint.guide","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^19","~$s","^19","~$rewrite-clj.zip","^1:","~$z","^1:","~$zprint.util","^1;","~$cljs.core","^1<","~$goog","^1="],"~:seen",["^11",["~:require","~:require-macros"]],"~:uses",["^ ","~$column-alignment","^1;","~$cumulative-alignment","^1;"],"^1@",["^ ","^U","^U","^1<","^1<","^1:","^1:","~$z","^1:"],"~:form",["~#list",["~$ns","^13",["^1@",["^U","~:refer",["^T","^V","^W","^X","^Y","^Z","^["]]],["^1E",["^1?",["^19","~:as","~$s"],["^1:","^1H","~$z"],["^1;","^1G",["^1B","^1C"]]]]]],"~:flags",["^ ","^1@",["^11",[]],"^1?",["^11",[]]],"~:js-deps",["^ "],"~:deps",["^1=","^1<","^19","^1:","^1;"]],"^16","^13","~:resource-id",["~:shadow.build.classpath/resource","zprint/guide.cljc"],"~:compiled-at",1666857667674,"^14",["^ ","^19","^19","~$s","^19","^1:","^1:","~$z","^1:","^1;","^1;","^1<","^1<","^1=","^1=","^U","^U"],"~:resource-name","zprint/guide.cljc","~:warnings",[],"~:source","(ns ^:no-doc zprint.guide\n  #?@(:cljs [[:require-macros\n              [zprint.macros :refer\n               [dbg dbg-s dbg-pr dbg-s-pr dbg-form dbg-print zfuture]]]])\n  (:require #?@(:clj [[zprint.macros :refer\n                       [dbg-pr dbg-s-pr dbg dbg-s dbg-form dbg-print zfuture]]])\n            [clojure.string :as s]\n            [rewrite-clj.zip :as z]\n            [zprint.util :refer [column-alignment cumulative-alignment]]))\n\n;;\n;; Contains functions which can be called with {:option-fn <fn>} to produce\n;; a \"guide\", which is, roughtly, a sequence comprised of keywords\n;; which describe how to format an expression.  A guide must be created\n;; explicitly for the expression to be formatted.\n;;\n;; For instance, this expression: (a b c d e f g) could be formatted\n;; for this output:\n;;\n;; (a b c\n;;  d e f\n;;  g)\n;;\n;; by this guide:\n;;\n;; [:element :element :element :newline :element :element :element :newline\n;;  :element]\n;;          \n;; There are a lot more keywords and other things which can be in a guide\n;; than demonstrated above.\n\n;;\n;; # Guide for \"rules of defn\", an alternative way to format defn expressions.\n;;\n\n(defn rodguide\n  \"Given a structure which starts with defn, create a guide for the\n  'rules of defn', an alternative approach to formatting a defn.\"\n  ([] \"rodguide\")\n  ; If you call a guide with partial because it has its own options map,\n  ; the \"no-argument\" arity must include the options map!\n  ([rod-options] \"rodguide\")\n  ; Since we have released this before, we will also allow it to be called\n  ; without are-options\n  ([options len sexpr] (rodguide {} options len sexpr))\n  ([rod-options options len sexpr]\n   (when (= (str (first sexpr)) \"defn\")\n     (let [multi-arity-nl? (get rod-options :multi-arity-nl? true)\n           docstring? (string? (nth sexpr 2))\n           rest (nthnext sexpr (if docstring? 3 2))\n           multi-arity? (not (vector? (first rest)))\n           rest (if multi-arity? rest (next rest))\n           rest-guide (repeat (dec (count rest)) :element)\n           rest-guide\n             (into []\n                   (if (and multi-arity? multi-arity-nl?)\n                     (interleave rest-guide (repeat :newline) (repeat :newline))\n                     (interleave rest-guide (repeat :newline))))\n           ; Make interleave into interpose\n           rest-guide (conj rest-guide :element)\n           guide (cond-> [:element :element]\n                   docstring? (conj :newline :element :newline)\n                   (not multi-arity?) (conj :element :newline)\n                   (and multi-arity? (not docstring?)) (conj :newline)\n                   :rest (into rest-guide))\n           option-map {:guide guide, :next-inner {:list {:option-fn nil}}}]\n       (if multi-arity?\n         (assoc option-map\n           :next-inner {:list {:option-fn nil},\n                        :fn-map {:vector :force-nl},\n                        :next-inner-restore [[:fn-map :vector]]})\n         option-map)))))\n\n; Use this to use the above:\n;\n; (czprint rod4\n;    {:parse-string? true\n;     :fn-map {\"defn\" [:guided {:list {:option-fn rodguide}}]}})\n\n;;\n;; # Guide to replicate the existing output for {:style :moustache}\n;;\n\n(defn constant-or-vector?\n  \"Return true if a constant or vector.\"\n  [element]\n  #_(println \"c-or-v?\" element)\n  (or (number? element)\n      (string? element)\n      (vector? element)\n      (keyword? element)\n      (= element true)\n      (= element false)))\n\n(defn count-constants\n  [[constant-count possible-constant?] element]\n  (if possible-constant?\n    (if (constant-or-vector? element)\n      [(inc constant-count) (not possible-constant?)]\n      (reduced [constant-count possible-constant?]))\n    [constant-count (not possible-constant?)]))\n\n(defn moustacheguide\n  \"Reimplement :style :moustache with guides.\"\n  ([] \"moustacheguide\")\n  ([options len sexpr]\n   ; First, find the pairs.\n   (let [rev-sexpr (reverse sexpr)\n         [constant-count _] (reduce count-constants [0 false] rev-sexpr)\n         pair-count (* constant-count 2)\n         pair-guide (into [] (repeat pair-count :element))\n         pair-guide (conj pair-guide :group-end)\n         pair-guide (conj pair-guide :element-pair-group)\n         non-pair-count (- (count sexpr) pair-count)\n         non-pair-guide (repeat non-pair-count :element)\n         non-pair-guide (into [] (interpose :newline non-pair-guide))\n         guide (conj non-pair-guide :newline :group-begin)\n         guide (concat guide pair-guide)]\n     (dbg-s options\n            :guide\n            \"moustacheguide: sexpr\" sexpr\n            \"pair-count:\" pair-count\n            \"output:\" guide)\n     {:guide guide,\n      :pair {:justify? true},\n      :next-inner {:pair {:justify? false}, :list {:option-fn nil}}})))\n\n; Use this to use the above:\n;\n;(czprint mapp6g\n;   {:parse-string? true\n;    :fn-map {\"m/app\" [:guided {:list {:option-fn moustacheguide}}]}})\n\n\n;;\n;; # Guide for the \"are\" function\n;;\n\n(defn add-double-quotes\n  \"Given two arguments, an s-expression and a string, if the s-expression\n  is actually a string, add a double quote on to the beginning and end of\n  the string.\"\n  [sexpr s]\n  (if (string? sexpr) (str \"\\\"\" s \"\\\"\") s))\n\n(defn areguide\n  \"Format are test functions.  Call it with (partial {} areguide), where\n  the map can be {:justify? true} to justify the various rows. It will\n  use {:pair {:justify {:max-variance n}}} for the variance, but you can\n  give it a variance to use with {:max-variance n} in the map which is\n  its first argument.\"\n  ([] \"areguide\")\n  ; If you call a guide with partial because it has its own options map,\n  ; the \"no-argument\" arity must include the options map!\n  ([are-options] \"areguide\")\n  ; Since we have released this before, we will also allow it to be called\n  ; without are-options\n  ([options len sexpr] (areguide {} options len sexpr))\n  ([are-options options len sexpr]\n   (let [justify? (:justify? are-options)\n         max-variance (when justify?\n                        (or (:max-variance are-options)\n                            (:max-variance (:justify (:pair options)))))\n         caller-options ((:caller options) options)\n         current-indent (or (:indent-arg caller-options)\n                            (:indent caller-options))\n         are-indent (:indent are-options)\n         table-indent (+ current-indent (or are-indent current-indent))\n         arg-vec-len (count (second sexpr))\n         test-len (- (count sexpr) 3)\n         rows (/ test-len arg-vec-len)\n         excess-tests (- test-len (* rows arg-vec-len))\n         alignment-vec\n           (when justify?\n             (let [; zloc-seq no comments\n                   zfn-map (:zfn-map options)\n                   zloc-seq-nc\n                     ((:zmap-no-comment zfn-map) identity (:zloc options))\n                   args (drop 3 zloc-seq-nc)\n                   ; Get the lengths of the actual zloc values, not the sexpr\n                   arg-strs (mapv (:zstring zfn-map) args)\n                   #_(prn \"early arg-strs:\" arg-strs)\n                   ; This makes strings too long, but it was\n                   ; presumably added for some reason?  Issue #212\n                   ; arg-strs (mapv add-double-quotes (drop 3 sexpr) arg-strs)\n                   #_(prn \"later arg-strs:\" arg-strs)\n                   seq-of-seqs (partition arg-vec-len arg-vec-len [] arg-strs)\n                   max-width-vec (column-alignment max-variance\n                                                   seq-of-seqs\n                                                   nil\n                                                   :no-string-adj?)\n                   alignment-vec (cumulative-alignment max-width-vec)]\n               #_(prn \"max-width-vec:\" max-width-vec\n                      \"alignment-vec:\" alignment-vec)\n               alignment-vec))\n         mark-guide\n           (vec (flatten\n                  (mapv vector (repeat :mark-at-indent) (range) alignment-vec)))\n         new-row-guide (cond-> [:element :indent table-indent]\n                         (not (empty? alignment-vec))\n                           (into (interleave (repeat :align)\n                                             (range (count alignment-vec))\n                                             (repeat :element)))\n                         (empty? alignment-vec) (into (repeat (dec arg-vec-len)\n                                                              :element))\n                         true (conj :indent-reset :newline))\n         multi-row-guide (apply concat (repeat rows new-row-guide))\n         guide (cond-> (-> [:element :element :element-best :newline]\n                           (into mark-guide)\n                           (into multi-row-guide))\n                 (pos? excess-tests) (conj :element-*))]\n     #_(prn \"guide:\" guide)\n     {:guide guide, :next-inner {:list {:option-fn nil}}})))\n\n(defn areguide-basic\n  \"Format are test functions, no justification.\"\n  ([] \"areguide\")\n  ([options len sexpr]\n   (let [arg-vec-len (count (second sexpr))\n         beginning (take 3 sexpr)\n         test-len (- (count sexpr) 3)\n         rows (/ test-len arg-vec-len)\n         excess-tests (- test-len (* rows arg-vec-len))\n         single-row (into [:newline] (repeat arg-vec-len :element))\n         row-guide (apply concat (repeat rows single-row))\n         guide (cond-> (-> [:element :element :element-best]\n                           (into row-guide))\n                 (pos? excess-tests) (conj :newline :element-*))]\n     {:guide guide, :next-inner {:list {:option-fn nil}}})))\n\n\n; Do this to use the above:\n;\n; (czprint are3\n;   {:parse-string? true\n;    :fn-map {\"are\" [:guided {:list {:option-fn areguide}}]}})\n;\n\n;;\n;; # Guide to justify the content of the vectors in a (:require ...)\n;;\n\n;\n; A much simpler version of the require guide.  This version doesn't require\n; use of the call-stack, and has only one option-fn instead of two.  It also\n; uses the new variance-based justification capabilities.\n;\n\n(defn jrequireguide\n  \"Justify the first things in a variety of settings.  The first argument\n  is the things to recognize, and can be :require, :require-macros, or \n  :import. :require and :require-macros are handled the same, and :import\n  is handled differently since it has the values all in the same expression.\n  Handles sequences with lists or vectors.\"\n  ([] \"jrequireguide\")\n  ; If you call a guide with partial because it has its a required first\n  ; argument, ; the \"no-argument\" arity must include the first argument!\n  ([keyword] \"jrequireguide\")\n  ([keyword options len sexpr]\n   (when (= (first sexpr) keyword)\n     (let [vectors+lists (filter #(or (vector? %) (list? %)) sexpr)]\n       (when (not (empty? vectors+lists))\n         (let [max-width-vec (column-alignment (:max-variance\n                                                 (:justify (:pair options)))\n                                               vectors+lists\n                                               ; only do the first column\n                                               1)\n               _ (dbg-s options\n                        :guide\n                        \"jrequireguide max-width-vec:\"\n                        max-width-vec)\n               max-first (first max-width-vec)\n               element-guide :element-pair-*\n               vector-guide (if max-first\n                              (if (= (first sexpr) :import)\n                                [:mark-at 0 (inc max-first) :element :align 0\n                                 :indent-here #_(+ max-first 2) :element-*]\n                                [:mark-at 0 (inc max-first) :element :align 0\n                                 element-guide])\n                              ; We can't justify things, fall back to this.\n                              [:element element-guide])]\n           ; Do this for all of the first level vectors and lists  below the\n           ; :require, but no other vectors or lists more deeply nested.\n           {:next-inner {:vector {:option-fn (fn [_ _ _] {:guide vector-guide}),\n                                  :wrap-multi? true,\n                                  :hang? true},\n                         :list {:option-fn (fn [_ _ _] {:guide vector-guide}),\n                                :wrap-multi? true,\n                                :hang? true},\n                         :pair {:justify? true},\n                         :next-inner-restore\n                           [[:vector :option-fn] [:vector :wrap-multi?]\n                            [:vector :hang?] [:list :option-fn]\n                            [:list :wrap-multi?] [:list :hang?]\n                            [:pair :justify?]]}}))))))\n\n; Do this to use the above:\n;\n; (czprint jr1\n;    {:parse-string? true\n;    :fn-map {\":require\" [:none {:list {:option-fn jrequireguide}}]}})\n\n;;\n;; # Guide to replicate the output of :arg1-mixin\n;; \n\n(defn rumguide\n  \"Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n  with guides using :spaces.  For guide testing, do not use this as a model\n  for how to write a guide.\"\n  ([] \"rumguide\")\n  ([options len sexpr]\n   (let [docstring? (string? (nth sexpr 2))\n         [up-to-arguments args-and-after]\n           (split-with #(not (or (vector? %)\n                                 (and (list? %) (vector? (first %)))))\n                       sexpr)\n         #_(println \"rumguide: up-to-arguments:\" up-to-arguments\n                    \"\\nargs-and-after:\" args-and-after)]\n     (if (empty? args-and-after)\n       {:list {:option-fn nil}}\n       (let [lt (nth sexpr (if docstring? 3 2))\n             lt? (= (str lt) \"<\")\n             mixin-indent (if lt? 2 1)\n             beginning-guide [:element :element :newline]\n             beginning-guide (if docstring?\n                               (concat beginning-guide [:element :newline])\n                               beginning-guide)\n             middle-element-count\n               (- (count up-to-arguments) 2 (if docstring? 1 0) (if lt? 1 0))\n             middle-guide\n               (if (pos? middle-element-count)\n                 (if lt? [:element :element :newline] [:element :newline])\n                 [])\n             #_(println \"middle-element-count:\" middle-element-count)\n             middle-guide (concat middle-guide\n                                  (repeat (dec middle-element-count)\n                                          [:spaces mixin-indent :element\n                                           :newline]))\n             end-element-count (count args-and-after)\n             end-guide [:element\n                        (repeat (dec end-element-count) [:newline :element])]\n             guide (concat beginning-guide middle-guide end-guide)\n             ; This could have been done so flatten wasn't necessary\n             ; but it for testing it wasn't worth the re-work.\n             guide (flatten guide)\n             #_(println \"rumguide: guide:\" guide)]\n         {:guide guide, :next-inner {:list {:option-fn nil}}})))))\n\n(defn rumguide-1\n  \"Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n  with guides using :align.  For guide testing, do not use this as a model\n  for how to write a guide.\"\n  ([] \"rumguide\")\n  ([options len sexpr]\n   (let [docstring? (string? (nth sexpr 2))\n         [up-to-arguments args-and-after]\n           (split-with #(not (or (vector? %)\n                                 (and (list? %) (vector? (first %)))))\n                       sexpr)\n         #_(println \"rumguide: up-to-arguments:\" up-to-arguments\n                    \"\\nargs-and-after:\" args-and-after)]\n     (if (empty? args-and-after)\n       {:list {:option-fn nil}}\n       (let [lt (nth sexpr (if docstring? 3 2))\n             lt? (= (str lt) \"<\")\n             beginning-guide [:element :element :newline]\n             beginning-guide (if docstring?\n                               (concat beginning-guide [:element :newline])\n                               beginning-guide)\n             middle-element-count\n               (- (count up-to-arguments) 2 (if docstring? 1 0) (if lt? 1 0))\n             middle-guide (if (pos? middle-element-count)\n                            (if lt?\n                              [:element :mark 1 :align 1 :element :newline]\n                              [:mark 1 :align 1 :element :newline])\n                            [])\n             #_(println \"middle-element-count:\" middle-element-count)\n             middle-guide (concat middle-guide\n                                  (repeat (dec middle-element-count)\n                                          [:align 1 :element :newline]))\n             end-element-count (count args-and-after)\n             end-guide [:element\n                        (repeat (dec end-element-count) [:newline :element])]\n             guide (concat beginning-guide middle-guide end-guide)\n             ; This could have been done so flatten wasn't necessary\n             ; but it for testing it wasn't worth the re-work.\n             guide (flatten guide)\n             #_(println \"rumguide: guide:\" guide)]\n         {:guide guide, :next-inner {:list {:option-fn nil}}})))))\n\n(defn rumguide-2\n  \"Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n  with guides using :indent.  This is probably the simplest and therefore the\n  best of them all.  For guide testing, do not use this as a model for how\n  to write a guide.\"\n  ([] \"rumguide\")\n  ([options len sexpr]\n   (let [docstring? (string? (nth sexpr 2))\n         [up-to-arguments args-and-after]\n           (split-with #(not (or (vector? %)\n                                 (and (list? %) (vector? (first %)))))\n                       sexpr)\n         #_(println \"rumguide: up-to-arguments:\" up-to-arguments\n                    \"\\nargs-and-after:\" args-and-after)]\n     (if (empty? args-and-after)\n       {:list {:option-fn nil}}\n       (let [lt (nth sexpr (if docstring? 3 2))\n             lt? (= (str lt) \"<\")\n             beginning-guide [:element :element :newline]\n             beginning-guide (if docstring?\n                               (concat beginning-guide [:element :newline])\n                               beginning-guide)\n             middle-element-count\n               (- (count up-to-arguments) 2 (if docstring? 1 0) (if lt? 1 0))\n             middle-guide (if (pos? middle-element-count)\n                            (if lt?\n                              [:element :indent 4 :element :newline]\n                              [:indent 4 :element :newline])\n                            [])\n             #_(println \"middle-element-count:\" middle-element-count)\n             middle-guide (concat middle-guide\n                                  (repeat (dec middle-element-count)\n                                          [:element :newline]))\n             end-element-count (count args-and-after)\n             end-guide [:indent-reset :element\n                        (repeat (dec end-element-count) [:newline :element])]\n             guide (concat beginning-guide middle-guide end-guide)\n             ; This could have been done so flatten wasn't necessary\n             ; but it for testing it wasn't worth the re-work.\n             guide (flatten guide)\n             #_(println \"rumguide: guide:\" guide)]\n         {:guide guide, :next-inner {:list {:option-fn nil}}})))))\n\n\n; Do this to use the above:\n;\n; (czprint cz8x1\n;     {:parse-string? true\n;     :fn-map {\"rum/defcs\" [:guided {:list {:option-fn rumguide}}]}})\n\n(defn odrguide\n  \"Justify O'Doyles Rules\"\n  ([] \"odrguide\")\n  ([options len sexpr]\n   (when (= (first sexpr) :what)\n     (let [[vectors beyond] (split-with vector? (next sexpr))\n           max-width-vec (column-alignment (:max-variance (:justify (:pair\n                                                                      options)))\n                                           vectors)\n           alignment-vec (cumulative-alignment max-width-vec)\n           mark-guide\n             (vec (flatten\n                    (mapv vector (repeat :mark-at) (range) alignment-vec)))\n           alignment-guide\n             (mapv vector (repeat :align) (range (count alignment-vec)))\n           vector-guide (into mark-guide\n                              (flatten [(interleave (repeat :element)\n                                                    alignment-guide)\n                                        :element-*]))\n           keyword-1 (first beyond)\n           [keyword-1-lists beyond] (split-with list? (next beyond))\n           keyword-2 (first beyond)\n           [keyword-2-lists beyond] (split-with list? (next beyond))\n           _ (dbg-s options\n                    :guide\n                    \"odrguide alignment-vec:\" alignment-vec\n                    \"mark-guide:\" mark-guide\n                    \"alignment-guide:\" alignment-guide\n                    \"vector-guide:\" vector-guide\n                    \"keyword-1:\" keyword-1\n                    \"keyword-1-lists:\" keyword-1-lists\n                    \"keyword-2:\" keyword-2\n                    \"keyword-2-lists:\" keyword-2-lists)\n           guide (cond->\n                   (-> [:element :indent 2 :options\n                        {:guide vector-guide,\n                         :vector {:wrap-multi? true, :hang? true}} :group-begin]\n                       (into (repeat (count vectors) :element))\n                       (conj :group-end\n                             :element-newline-best-group :options-reset\n                             :options {:vector {:wrap-multi? true, :hang? true}}\n                             :indent 1))\n                   keyword-1 (conj :newline :element)\n                   (not (empty? keyword-1-lists))\n                     (-> (conj :indent 2 :group-begin)\n                         (into (repeat (count keyword-1-lists) :element))\n                         (conj :group-end :element-newline-best-group\n                               :indent 1))\n                   keyword-2 (conj :newline :element)\n                   (not (empty? keyword-2-lists))\n                     (-> (conj :indent 2 :group-begin)\n                         (into (repeat (count keyword-2-lists) :element))\n                         (conj :group-end :element-newline-best-group)))]\n       (dbg-s options :guide \"odrguide:\" guide)\n       {:guide guide}))))\n\n;;\n;; Guide guide\n;;\n\n(def guide-arg-count\n  {:element 0,\n   :element-* 0,\n   :element-best 0,\n   :element-best-* 0,\n   :element-pair-group 0,\n   :element-pair-* 0,\n   :element-newline-best-group 0,\n   :element-newline-best-* 0,\n   :element-binding-group 0,\n   :element-binding-* 0,\n   :element-guide 1,\n   :element-binding-vec 0,\n   :newline 0,\n   :options 1,\n   :options-reset 0,\n   :indent 1,\n   :indent-reset 0,\n   :spaces 1,\n   :mark-at 2,\n   :mark-at-indent 2,\n   :mark 1,\n   :align 1,\n   :group-begin 0,\n   :group-end 0})\n\n(def guide-insert\n  {:group-begin {:after [:indent 3]}, :group-end {:before [:indent 1]}})\n\n(defn handle-args\n  \"Figure out the arg-count for a guide.\"\n  [[guide running-arg-count] command]\n  (if (zero? running-arg-count)\n    (let [command-arg-count (or (guide-arg-count command) 0)\n          before (:before (guide-insert command))\n          after (:after (guide-insert command))]\n      [(cond-> guide\n         before (into before)\n         (empty? guide) (conj :element)\n         (not (empty? guide)) (conj :newline :element)\n         after (into after)) command-arg-count])\n    [(conj guide :element) (dec running-arg-count)]))\n\n(defn guideguide\n  \"Print out a guide\"\n  ([] \"guideguide\")\n  ([options len sexpr]\n   (when (guide-arg-count (first sexpr))\n     {:guide (first (reduce handle-args [[] 0] sexpr))})))\n\n;;\n;; Real guide for defprotocol\n;;\n\n(declare signatureguide1)\n\n(defn defprotocolguide\n  \"Handle defprotocol with options.\"\n  ([] \"defprotocolguide\")\n  ([options len sexpr]\n   (when (= (first sexpr) 'defprotocol)\n     (let [third (nth sexpr 2 nil)\n           fourth (nth sexpr 3 nil)\n           fifth (nth sexpr 4 nil)\n           [docstring option option-value]\n             (cond (and (string? third) (keyword? fourth)) [third fourth fifth]\n                   (string? third) [third nil nil]\n                   (keyword? third) [nil third fourth]\n                   :else [nil nil nil])\n           guide (cond-> [:element :element-best :newline]\n                   docstring (conj :element :newline)\n                   option (conj :element :element :newline)\n                   :else (conj :element-newline-best-*))]\n       {:guide guide, :next-inner {:list {:option-fn nil}}}))))\n\n(defn signatureguide1\n  \"Handle defprotocol signatures with arities and doc string on their \n  own lines.\"\n  ([] \"signatureguide1\")\n  ([options len sexpr]\n   (let [vectors (filter vector? sexpr)\n         guide [:element :group-begin]\n         guide (apply conj guide (repeat (count vectors) :element))\n         guide (conj guide\n                     :group-end :element-newline-best-group\n                     :newline :element-*)]\n     {:guide guide})))\n\n","~:reader-features",["^11",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__41855","zprint.guide/rodguide","js/Error","rod-options","options","len","sexpr","zprint.guide.rodguide","cljs.core._EQ_","cljs.core/first","multi-arity-nl?","cljs.core.get","docstring?","cljs.core.nth","rest","cljs.core/nthnext","multi-arity?","cljs.core/vector?","cljs.core/next","rest-guide","cljs.core.repeat","cljs.core/count","cljs.core.into","and__5043__auto__","cljs.core.interleave","cljs.core.conj","guide","G__41864","option-map","cljs.core.assoc","zprint.guide/constant-or-vector?","element","cljs.core/Keyword","p__41866","vec__41867","zprint.guide/count-constants","constant-count","possible-constant?","cljs.core/not","cljs.core/reduced","G__41885","zprint.guide/moustacheguide","vec__41894","rev-sexpr","cljs.core/reverse","_","cljs.core.reduce","pair-count","pair-guide","non-pair-count","non-pair-guide","cljs.core.interpose","cljs.core.concat","or__5045__auto__","cljs.core.println","zprint.guide/add-double-quotes","s","G__41919","zprint.guide/areguide","are-options","zprint.guide.areguide","justify?","max-variance","caller-options","fexpr__41938","current-indent","are-indent","table-indent","arg-vec-len","cljs.core/second","test-len","rows","excess-tests","alignment-vec","zfn-map","zloc-seq-nc","G__41944","G__41945","fexpr__41943","cljs.core/identity","args","cljs.core.drop","arg-strs","cljs.core.mapv","seq-of-seqs","cljs.core.partition","max-width-vec","zprint.util.column_alignment","zprint.util/cumulative-alignment","mark-guide","cljs.core/vec","cljs.core/flatten","cljs.core/vector","cljs.core.range","new-row-guide","G__41946","cljs.core/empty?","multi-row-guide","cljs.core.apply","cljs.core/concat","G__41948","G__41958","zprint.guide/areguide-basic","beginning","cljs.core.take","single-row","row-guide","G__41979","G__41991","zprint.guide/jrequireguide","keyword","vectors+lists","p1__41980#","cljs.core.filter","cljs.core/list?","max-first","element-guide","vector-guide","G__42009","zprint.guide/rumguide","vec__42011","up-to-arguments","args-and-after","p1__42005#","cljs.core/split-with","lt","lt?","mixin-indent","beginning-guide","middle-element-count","middle-guide","end-element-count","end-guide","G__42029","zprint.guide/rumguide-1","vec__42041","p1__42020#","G__42069","zprint.guide/rumguide-2","vec__42070","p1__42063#","G__42087","zprint.guide/odrguide","vec__42099","vec__42102","vec__42105","vectors","beyond","alignment-guide","keyword-1","keyword-1-lists","keyword-2","keyword-2-lists","G__42119","zprint.guide/guide-arg-count","zprint.guide/guide-insert","p__42127","vec__42161","zprint.guide/handle-args","running-arg-count","command","command-arg-count","before","after","G__42277","G__42280","zprint.guide/guideguide","G__42287","G__42297","zprint.guide/defprotocolguide","vec__42300","third","fourth","fifth","docstring","option","option-value","G__42313","G__42320","zprint.guide/signatureguide1","cljs.core/conj"]],"~:used-vars",["^11",["~$zprint.guide/rumguide","~$cljs.core/vector?","~$cljs.core/filter","~$cljs.core/=","~$zprint.guide/rumguide-2","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/apply","~$cljs.core/identity","~$cljs.core/Keyword","~$cljs.core/take","~$zprint.util/column-alignment","~$cljs.core/mapv","~$cljs.core/concat","~$zprint.guide/guide-arg-count","~$zprint.guide/moustacheguide","~$zprint.guide/guide-insert","~$cljs.core/empty?","~$cljs.core/into","~$cljs.core/conj","~$zprint.util/cumulative-alignment","~$zprint.guide/guideguide","~$zprint.guide/add-double-quotes","~$cljs.core/nthnext","~$cljs.core/get","~$zprint.guide/jrequireguide","~$cljs.core/flatten","~$zprint.guide/defprotocolguide","~$cljs.core/partition","~$zprint.guide/signatureguide1","~$cljs.core/reduced","~$cljs.core/nth","~$cljs.core/list?","~$cljs.core/second","~$zprint.guide/rodguide","~$cljs.core/println","~$zprint.guide/handle-args","~$cljs.core/interleave","~$cljs.core/split-with","~$cljs.core/next","~$cljs.core/vec","~$cljs.core/not","~$cljs.core/assoc","~$cljs.core/interpose","~$cljs.core/reverse","~$cljs.core/range","~$zprint.guide/areguide-basic","~$cljs.core/repeat","~$zprint.guide/constant-or-vector?","~$cljs.core/first","~$zprint.guide/rumguide-1","~$zprint.guide/count-constants","~$zprint.guide/odrguide","~$js/Error","~$cljs.core/vector","~$zprint.guide/areguide","~$cljs.core/drop"]]],"~:cache-keys",["~#cmap",[["^1M","rewrite_clj/zip/options.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^11",[]],"~:deps-syms",["^1=","^1<","~$rewrite-clj.node.protocols"]]],["^1M","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","~$goog.dom.HtmlElement"]]],["^1M","rewrite_clj/zip/walk.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","~$rewrite-clj.zip.move","~$rewrite-clj.zip.subedit"]]],["^1M","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^19","~$goog.string"]]],["^1M","rewrite_clj/node/reader_macro.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3@","~$rewrite-clj.node.whitespace"]]],["^1M","rewrite_clj/parser.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","~$rewrite-clj.node.forms","~$rewrite-clj.parser.core","~$rewrite-clj.reader"]]],["^1M","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3D"]]],["^1M","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1M","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3L"]]],["^1M","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3M"]]],["^1M","rewrite_clj/parser/whitespace.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3E","^3H"]]],["^1M","rewrite_clj/node/regex.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3@"]]],["^1M","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^F","^J","^@","^D","~$cljs.tools.reader","^3D","~$goog.string.StringBuffer"]]],["^1M","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<"]]],["^1M","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^J","^@","^D","^F","^3I","^3D","^3U"]]],["^1M","rewrite_clj/zip/base.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","~$rewrite-clj.custom-zipper.core","^3F","^3@","~$rewrite-clj.parser","~$rewrite-clj.zip.options","~$rewrite-clj.zip.whitespace"]]],["^1M","rewrite_clj/zip/editz.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V","~$rewrite-clj.custom-zipper.utils","^3@","~$rewrite-clj.node.token","^3E","~$rewrite-clj.zip.base","^3X","~$rewrite-clj.zip.removez","^3Y"]]],["^1M","rewrite_clj/parser/token.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3[","^3H"]]],["^1M","rewrite_clj/node/uneval.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3@"]]],["^1M","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","rewrite_clj/parser/keyword.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","~$rewrite-clj.node.keyword","^3H"]]],["^1M","rewrite_clj/zip/seqz.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V","^40","~$rewrite-clj.zip.editz","~$rewrite-clj.zip.findz","~$rewrite-clj.zip.insert","^3B"]]],["^1M","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3M"]]],"~:SHADOW-TIMESTAMP",[1666857604000,1666857604000,1666857293000],["^1M","rewrite_clj/node/keyword.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3@"]]],["^1M","rewrite_clj/node/token.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3@"]]],["^1M","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3M","~$goog.reflect"]]],["^1M","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3M","~$goog.fs.blob","^3N","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3P","^3Q","^3R","^3S"]]],["^1M","rewrite_clj/node/comment.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3@"]]],["^1M","rewrite_clj/zip/subedit.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V","^40","^3X"]]],["^1M","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","rewrite_clj/parser/string.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^19","~$rewrite-clj.node.stringz","^3H","^3U"]]],["^1M","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3R","~$goog.html.SafeUrl","^3S","^3M","^3L"]]],["^1M","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3M","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^49","~$goog.html.SafeStyle","^4<","^3O","~$goog.html.uncheckedconversions","^3R","^3L"]]],["^1M","rewrite_clj/zip/removez.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V","^3Z","^3B","^3Y"]]],["^1M","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<"]]],["^1M","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3R","^3P","^3Q","^49","^4@","~$goog.html.SafeStyleSheet","^4<","~$goog.dom.TagName","^3O","^3S","^3M","~$goog.labs.userAgent.browser","^3I","^3J","^3L","~$goog.dom.tags","^4:"]]],["^1M","rewrite_clj/node/forms.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3@"]]],["^1M","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3J"]]],["^1M","rewrite_clj/node/integer.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","~$rewrite-clj.interop","^3@"]]],["^1M","rewrite_clj/parser/core.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","~$rewrite-clj.node.comment","~$rewrite-clj.node.fn","~$rewrite-clj.node.meta","^3@","~$rewrite-clj.node.quote","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.regex","~$rewrite-clj.node.seq","^3[","~$rewrite-clj.node.uneval","~$rewrite-clj.parser.keyword","~$rewrite-clj.parser.namespaced-map","~$rewrite-clj.parser.string","~$rewrite-clj.parser.token","~$rewrite-clj.parser.whitespace","^3H"]]],["^1M","rewrite_clj/node/fn.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^19","~$clojure.walk","^4F","^3@"]]],["^1M","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","rewrite_clj/node/protocols.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^19","^4F"]]],["^1M","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1M","rewrite_clj/zip/whitespace.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V","^4G","~$rewrite-clj.node.extras","^3E"]]],["^1M","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3I","^3M","~$goog.collections.maps","^3D","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1M","rewrite_clj/node/meta.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^4F","^3@","^3E"]]],["^1M","rewrite_clj/node/stringz.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^19","^L","^3@"]]],["^1M","rewrite_clj/parser/namespaced_map.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","~$rewrite-clj.node.namespaced-map","^3@","^3E","^3H"]]],["^1M","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","rewrite_clj/node/whitespace.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3@","^3H"]]],["^1M","zprint/guide.cljc"],["6c7de285c399d67aaa77693a88b73d129953fa1f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^19","^1:","^1;"]]],["^1M","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","rewrite_clj/zip/move.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V","^3Y"]]],["^1M","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","rewrite_clj/node/quote.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3@"]]],["^1M","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",[]]],["^1M","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3I","^3J"]]],["^1M","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^J","^19","~$cljs.tools.reader.impl.inspect"]]],["^1M","zprint/util.cljc"],["6c7de285c399d67aaa77693a88b73d129953fa1f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^19"]]],["^1M","rewrite_clj/zip/context.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V","^3@","~$rewrite-clj.zip.seqz","~$rewrite-clj.zip.walk"]]],["^1M","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3D","^3U"]]],["^1M","rewrite_clj/zip/findz.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V","^40","^3B"]]],["^1M","rewrite_clj/zip.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V","~$rewrite-clj.node.coercer","^40","~$rewrite-clj.zip.context","^43","^44","^45","^3B","^41","^53","^3C","^54","^3Y"]]],["^1M","rewrite_clj/zip/insert.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V","^3@","^3E","^3Y"]]],["^1M","rewrite_clj/node/namespaced_map.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3@"]]],["^1M","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","~$goog.dom.safe","^4A","^3R","^3L"]]],["^1M","rewrite_clj/custom_zipper/core.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","~$clojure.zip","~$rewrite-clj.custom-zipper.switchable","^3@"]]],["^1M","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","~$goog.labs.userAgent","^3L"]]],["^1M","clojure/zip.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<"]]],["^1M","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^@","^3D","^3U"]]],["^1M","rewrite_clj/reader.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^L","^D","^F","^@","^J","^4F","^3U"]]],["^1M","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","rewrite_clj/custom_zipper/utils.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3V"]]],["^1M","rewrite_clj/node/coercer.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^19","^4G","^4H","^3F","~$rewrite-clj.node.integer","^42","^4I","^51","^3@","^4J","^4K","^4L","^4M","^4;","^3[","^4N","^3E"]]],["^1M","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3M","^4?","^49","^4@","^4B","^4<","^3O","^3R","^3L","^3P"]]],["^1M","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^F","^J","^@"]]],["^1M","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1="]]],["^1M","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","~$goog.math.Long","~$goog.math.Integer","^3D","^3J","^3I","~$goog.Uri","^3U"]]],["^1M","rewrite_clj/custom_zipper/switchable.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<"]]],["^1M","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3R","^3S","^4:","^3M"]]],["^1M","rewrite_clj/node/extras.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^4G","^3E"]]],["^1M","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3R","^4@","^3S","^3J","^3M","^3L"]]],["^1M","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^47"]]],["^1M","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3M","^3D"]]],["^1M","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^3M","^3S"]]],["^1M","rewrite_clj/interop.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^3D","~$goog.string.format"]]],["^1M","rewrite_clj/node/seq.cljc"],["3744f553562a31e10c2a7cd37758888e3b691f01","^3<",["^ ","^3=",null,"^3>",["^11",[]],"^3?",["^1=","^1<","^4F","^3@"]]]]],"~:clj-info",["^ ","jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/reader.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/node/protocols.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/interop.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/utils.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/custom_zipper/core.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/zip.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/commons.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666857314000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/node/comment.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/parser.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/node/whitespace.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/zip/whitespace.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/custom_zipper/switchable.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/node/forms.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1663156501000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/zip/subedit.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/parser/core.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/node/extras.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/zip/options.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1666857293000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1666857293000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/zip.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/rewrite-clj/rewrite-clj/1.0.699-alpha/rewrite-clj-1.0.699-alpha.jar!/rewrite_clj/zip/base.cljc",1666857316000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1666857280000,"jar:file:/Users/aleksey/.m2/repository/zprint/zprint/1.2.1/zprint-1.2.1.jar!/zprint/macros.cljc",1666857315000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","zprint/guide.cljc","^7",1,"^8",14,"^9",1,"^:",26,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q","^R"],"^S",["^ ","^T","^U","^V","^U","^W","^U","^X","^U","^Y","^U","^Z","^U","^[","^U"],"^10",["^11",[]],"^12","^13","^14",["^ "],"^17",null,"^18",["^ ","^19","^19","~$s","^19","^1:","^1:","~$z","^1:","^1;","^1;","^1<","^1<","^1=","^1="],"^1>",["^11",["^1?","^1@"]],"~:shadow/js-access-global",["^11",["Error"]],"^1A",["^ ","^1B","^1;","^1C","^1;"],"~:defs",["^ ","~$rumguide-2",["^ ","~:protocol-inline",null,"^5",["^ ","^6","zprint/guide.cljc","^7",392,"^8",7,"^9",392,"^:",17,"~:arglists",["^1E",["~$quote",["^1E",[[],["~$options","~$len","~$sexpr"]]]]],"~:doc","Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n  with guides using :indent.  This is probably the simplest and therefore the\n  best of them all.  For guide testing, do not use this as a model for how\n  to write a guide.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"~:arglists-meta",["^1E",[null,null]]]],"^12","^21","^6","zprint/guide.cljc","^:",17,"^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]],"^6[",[[],["^6S","^6T","^6U"]],"~:protocol-impl",null,"^6Y",3,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"~:methods",[["^ ","^6Y",0,"^6X",false,"~:tag","~$string"],["^ ","^6Y",3,"^6X",false,"^73","~$cljs.core/IMap"]],"^7",392,"^9",392,"^6Z",3,"~:fn-var",true,"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^6V","Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n  with guides using :indent.  This is probably the simplest and therefore the\n  best of them all.  For guide testing, do not use this as a model for how\n  to write a guide."],"~$guide-arg-count",["^ ","^12","^2;","^6","zprint/guide.cljc","^7",502,"^8",1,"^9",502,"^:",21,"^5",["^ ","^6","zprint/guide.cljc","^7",502,"^8",6,"^9",502,"^:",21],"^73","^75"],"~$moustacheguide",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",103,"^8",7,"^9",103,"^:",21,"^6Q",["^1E",["^6R",["^1E",[[],["^6S","^6T","^6U"]]]]],"^6V","Reimplement :style :moustache with guides.","^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]]],"^12","^2<","^6","zprint/guide.cljc","^:",21,"^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]],"^6[",[[],["^6S","^6T","^6U"]],"^71",null,"^6Y",3,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",3,"^6X",false,"^73","^75"]],"^7",103,"^9",103,"^6Z",3,"^76",true,"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^6V","Reimplement :style :moustache with guides."],"~$guide-insert",["^ ","^12","^2=","^6","zprint/guide.cljc","^7",528,"^8",1,"^9",528,"^:",18,"^5",["^ ","^6","zprint/guide.cljc","^7",528,"^8",6,"^9",528,"^:",18],"^73","^75"],"~$rumguide",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",307,"^8",7,"^9",307,"^:",15,"^6Q",["^1E",["^6R",["^1E",[[],["^6S","^6T","^6U"]]]]],"^6V","Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n  with guides using :spaces.  For guide testing, do not use this as a model\n  for how to write a guide.","^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]]],"^12","^1Y","^6","zprint/guide.cljc","^:",15,"^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]],"^6[",[[],["^6S","^6T","^6U"]],"^71",null,"^6Y",3,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",3,"^6X",false,"^73","^75"]],"^7",307,"^9",307,"^6Z",3,"^76",true,"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^6V","Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n  with guides using :spaces.  For guide testing, do not use this as a model\n  for how to write a guide."],"~$add-double-quotes",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",139,"^8",7,"^9",139,"^:",24,"^6Q",["^1E",["^6R",["^1E",[["^6U","~$s"]]]]],"^6V","Given two arguments, an s-expression and a string, if the s-expression\n  is actually a string, add a double quote on to the beginning and end of\n  the string."],"^12","^2C","^6","zprint/guide.cljc","^:",24,"^6[",["^1E",[["^6U","~$s"]]],"^71",null,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^7",139,"~:ret-tag",["^11",[null,"^74"]],"^9",139,"^6Z",2,"^76",true,"^6Q",["^1E",["^6R",["^1E",[["^6U","~$s"]]]]],"^6V","Given two arguments, an s-expression and a string, if the s-expression\n  is actually a string, add a double quote on to the beginning and end of\n  the string."],"~$jrequireguide",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",249,"^8",7,"^9",249,"^:",20,"^6Q",["^1E",["^6R",["^1E",[[],["~$keyword"],["^7>","^6S","^6T","^6U"]]]]],"^6V","Justify the first things in a variety of settings.  The first argument\n  is the things to recognize, and can be :require, :require-macros, or \n  :import. :require and :require-macros are handled the same, and :import\n  is handled differently since it has the values all in the same expression.\n  Handles sequences with lists or vectors.","^6W",["^ ","^6X",false,"^6Y",4,"^6Z",4,"^6[",[[],["^7>"],["^7>","^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^7>"],["^7>","^6S","^6T","^6U"]]],"^70",["^1E",[null,null,null]]]],"^12","^2F","^6","zprint/guide.cljc","^:",20,"^6W",["^ ","^6X",false,"^6Y",4,"^6Z",4,"^6[",[[],["^7>"],["^7>","^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^7>"],["^7>","^6S","^6T","^6U"]]],"^70",["^1E",[null,null,null]]],"^6[",[[],["^7>"],["^7>","^6S","^6T","^6U"]],"^71",null,"^6Y",4,"^70",["^1E",[null,null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",1,"^6X",false,"^73","^74"],["^ ","^6Y",4,"^6X",false,"^73",["^11",["^75","~$clj-nil"]]]],"^7",249,"^9",249,"^6Z",4,"^76",true,"^6Q",["^1E",[[],["^7>"],["^7>","^6S","^6T","^6U"]]],"^6V","Justify the first things in a variety of settings.  The first argument\n  is the things to recognize, and can be :require, :require-macros, or \n  :import. :require and :require-macros are handled the same, and :import\n  is handled differently since it has the values all in the same expression.\n  Handles sequences with lists or vectors."],"~$rodguide",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",36,"^8",7,"^9",36,"^:",15,"^6Q",["^1E",["^6R",["^1E",[[],["~$rod-options"],["^6S","^6T","^6U"],["^7A","^6S","^6T","^6U"]]]]],"^6V","Given a structure which starts with defn, create a guide for the\n  'rules of defn', an alternative approach to formatting a defn.","^6W",["^ ","^6X",false,"^6Y",4,"^6Z",4,"^6[",[[],["^7A"],["^6S","^6T","^6U"],["^7A","^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^7A"],["^6S","^6T","^6U"],["^7A","^6S","^6T","^6U"]]],"^70",["^1E",[null,null,null,null]]]],"^12","^2O","^6","zprint/guide.cljc","^:",15,"^6W",["^ ","^6X",false,"^6Y",4,"^6Z",4,"^6[",[[],["^7A"],["^6S","^6T","^6U"],["^7A","^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^7A"],["^6S","^6T","^6U"],["^7A","^6S","^6T","^6U"]]],"^70",["^1E",[null,null,null,null]]],"^6[",[[],["^7A"],["^6S","^6T","^6U"],["^7A","^6S","^6T","^6U"]],"^71",null,"^6Y",4,"^70",["^1E",[null,null,null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",1,"^6X",false,"^73","^74"],["^ ","^6Y",3,"^6X",false,"^73","~$any"],["^ ","^6Y",4,"^6X",false,"^73",["^11",["~$clj","^7B","^75","^7?"]]]],"^7",36,"^9",36,"^6Z",4,"^76",true,"^6Q",["^1E",[[],["^7A"],["^6S","^6T","^6U"],["^7A","^6S","^6T","^6U"]]],"^6V","Given a structure which starts with defn, create a guide for the\n  'rules of defn', an alternative approach to formatting a defn."],"~$defprotocolguide",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",558,"^8",7,"^9",558,"^:",23,"^6Q",["^1E",["^6R",["^1E",[[],["^6S","^6T","^6U"]]]]],"^6V","Handle defprotocol with options.","^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]]],"^12","^2H","^6","zprint/guide.cljc","^:",23,"^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]],"^6[",[[],["^6S","^6T","^6U"]],"^71",null,"^6Y",3,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",3,"^6X",false,"^73",["^11",["^75","^7?"]]]],"^7",558,"^9",558,"^6Z",3,"^76",true,"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^6V","Handle defprotocol with options."],"~$signatureguide1",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",577,"^8",7,"^9",577,"^:",22,"^6Q",["^1E",["^6R",["^1E",[[],["^6S","^6T","^6U"]]]]],"^6V","Handle defprotocol signatures with arities and doc string on their \n  own lines.","^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]]],"^12","^2J","^6","zprint/guide.cljc","^:",22,"^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]],"^6[",[[],["^6S","^6T","^6U"]],"^71",null,"^6Y",3,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",3,"^6X",false,"^73","^75"]],"^7",577,"^9",577,"^6Z",3,"^76",true,"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^6V","Handle defprotocol signatures with arities and doc string on their \n  own lines."],"~$handle-args",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",531,"^8",7,"^9",531,"^:",18,"^6Q",["^1E",["^6R",["^1E",[[["~$guide","~$running-arg-count"],"~$command"]]]]],"^6V","Figure out the arg-count for a guide."],"^12","^2Q","^6","zprint/guide.cljc","^:",18,"^6[",["^1E",[["~$p__42127","^7I"]]],"^71",null,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^7",531,"^7<","~$cljs.core/IVector","^9",531,"^6Z",2,"^76",true,"^6Q",["^1E",["^6R",["^1E",[[["^7G","^7H"],"^7I"]]]]],"^6V","Figure out the arg-count for a guide."],"~$areguide-basic",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",215,"^8",7,"^9",215,"^:",21,"^6Q",["^1E",["^6R",["^1E",[[],["^6S","^6T","^6U"]]]]],"^6V","Format are test functions, no justification.","^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]]],"^12","^2[","^6","zprint/guide.cljc","^:",21,"^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]],"^6[",[[],["^6S","^6T","^6U"]],"^71",null,"^6Y",3,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",3,"^6X",false,"^73","^75"]],"^7",215,"^9",215,"^6Z",3,"^76",true,"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^6V","Format are test functions, no justification."],"~$odrguide",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",442,"^8",7,"^9",442,"^:",15,"^6Q",["^1E",["^6R",["^1E",[[],["^6S","^6T","^6U"]]]]],"^6V","Justify O'Doyles Rules","^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]]],"^12","^35","^6","zprint/guide.cljc","^:",15,"^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]],"^6[",[[],["^6S","^6T","^6U"]],"^71",null,"^6Y",3,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",3,"^6X",false,"^73",["^11",["^75","^7?"]]]],"^7",442,"^9",442,"^6Z",3,"^76",true,"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^6V","Justify O'Doyles Rules"],"~$areguide",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",146,"^8",7,"^9",146,"^:",15,"^6Q",["^1E",["^6R",["^1E",[[],["~$are-options"],["^6S","^6T","^6U"],["^7O","^6S","^6T","^6U"]]]]],"^6V","Format are test functions.  Call it with (partial {} areguide), where\n  the map can be {:justify? true} to justify the various rows. It will\n  use {:pair {:justify {:max-variance n}}} for the variance, but you can\n  give it a variance to use with {:max-variance n} in the map which is\n  its first argument.","^6W",["^ ","^6X",false,"^6Y",4,"^6Z",4,"^6[",[[],["^7O"],["^6S","^6T","^6U"],["^7O","^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^7O"],["^6S","^6T","^6U"],["^7O","^6S","^6T","^6U"]]],"^70",["^1E",[null,null,null,null]]]],"^12","^38","^6","zprint/guide.cljc","^:",15,"^6W",["^ ","^6X",false,"^6Y",4,"^6Z",4,"^6[",[[],["^7O"],["^6S","^6T","^6U"],["^7O","^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^7O"],["^6S","^6T","^6U"],["^7O","^6S","^6T","^6U"]]],"^70",["^1E",[null,null,null,null]]],"^6[",[[],["^7O"],["^6S","^6T","^6U"],["^7O","^6S","^6T","^6U"]],"^71",null,"^6Y",4,"^70",["^1E",[null,null,null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",1,"^6X",false,"^73","^74"],["^ ","^6Y",3,"^6X",false,"^73","^7B"],["^ ","^6Y",4,"^6X",false,"^73","^75"]],"^7",146,"^9",146,"^6Z",4,"^76",true,"^6Q",["^1E",[[],["^7O"],["^6S","^6T","^6U"],["^7O","^6S","^6T","^6U"]]],"^6V","Format are test functions.  Call it with (partial {} areguide), where\n  the map can be {:justify? true} to justify the various rows. It will\n  use {:pair {:justify {:max-variance n}}} for the variance, but you can\n  give it a variance to use with {:max-variance n} in the map which is\n  its first argument."],"~$rumguide-1",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",350,"^8",7,"^9",350,"^:",17,"^6Q",["^1E",["^6R",["^1E",[[],["^6S","^6T","^6U"]]]]],"^6V","Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n  with guides using :align.  For guide testing, do not use this as a model\n  for how to write a guide.","^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]]],"^12","^33","^6","zprint/guide.cljc","^:",17,"^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]],"^6[",[[],["^6S","^6T","^6U"]],"^71",null,"^6Y",3,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",3,"^6X",false,"^73","^75"]],"^7",350,"^9",350,"^6Z",3,"^76",true,"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^6V","Assumes that this is rum/defcs or something similar. Implement :arg1-mixin\n  with guides using :align.  For guide testing, do not use this as a model\n  for how to write a guide."],"~$count-constants",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",95,"^8",7,"^9",95,"^:",22,"^6Q",["^1E",["^6R",["^1E",[[["~$constant-count","~$possible-constant?"],"~$element"]]]]]],"^12","^34","^6","zprint/guide.cljc","^:",22,"^6[",["^1E",[["~$p__41866","^7T"]]],"^71",null,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^7",95,"^7<","^7C","^9",95,"^6Z",2,"^76",true,"^6Q",["^1E",["^6R",["^1E",[[["^7R","^7S"],"^7T"]]]]]],"~$constant-or-vector?",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",84,"^8",7,"^9",84,"^:",26,"^6Q",["^1E",["^6R",["^1E",[["^7T"]]]]],"^6V","Return true if a constant or vector."],"^12","^31","^6","zprint/guide.cljc","^:",26,"^6[",["^1E",[["^7T"]]],"^71",null,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^7",84,"^7<","~$boolean","^9",84,"^6Z",1,"^76",true,"^6Q",["^1E",["^6R",["^1E",[["^7T"]]]]],"^6V","Return true if a constant or vector."],"~$guideguide",["^ ","^6P",null,"^5",["^ ","^6","zprint/guide.cljc","^7",545,"^8",7,"^9",545,"^:",17,"^6Q",["^1E",["^6R",["^1E",[[],["^6S","^6T","^6U"]]]]],"^6V","Print out a guide","^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]]],"^12","^2B","^6","zprint/guide.cljc","^:",17,"^6W",["^ ","^6X",false,"^6Y",3,"^6Z",3,"^6[",[[],["^6S","^6T","^6U"]],"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^70",["^1E",[null,null]]],"^6[",[[],["^6S","^6T","^6U"]],"^71",null,"^6Y",3,"^70",["^1E",[null,null]],"^8",1,"^6X",false,"^72",[["^ ","^6Y",0,"^6X",false,"^73","^74"],["^ ","^6Y",3,"^6X",false,"^73",["^11",["^75","^7?"]]]],"^7",545,"^9",545,"^6Z",3,"^76",true,"^6Q",["^1E",[[],["^6S","^6T","^6U"]]],"^6V","Print out a guide"]],"^1@",["^ ","^U","^U","^1<","^1<","^1:","^1:","~$z","^1:"],"~:cljs.analyzer/constants",["^ ","^1>",["^11",["~:element-newline-best-group","~:indent-here","~:caller","~:indent-arg","~:align","~:indent","~:no-string-adj?","~:zstring","~:justify?","~:element","~:element-binding-*","~:next-inner","~:else","~:force-nl","~:mark","~:justify","~:pair","~:dbg-s","~:zloc","~:dbg-indent","~:options-reset","~:group-begin","~:guide","~:element-binding-vec","~:mark-at-indent","~:zmap-no-comment","~:element-pair-group","~:zfn-map","~:element-best","~:vector","~:element-guide","~:element-newline-best-*","~:option-fn","~:element-*","~:after","~:dbg?","~:list","~:spaces","~:element-pair-*","~$defprotocol","~:next-inner-restore","~:group-end","~:wrap-multi?","~:max-variance","~:mark-at","~:multi-arity-nl?","~:options","~:element-best-*","~:fn-map","~:hang?","~:indent-reset","~:import","~:element-binding-group","~:newline","~:before","~:what","~:rest"]],"~:order",["^8[","^87","^97","^9:","^8D","^89","^8R","^8N","^92","^8V","^8K","^8;","^8W","^8H","^8C","^8?","^8Q","^8A","^8>","^86","^8Y","^8=","^80","^81","^83","^8I","^8G","^8@","^85","^84","^8F","^82","^94","^8J","^8O","^8T","^95","^8Z","^7[","^8X","^93","^8S","^8<","^99","^90","^7Z","^8B","^88","^8E","^8L","^8M","^91","^96","^8P","^98","^8U","^8:"]],"^1I",["^ ","^1@",["^11",[]],"^1?",["^11",[]]],"^1J",["^ "],"^1K",["^1=","^1<","^19","^1:","^1;"]],"^16","^13","~:ns-specs",["^ "],"~:ns-spec-vars",["^11",[]],"~:compiler-options",["^3;",[["^9>","~:static-fns"],true,["^9>","~:shadow-tweaks"],null,["^9>","~:source-map-inline"],null,["^9>","~:elide-asserts"],false,["^9>","~:optimize-constants"],null,["^9>","^1P"],null,["^9>","~:external-config"],null,["^9>","~:tooling-config"],null,["^9>","~:emit-constants"],null,["^9>","~:load-tests"],null,["^9>","~:form-size-threshold"],null,["^9>","~:global-goog-object&array"],null,["^9>","~:data-readers"],null,["^9>","~:infer-externs"],"~:auto",["^9>","^1R"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^9>","~:fn-invoke-direct"],null,["^9>","~:source-map"],"/dev/null"]]]